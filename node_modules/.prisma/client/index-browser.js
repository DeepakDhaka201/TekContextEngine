
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatar: 'avatar',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  slug: 'slug',
  status: 'status',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  userId: 'userId',
  projectId: 'projectId'
};

exports.Prisma.CodebaseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  gitlabUrl: 'gitlabUrl',
  gitlabProjectId: 'gitlabProjectId',
  branch: 'branch',
  language: 'language',
  status: 'status',
  lastSyncAt: 'lastSyncAt',
  totalFiles: 'totalFiles',
  totalLines: 'totalLines',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  path: 'path',
  hash: 'hash',
  size: 'size',
  language: 'language',
  status: 'status',
  lastModified: 'lastModified',
  lineCount: 'lineCount',
  storageKey: 'storageKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  codebaseId: 'codebaseId'
};

exports.Prisma.SyncJobScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  priority: 'priority',
  progress: 'progress',
  message: 'message',
  error: 'error',
  metadata: 'metadata',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  codebaseId: 'codebaseId',
  userId: 'userId'
};

exports.Prisma.IndexHistoryScalarFieldEnum = {
  id: 'id',
  taskType: 'taskType',
  status: 'status',
  totalFiles: 'totalFiles',
  processedFiles: 'processedFiles',
  failedFiles: 'failedFiles',
  ignoredFiles: 'ignoredFiles',
  startTime: 'startTime',
  endTime: 'endTime',
  durationMs: 'durationMs',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  codebaseId: 'codebaseId',
  syncJobId: 'syncJobId',
  fileId: 'fileId'
};

exports.Prisma.CodegraphConfigScalarFieldEnum = {
  id: 'id',
  scipEnabled: 'scipEnabled',
  treeSitterEnabled: 'treeSitterEnabled',
  embeddingEnabled: 'embeddingEnabled',
  maxConcurrency: 'maxConcurrency',
  scipTimeout: 'scipTimeout',
  parseTimeout: 'parseTimeout',
  chunkSize: 'chunkSize',
  chunkOverlap: 'chunkOverlap',
  maxTokens: 'maxTokens',
  badgerDbPath: 'badgerDbPath',
  scipToolsPath: 'scipToolsPath',
  languageConfig: 'languageConfig',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  codebaseId: 'codebaseId'
};

exports.Prisma.VectorEmbeddingScalarFieldEnum = {
  id: 'id',
  content: 'content',
  filePath: 'filePath',
  chunkIndex: 'chunkIndex',
  startLine: 'startLine',
  endLine: 'endLine',
  startColumn: 'startColumn',
  endColumn: 'endColumn',
  tokenCount: 'tokenCount',
  embedding: 'embedding',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  codebaseId: 'codebaseId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  DELETED: 'DELETED'
};

exports.ProjectMemberRole = exports.$Enums.ProjectMemberRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER'
};

exports.CodebaseStatus = exports.$Enums.CodebaseStatus = {
  PENDING: 'PENDING',
  SYNCING: 'SYNCING',
  ACTIVE: 'ACTIVE',
  ERROR: 'ERROR',
  ARCHIVED: 'ARCHIVED'
};

exports.FileStatus = exports.$Enums.FileStatus = {
  ACTIVE: 'ACTIVE',
  DELETED: 'DELETED',
  IGNORED: 'IGNORED'
};

exports.SyncJobType = exports.$Enums.SyncJobType = {
  INITIAL_SYNC: 'INITIAL_SYNC',
  INCREMENTAL_SYNC: 'INCREMENTAL_SYNC',
  FULL_RESYNC: 'FULL_RESYNC',
  CLEANUP: 'CLEANUP',
  INDEX_ONLY: 'INDEX_ONLY'
};

exports.SyncJobStatus = exports.$Enums.SyncJobStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.IndexTaskType = exports.$Enums.IndexTaskType = {
  EMBEDDING: 'EMBEDDING',
  CODEGRAPH: 'CODEGRAPH',
  SCIP: 'SCIP',
  TREE_SITTER: 'TREE_SITTER'
};

exports.IndexTaskStatus = exports.$Enums.IndexTaskStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  PARTIAL_SUCCESS: 'PARTIAL_SUCCESS'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  ProjectMember: 'ProjectMember',
  Codebase: 'Codebase',
  File: 'File',
  SyncJob: 'SyncJob',
  IndexHistory: 'IndexHistory',
  CodegraphConfig: 'CodegraphConfig',
  VectorEmbedding: 'VectorEmbedding'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
