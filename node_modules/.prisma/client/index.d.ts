
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model ProjectMember
 * 
 */
export type ProjectMember = $Result.DefaultSelection<Prisma.$ProjectMemberPayload>
/**
 * Model Codebase
 * 
 */
export type Codebase = $Result.DefaultSelection<Prisma.$CodebasePayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model SyncJob
 * 
 */
export type SyncJob = $Result.DefaultSelection<Prisma.$SyncJobPayload>
/**
 * Model IndexHistory
 * 
 */
export type IndexHistory = $Result.DefaultSelection<Prisma.$IndexHistoryPayload>
/**
 * Model CodegraphConfig
 * 
 */
export type CodegraphConfig = $Result.DefaultSelection<Prisma.$CodegraphConfigPayload>
/**
 * Model VectorEmbedding
 * 
 */
export type VectorEmbedding = $Result.DefaultSelection<Prisma.$VectorEmbeddingPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ProjectStatus: {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  DELETED: 'DELETED'
};

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus]


export const ProjectMemberRole: {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER'
};

export type ProjectMemberRole = (typeof ProjectMemberRole)[keyof typeof ProjectMemberRole]


export const CodebaseStatus: {
  PENDING: 'PENDING',
  SYNCING: 'SYNCING',
  ACTIVE: 'ACTIVE',
  ERROR: 'ERROR',
  ARCHIVED: 'ARCHIVED'
};

export type CodebaseStatus = (typeof CodebaseStatus)[keyof typeof CodebaseStatus]


export const FileStatus: {
  ACTIVE: 'ACTIVE',
  DELETED: 'DELETED',
  IGNORED: 'IGNORED'
};

export type FileStatus = (typeof FileStatus)[keyof typeof FileStatus]


export const SyncJobType: {
  INITIAL_SYNC: 'INITIAL_SYNC',
  INCREMENTAL_SYNC: 'INCREMENTAL_SYNC',
  FULL_RESYNC: 'FULL_RESYNC',
  CLEANUP: 'CLEANUP',
  INDEX_ONLY: 'INDEX_ONLY'
};

export type SyncJobType = (typeof SyncJobType)[keyof typeof SyncJobType]


export const SyncJobStatus: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type SyncJobStatus = (typeof SyncJobStatus)[keyof typeof SyncJobStatus]


export const IndexTaskType: {
  EMBEDDING: 'EMBEDDING',
  CODEGRAPH: 'CODEGRAPH',
  SCIP: 'SCIP',
  TREE_SITTER: 'TREE_SITTER'
};

export type IndexTaskType = (typeof IndexTaskType)[keyof typeof IndexTaskType]


export const IndexTaskStatus: {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  PARTIAL_SUCCESS: 'PARTIAL_SUCCESS'
};

export type IndexTaskStatus = (typeof IndexTaskStatus)[keyof typeof IndexTaskStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ProjectStatus = $Enums.ProjectStatus

export const ProjectStatus: typeof $Enums.ProjectStatus

export type ProjectMemberRole = $Enums.ProjectMemberRole

export const ProjectMemberRole: typeof $Enums.ProjectMemberRole

export type CodebaseStatus = $Enums.CodebaseStatus

export const CodebaseStatus: typeof $Enums.CodebaseStatus

export type FileStatus = $Enums.FileStatus

export const FileStatus: typeof $Enums.FileStatus

export type SyncJobType = $Enums.SyncJobType

export const SyncJobType: typeof $Enums.SyncJobType

export type SyncJobStatus = $Enums.SyncJobStatus

export const SyncJobStatus: typeof $Enums.SyncJobStatus

export type IndexTaskType = $Enums.IndexTaskType

export const IndexTaskType: typeof $Enums.IndexTaskType

export type IndexTaskStatus = $Enums.IndexTaskStatus

export const IndexTaskStatus: typeof $Enums.IndexTaskStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.projectMember`: Exposes CRUD operations for the **ProjectMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectMembers
    * const projectMembers = await prisma.projectMember.findMany()
    * ```
    */
  get projectMember(): Prisma.ProjectMemberDelegate<ExtArgs>;

  /**
   * `prisma.codebase`: Exposes CRUD operations for the **Codebase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Codebases
    * const codebases = await prisma.codebase.findMany()
    * ```
    */
  get codebase(): Prisma.CodebaseDelegate<ExtArgs>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs>;

  /**
   * `prisma.syncJob`: Exposes CRUD operations for the **SyncJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SyncJobs
    * const syncJobs = await prisma.syncJob.findMany()
    * ```
    */
  get syncJob(): Prisma.SyncJobDelegate<ExtArgs>;

  /**
   * `prisma.indexHistory`: Exposes CRUD operations for the **IndexHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IndexHistories
    * const indexHistories = await prisma.indexHistory.findMany()
    * ```
    */
  get indexHistory(): Prisma.IndexHistoryDelegate<ExtArgs>;

  /**
   * `prisma.codegraphConfig`: Exposes CRUD operations for the **CodegraphConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CodegraphConfigs
    * const codegraphConfigs = await prisma.codegraphConfig.findMany()
    * ```
    */
  get codegraphConfig(): Prisma.CodegraphConfigDelegate<ExtArgs>;

  /**
   * `prisma.vectorEmbedding`: Exposes CRUD operations for the **VectorEmbedding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VectorEmbeddings
    * const vectorEmbeddings = await prisma.vectorEmbedding.findMany()
    * ```
    */
  get vectorEmbedding(): Prisma.VectorEmbeddingDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Project: 'Project',
    ProjectMember: 'ProjectMember',
    Codebase: 'Codebase',
    File: 'File',
    SyncJob: 'SyncJob',
    IndexHistory: 'IndexHistory',
    CodegraphConfig: 'CodegraphConfig',
    VectorEmbedding: 'VectorEmbedding'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "project" | "projectMember" | "codebase" | "file" | "syncJob" | "indexHistory" | "codegraphConfig" | "vectorEmbedding"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      ProjectMember: {
        payload: Prisma.$ProjectMemberPayload<ExtArgs>
        fields: Prisma.ProjectMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          findFirst: {
            args: Prisma.ProjectMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          findMany: {
            args: Prisma.ProjectMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          create: {
            args: Prisma.ProjectMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          createMany: {
            args: Prisma.ProjectMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          delete: {
            args: Prisma.ProjectMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          update: {
            args: Prisma.ProjectMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          deleteMany: {
            args: Prisma.ProjectMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          aggregate: {
            args: Prisma.ProjectMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectMember>
          }
          groupBy: {
            args: Prisma.ProjectMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectMemberCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectMemberCountAggregateOutputType> | number
          }
        }
      }
      Codebase: {
        payload: Prisma.$CodebasePayload<ExtArgs>
        fields: Prisma.CodebaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodebaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodebaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload>
          }
          findFirst: {
            args: Prisma.CodebaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodebaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload>
          }
          findMany: {
            args: Prisma.CodebaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload>[]
          }
          create: {
            args: Prisma.CodebaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload>
          }
          createMany: {
            args: Prisma.CodebaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CodebaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload>[]
          }
          delete: {
            args: Prisma.CodebaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload>
          }
          update: {
            args: Prisma.CodebaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload>
          }
          deleteMany: {
            args: Prisma.CodebaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CodebaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CodebaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodebasePayload>
          }
          aggregate: {
            args: Prisma.CodebaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCodebase>
          }
          groupBy: {
            args: Prisma.CodebaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CodebaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CodebaseCountArgs<ExtArgs>
            result: $Utils.Optional<CodebaseCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      SyncJob: {
        payload: Prisma.$SyncJobPayload<ExtArgs>
        fields: Prisma.SyncJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SyncJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SyncJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          findFirst: {
            args: Prisma.SyncJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SyncJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          findMany: {
            args: Prisma.SyncJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>[]
          }
          create: {
            args: Prisma.SyncJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          createMany: {
            args: Prisma.SyncJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SyncJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>[]
          }
          delete: {
            args: Prisma.SyncJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          update: {
            args: Prisma.SyncJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          deleteMany: {
            args: Prisma.SyncJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SyncJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SyncJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SyncJobPayload>
          }
          aggregate: {
            args: Prisma.SyncJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSyncJob>
          }
          groupBy: {
            args: Prisma.SyncJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<SyncJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.SyncJobCountArgs<ExtArgs>
            result: $Utils.Optional<SyncJobCountAggregateOutputType> | number
          }
        }
      }
      IndexHistory: {
        payload: Prisma.$IndexHistoryPayload<ExtArgs>
        fields: Prisma.IndexHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IndexHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IndexHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload>
          }
          findFirst: {
            args: Prisma.IndexHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IndexHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload>
          }
          findMany: {
            args: Prisma.IndexHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload>[]
          }
          create: {
            args: Prisma.IndexHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload>
          }
          createMany: {
            args: Prisma.IndexHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IndexHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload>[]
          }
          delete: {
            args: Prisma.IndexHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload>
          }
          update: {
            args: Prisma.IndexHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload>
          }
          deleteMany: {
            args: Prisma.IndexHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IndexHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IndexHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndexHistoryPayload>
          }
          aggregate: {
            args: Prisma.IndexHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIndexHistory>
          }
          groupBy: {
            args: Prisma.IndexHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<IndexHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.IndexHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<IndexHistoryCountAggregateOutputType> | number
          }
        }
      }
      CodegraphConfig: {
        payload: Prisma.$CodegraphConfigPayload<ExtArgs>
        fields: Prisma.CodegraphConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodegraphConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodegraphConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload>
          }
          findFirst: {
            args: Prisma.CodegraphConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodegraphConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload>
          }
          findMany: {
            args: Prisma.CodegraphConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload>[]
          }
          create: {
            args: Prisma.CodegraphConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload>
          }
          createMany: {
            args: Prisma.CodegraphConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CodegraphConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload>[]
          }
          delete: {
            args: Prisma.CodegraphConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload>
          }
          update: {
            args: Prisma.CodegraphConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload>
          }
          deleteMany: {
            args: Prisma.CodegraphConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CodegraphConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CodegraphConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodegraphConfigPayload>
          }
          aggregate: {
            args: Prisma.CodegraphConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCodegraphConfig>
          }
          groupBy: {
            args: Prisma.CodegraphConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<CodegraphConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.CodegraphConfigCountArgs<ExtArgs>
            result: $Utils.Optional<CodegraphConfigCountAggregateOutputType> | number
          }
        }
      }
      VectorEmbedding: {
        payload: Prisma.$VectorEmbeddingPayload<ExtArgs>
        fields: Prisma.VectorEmbeddingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VectorEmbeddingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VectorEmbeddingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload>
          }
          findFirst: {
            args: Prisma.VectorEmbeddingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VectorEmbeddingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload>
          }
          findMany: {
            args: Prisma.VectorEmbeddingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload>[]
          }
          create: {
            args: Prisma.VectorEmbeddingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload>
          }
          createMany: {
            args: Prisma.VectorEmbeddingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VectorEmbeddingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload>[]
          }
          delete: {
            args: Prisma.VectorEmbeddingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload>
          }
          update: {
            args: Prisma.VectorEmbeddingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload>
          }
          deleteMany: {
            args: Prisma.VectorEmbeddingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VectorEmbeddingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VectorEmbeddingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VectorEmbeddingPayload>
          }
          aggregate: {
            args: Prisma.VectorEmbeddingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVectorEmbedding>
          }
          groupBy: {
            args: Prisma.VectorEmbeddingGroupByArgs<ExtArgs>
            result: $Utils.Optional<VectorEmbeddingGroupByOutputType>[]
          }
          count: {
            args: Prisma.VectorEmbeddingCountArgs<ExtArgs>
            result: $Utils.Optional<VectorEmbeddingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    projects: number
    syncJobs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    syncJobs?: boolean | UserCountOutputTypeCountSyncJobsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSyncJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncJobWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    members: number
    codebases: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | ProjectCountOutputTypeCountMembersArgs
    codebases?: boolean | ProjectCountOutputTypeCountCodebasesArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCodebasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodebaseWhereInput
  }


  /**
   * Count Type CodebaseCountOutputType
   */

  export type CodebaseCountOutputType = {
    files: number
    syncJobs: number
    indexHistory: number
    vectorEmbeddings: number
  }

  export type CodebaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | CodebaseCountOutputTypeCountFilesArgs
    syncJobs?: boolean | CodebaseCountOutputTypeCountSyncJobsArgs
    indexHistory?: boolean | CodebaseCountOutputTypeCountIndexHistoryArgs
    vectorEmbeddings?: boolean | CodebaseCountOutputTypeCountVectorEmbeddingsArgs
  }

  // Custom InputTypes
  /**
   * CodebaseCountOutputType without action
   */
  export type CodebaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodebaseCountOutputType
     */
    select?: CodebaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CodebaseCountOutputType without action
   */
  export type CodebaseCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * CodebaseCountOutputType without action
   */
  export type CodebaseCountOutputTypeCountSyncJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncJobWhereInput
  }

  /**
   * CodebaseCountOutputType without action
   */
  export type CodebaseCountOutputTypeCountIndexHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndexHistoryWhereInput
  }

  /**
   * CodebaseCountOutputType without action
   */
  export type CodebaseCountOutputTypeCountVectorEmbeddingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VectorEmbeddingWhereInput
  }


  /**
   * Count Type FileCountOutputType
   */

  export type FileCountOutputType = {
    indexHistory: number
  }

  export type FileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    indexHistory?: boolean | FileCountOutputTypeCountIndexHistoryArgs
  }

  // Custom InputTypes
  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileCountOutputType
     */
    select?: FileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountIndexHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndexHistoryWhereInput
  }


  /**
   * Count Type SyncJobCountOutputType
   */

  export type SyncJobCountOutputType = {
    indexHistory: number
  }

  export type SyncJobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    indexHistory?: boolean | SyncJobCountOutputTypeCountIndexHistoryArgs
  }

  // Custom InputTypes
  /**
   * SyncJobCountOutputType without action
   */
  export type SyncJobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJobCountOutputType
     */
    select?: SyncJobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SyncJobCountOutputType without action
   */
  export type SyncJobCountOutputTypeCountIndexHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndexHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    avatar: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    avatar: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    avatar?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string | null
    name: string | null
    avatar: string | null
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projects?: boolean | User$projectsArgs<ExtArgs>
    syncJobs?: boolean | User$syncJobsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatar?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projects?: boolean | User$projectsArgs<ExtArgs>
    syncJobs?: boolean | User$syncJobsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      projects: Prisma.$ProjectMemberPayload<ExtArgs>[]
      syncJobs: Prisma.$SyncJobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string | null
      name: string | null
      avatar: string | null
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany"> | Null>
    syncJobs<T extends User$syncJobsArgs<ExtArgs> = {}>(args?: Subset<T, User$syncJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    cursor?: ProjectMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * User.syncJobs
   */
  export type User$syncJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    where?: SyncJobWhereInput
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    cursor?: SyncJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    status: $Enums.ProjectStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    status: $Enums.ProjectStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    slug: number
    status: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    status?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    slug: string
    status: $Enums.ProjectStatus
    settings: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    status?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Project$membersArgs<ExtArgs>
    codebases?: boolean | Project$codebasesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    status?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    status?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Project$membersArgs<ExtArgs>
    codebases?: boolean | Project$codebasesArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      members: Prisma.$ProjectMemberPayload<ExtArgs>[]
      codebases: Prisma.$CodebasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      slug: string
      status: $Enums.ProjectStatus
      settings: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Project$membersArgs<ExtArgs> = {}>(args?: Subset<T, Project$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany"> | Null>
    codebases<T extends Project$codebasesArgs<ExtArgs> = {}>(args?: Subset<T, Project$codebasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly slug: FieldRef<"Project", 'String'>
    readonly status: FieldRef<"Project", 'ProjectStatus'>
    readonly settings: FieldRef<"Project", 'Json'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.members
   */
  export type Project$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    cursor?: ProjectMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * Project.codebases
   */
  export type Project$codebasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    where?: CodebaseWhereInput
    orderBy?: CodebaseOrderByWithRelationInput | CodebaseOrderByWithRelationInput[]
    cursor?: CodebaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CodebaseScalarFieldEnum | CodebaseScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model ProjectMember
   */

  export type AggregateProjectMember = {
    _count: ProjectMemberCountAggregateOutputType | null
    _min: ProjectMemberMinAggregateOutputType | null
    _max: ProjectMemberMaxAggregateOutputType | null
  }

  export type ProjectMemberMinAggregateOutputType = {
    id: string | null
    role: $Enums.ProjectMemberRole | null
    joinedAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectMemberMaxAggregateOutputType = {
    id: string | null
    role: $Enums.ProjectMemberRole | null
    joinedAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectMemberCountAggregateOutputType = {
    id: number
    role: number
    joinedAt: number
    userId: number
    projectId: number
    _all: number
  }


  export type ProjectMemberMinAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    userId?: true
    projectId?: true
  }

  export type ProjectMemberMaxAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    userId?: true
    projectId?: true
  }

  export type ProjectMemberCountAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    userId?: true
    projectId?: true
    _all?: true
  }

  export type ProjectMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMember to aggregate.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectMembers
    **/
    _count?: true | ProjectMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMemberMaxAggregateInputType
  }

  export type GetProjectMemberAggregateType<T extends ProjectMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectMember[P]>
      : GetScalarType<T[P], AggregateProjectMember[P]>
  }




  export type ProjectMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithAggregationInput | ProjectMemberOrderByWithAggregationInput[]
    by: ProjectMemberScalarFieldEnum[] | ProjectMemberScalarFieldEnum
    having?: ProjectMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectMemberCountAggregateInputType | true
    _min?: ProjectMemberMinAggregateInputType
    _max?: ProjectMemberMaxAggregateInputType
  }

  export type ProjectMemberGroupByOutputType = {
    id: string
    role: $Enums.ProjectMemberRole
    joinedAt: Date
    userId: string
    projectId: string
    _count: ProjectMemberCountAggregateOutputType | null
    _min: ProjectMemberMinAggregateOutputType | null
    _max: ProjectMemberMaxAggregateOutputType | null
  }

  type GetProjectMemberGroupByPayload<T extends ProjectMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
        }
      >
    >


  export type ProjectMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectScalar = {
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    userId?: boolean
    projectId?: boolean
  }

  export type ProjectMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.ProjectMemberRole
      joinedAt: Date
      userId: string
      projectId: string
    }, ExtArgs["result"]["projectMember"]>
    composites: {}
  }

  type ProjectMemberGetPayload<S extends boolean | null | undefined | ProjectMemberDefaultArgs> = $Result.GetResult<Prisma.$ProjectMemberPayload, S>

  type ProjectMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectMemberCountAggregateInputType | true
    }

  export interface ProjectMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectMember'], meta: { name: 'ProjectMember' } }
    /**
     * Find zero or one ProjectMember that matches the filter.
     * @param {ProjectMemberFindUniqueArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectMemberFindUniqueArgs>(args: SelectSubset<T, ProjectMemberFindUniqueArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectMemberFindUniqueOrThrowArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindFirstArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectMemberFindFirstArgs>(args?: SelectSubset<T, ProjectMemberFindFirstArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindFirstOrThrowArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectMembers
     * const projectMembers = await prisma.projectMember.findMany()
     * 
     * // Get first 10 ProjectMembers
     * const projectMembers = await prisma.projectMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectMemberFindManyArgs>(args?: SelectSubset<T, ProjectMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectMember.
     * @param {ProjectMemberCreateArgs} args - Arguments to create a ProjectMember.
     * @example
     * // Create one ProjectMember
     * const ProjectMember = await prisma.projectMember.create({
     *   data: {
     *     // ... data to create a ProjectMember
     *   }
     * })
     * 
     */
    create<T extends ProjectMemberCreateArgs>(args: SelectSubset<T, ProjectMemberCreateArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectMembers.
     * @param {ProjectMemberCreateManyArgs} args - Arguments to create many ProjectMembers.
     * @example
     * // Create many ProjectMembers
     * const projectMember = await prisma.projectMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectMemberCreateManyArgs>(args?: SelectSubset<T, ProjectMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectMembers and returns the data saved in the database.
     * @param {ProjectMemberCreateManyAndReturnArgs} args - Arguments to create many ProjectMembers.
     * @example
     * // Create many ProjectMembers
     * const projectMember = await prisma.projectMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectMembers and only return the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectMember.
     * @param {ProjectMemberDeleteArgs} args - Arguments to delete one ProjectMember.
     * @example
     * // Delete one ProjectMember
     * const ProjectMember = await prisma.projectMember.delete({
     *   where: {
     *     // ... filter to delete one ProjectMember
     *   }
     * })
     * 
     */
    delete<T extends ProjectMemberDeleteArgs>(args: SelectSubset<T, ProjectMemberDeleteArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectMember.
     * @param {ProjectMemberUpdateArgs} args - Arguments to update one ProjectMember.
     * @example
     * // Update one ProjectMember
     * const projectMember = await prisma.projectMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectMemberUpdateArgs>(args: SelectSubset<T, ProjectMemberUpdateArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectMembers.
     * @param {ProjectMemberDeleteManyArgs} args - Arguments to filter ProjectMembers to delete.
     * @example
     * // Delete a few ProjectMembers
     * const { count } = await prisma.projectMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectMemberDeleteManyArgs>(args?: SelectSubset<T, ProjectMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectMembers
     * const projectMember = await prisma.projectMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectMemberUpdateManyArgs>(args: SelectSubset<T, ProjectMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectMember.
     * @param {ProjectMemberUpsertArgs} args - Arguments to update or create a ProjectMember.
     * @example
     * // Update or create a ProjectMember
     * const projectMember = await prisma.projectMember.upsert({
     *   create: {
     *     // ... data to create a ProjectMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectMember we want to update
     *   }
     * })
     */
    upsert<T extends ProjectMemberUpsertArgs>(args: SelectSubset<T, ProjectMemberUpsertArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberCountArgs} args - Arguments to filter ProjectMembers to count.
     * @example
     * // Count the number of ProjectMembers
     * const count = await prisma.projectMember.count({
     *   where: {
     *     // ... the filter for the ProjectMembers we want to count
     *   }
     * })
    **/
    count<T extends ProjectMemberCountArgs>(
      args?: Subset<T, ProjectMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectMemberAggregateArgs>(args: Subset<T, ProjectMemberAggregateArgs>): Prisma.PrismaPromise<GetProjectMemberAggregateType<T>>

    /**
     * Group by ProjectMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectMemberGroupByArgs['orderBy'] }
        : { orderBy?: ProjectMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectMember model
   */
  readonly fields: ProjectMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectMember model
   */ 
  interface ProjectMemberFieldRefs {
    readonly id: FieldRef<"ProjectMember", 'String'>
    readonly role: FieldRef<"ProjectMember", 'ProjectMemberRole'>
    readonly joinedAt: FieldRef<"ProjectMember", 'DateTime'>
    readonly userId: FieldRef<"ProjectMember", 'String'>
    readonly projectId: FieldRef<"ProjectMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectMember findUnique
   */
  export type ProjectMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember findUniqueOrThrow
   */
  export type ProjectMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember findFirst
   */
  export type ProjectMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMembers.
     */
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember findFirstOrThrow
   */
  export type ProjectMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMembers.
     */
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember findMany
   */
  export type ProjectMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMembers to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember create
   */
  export type ProjectMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectMember.
     */
    data: XOR<ProjectMemberCreateInput, ProjectMemberUncheckedCreateInput>
  }

  /**
   * ProjectMember createMany
   */
  export type ProjectMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectMembers.
     */
    data: ProjectMemberCreateManyInput | ProjectMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectMember createManyAndReturn
   */
  export type ProjectMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectMembers.
     */
    data: ProjectMemberCreateManyInput | ProjectMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectMember update
   */
  export type ProjectMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectMember.
     */
    data: XOR<ProjectMemberUpdateInput, ProjectMemberUncheckedUpdateInput>
    /**
     * Choose, which ProjectMember to update.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember updateMany
   */
  export type ProjectMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectMembers.
     */
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyInput>
    /**
     * Filter which ProjectMembers to update
     */
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectMember upsert
   */
  export type ProjectMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectMember to update in case it exists.
     */
    where: ProjectMemberWhereUniqueInput
    /**
     * In case the ProjectMember found by the `where` argument doesn't exist, create a new ProjectMember with this data.
     */
    create: XOR<ProjectMemberCreateInput, ProjectMemberUncheckedCreateInput>
    /**
     * In case the ProjectMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectMemberUpdateInput, ProjectMemberUncheckedUpdateInput>
  }

  /**
   * ProjectMember delete
   */
  export type ProjectMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter which ProjectMember to delete.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember deleteMany
   */
  export type ProjectMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMembers to delete
     */
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectMember without action
   */
  export type ProjectMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
  }


  /**
   * Model Codebase
   */

  export type AggregateCodebase = {
    _count: CodebaseCountAggregateOutputType | null
    _avg: CodebaseAvgAggregateOutputType | null
    _sum: CodebaseSumAggregateOutputType | null
    _min: CodebaseMinAggregateOutputType | null
    _max: CodebaseMaxAggregateOutputType | null
  }

  export type CodebaseAvgAggregateOutputType = {
    gitlabProjectId: number | null
    totalFiles: number | null
    totalLines: number | null
  }

  export type CodebaseSumAggregateOutputType = {
    gitlabProjectId: number | null
    totalFiles: number | null
    totalLines: number | null
  }

  export type CodebaseMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    gitlabUrl: string | null
    gitlabProjectId: number | null
    branch: string | null
    language: string | null
    status: $Enums.CodebaseStatus | null
    lastSyncAt: Date | null
    totalFiles: number | null
    totalLines: number | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type CodebaseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    gitlabUrl: string | null
    gitlabProjectId: number | null
    branch: string | null
    language: string | null
    status: $Enums.CodebaseStatus | null
    lastSyncAt: Date | null
    totalFiles: number | null
    totalLines: number | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type CodebaseCountAggregateOutputType = {
    id: number
    name: number
    description: number
    gitlabUrl: number
    gitlabProjectId: number
    branch: number
    language: number
    status: number
    lastSyncAt: number
    totalFiles: number
    totalLines: number
    settings: number
    createdAt: number
    updatedAt: number
    projectId: number
    _all: number
  }


  export type CodebaseAvgAggregateInputType = {
    gitlabProjectId?: true
    totalFiles?: true
    totalLines?: true
  }

  export type CodebaseSumAggregateInputType = {
    gitlabProjectId?: true
    totalFiles?: true
    totalLines?: true
  }

  export type CodebaseMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    gitlabUrl?: true
    gitlabProjectId?: true
    branch?: true
    language?: true
    status?: true
    lastSyncAt?: true
    totalFiles?: true
    totalLines?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type CodebaseMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    gitlabUrl?: true
    gitlabProjectId?: true
    branch?: true
    language?: true
    status?: true
    lastSyncAt?: true
    totalFiles?: true
    totalLines?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type CodebaseCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    gitlabUrl?: true
    gitlabProjectId?: true
    branch?: true
    language?: true
    status?: true
    lastSyncAt?: true
    totalFiles?: true
    totalLines?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    _all?: true
  }

  export type CodebaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Codebase to aggregate.
     */
    where?: CodebaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codebases to fetch.
     */
    orderBy?: CodebaseOrderByWithRelationInput | CodebaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodebaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codebases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codebases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Codebases
    **/
    _count?: true | CodebaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CodebaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CodebaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodebaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodebaseMaxAggregateInputType
  }

  export type GetCodebaseAggregateType<T extends CodebaseAggregateArgs> = {
        [P in keyof T & keyof AggregateCodebase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCodebase[P]>
      : GetScalarType<T[P], AggregateCodebase[P]>
  }




  export type CodebaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodebaseWhereInput
    orderBy?: CodebaseOrderByWithAggregationInput | CodebaseOrderByWithAggregationInput[]
    by: CodebaseScalarFieldEnum[] | CodebaseScalarFieldEnum
    having?: CodebaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodebaseCountAggregateInputType | true
    _avg?: CodebaseAvgAggregateInputType
    _sum?: CodebaseSumAggregateInputType
    _min?: CodebaseMinAggregateInputType
    _max?: CodebaseMaxAggregateInputType
  }

  export type CodebaseGroupByOutputType = {
    id: string
    name: string
    description: string | null
    gitlabUrl: string
    gitlabProjectId: number | null
    branch: string
    language: string | null
    status: $Enums.CodebaseStatus
    lastSyncAt: Date | null
    totalFiles: number
    totalLines: number
    settings: JsonValue | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    _count: CodebaseCountAggregateOutputType | null
    _avg: CodebaseAvgAggregateOutputType | null
    _sum: CodebaseSumAggregateOutputType | null
    _min: CodebaseMinAggregateOutputType | null
    _max: CodebaseMaxAggregateOutputType | null
  }

  type GetCodebaseGroupByPayload<T extends CodebaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodebaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodebaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodebaseGroupByOutputType[P]>
            : GetScalarType<T[P], CodebaseGroupByOutputType[P]>
        }
      >
    >


  export type CodebaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    gitlabUrl?: boolean
    gitlabProjectId?: boolean
    branch?: boolean
    language?: boolean
    status?: boolean
    lastSyncAt?: boolean
    totalFiles?: boolean
    totalLines?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    files?: boolean | Codebase$filesArgs<ExtArgs>
    syncJobs?: boolean | Codebase$syncJobsArgs<ExtArgs>
    indexHistory?: boolean | Codebase$indexHistoryArgs<ExtArgs>
    codegraphConfig?: boolean | Codebase$codegraphConfigArgs<ExtArgs>
    vectorEmbeddings?: boolean | Codebase$vectorEmbeddingsArgs<ExtArgs>
    _count?: boolean | CodebaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["codebase"]>

  export type CodebaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    gitlabUrl?: boolean
    gitlabProjectId?: boolean
    branch?: boolean
    language?: boolean
    status?: boolean
    lastSyncAt?: boolean
    totalFiles?: boolean
    totalLines?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["codebase"]>

  export type CodebaseSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    gitlabUrl?: boolean
    gitlabProjectId?: boolean
    branch?: boolean
    language?: boolean
    status?: boolean
    lastSyncAt?: boolean
    totalFiles?: boolean
    totalLines?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
  }

  export type CodebaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    files?: boolean | Codebase$filesArgs<ExtArgs>
    syncJobs?: boolean | Codebase$syncJobsArgs<ExtArgs>
    indexHistory?: boolean | Codebase$indexHistoryArgs<ExtArgs>
    codegraphConfig?: boolean | Codebase$codegraphConfigArgs<ExtArgs>
    vectorEmbeddings?: boolean | Codebase$vectorEmbeddingsArgs<ExtArgs>
    _count?: boolean | CodebaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CodebaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $CodebasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Codebase"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      files: Prisma.$FilePayload<ExtArgs>[]
      syncJobs: Prisma.$SyncJobPayload<ExtArgs>[]
      indexHistory: Prisma.$IndexHistoryPayload<ExtArgs>[]
      codegraphConfig: Prisma.$CodegraphConfigPayload<ExtArgs> | null
      vectorEmbeddings: Prisma.$VectorEmbeddingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      gitlabUrl: string
      gitlabProjectId: number | null
      branch: string
      language: string | null
      status: $Enums.CodebaseStatus
      lastSyncAt: Date | null
      totalFiles: number
      totalLines: number
      settings: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      projectId: string
    }, ExtArgs["result"]["codebase"]>
    composites: {}
  }

  type CodebaseGetPayload<S extends boolean | null | undefined | CodebaseDefaultArgs> = $Result.GetResult<Prisma.$CodebasePayload, S>

  type CodebaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CodebaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CodebaseCountAggregateInputType | true
    }

  export interface CodebaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Codebase'], meta: { name: 'Codebase' } }
    /**
     * Find zero or one Codebase that matches the filter.
     * @param {CodebaseFindUniqueArgs} args - Arguments to find a Codebase
     * @example
     * // Get one Codebase
     * const codebase = await prisma.codebase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CodebaseFindUniqueArgs>(args: SelectSubset<T, CodebaseFindUniqueArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Codebase that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CodebaseFindUniqueOrThrowArgs} args - Arguments to find a Codebase
     * @example
     * // Get one Codebase
     * const codebase = await prisma.codebase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CodebaseFindUniqueOrThrowArgs>(args: SelectSubset<T, CodebaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Codebase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodebaseFindFirstArgs} args - Arguments to find a Codebase
     * @example
     * // Get one Codebase
     * const codebase = await prisma.codebase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CodebaseFindFirstArgs>(args?: SelectSubset<T, CodebaseFindFirstArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Codebase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodebaseFindFirstOrThrowArgs} args - Arguments to find a Codebase
     * @example
     * // Get one Codebase
     * const codebase = await prisma.codebase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CodebaseFindFirstOrThrowArgs>(args?: SelectSubset<T, CodebaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Codebases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodebaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Codebases
     * const codebases = await prisma.codebase.findMany()
     * 
     * // Get first 10 Codebases
     * const codebases = await prisma.codebase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const codebaseWithIdOnly = await prisma.codebase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CodebaseFindManyArgs>(args?: SelectSubset<T, CodebaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Codebase.
     * @param {CodebaseCreateArgs} args - Arguments to create a Codebase.
     * @example
     * // Create one Codebase
     * const Codebase = await prisma.codebase.create({
     *   data: {
     *     // ... data to create a Codebase
     *   }
     * })
     * 
     */
    create<T extends CodebaseCreateArgs>(args: SelectSubset<T, CodebaseCreateArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Codebases.
     * @param {CodebaseCreateManyArgs} args - Arguments to create many Codebases.
     * @example
     * // Create many Codebases
     * const codebase = await prisma.codebase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CodebaseCreateManyArgs>(args?: SelectSubset<T, CodebaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Codebases and returns the data saved in the database.
     * @param {CodebaseCreateManyAndReturnArgs} args - Arguments to create many Codebases.
     * @example
     * // Create many Codebases
     * const codebase = await prisma.codebase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Codebases and only return the `id`
     * const codebaseWithIdOnly = await prisma.codebase.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CodebaseCreateManyAndReturnArgs>(args?: SelectSubset<T, CodebaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Codebase.
     * @param {CodebaseDeleteArgs} args - Arguments to delete one Codebase.
     * @example
     * // Delete one Codebase
     * const Codebase = await prisma.codebase.delete({
     *   where: {
     *     // ... filter to delete one Codebase
     *   }
     * })
     * 
     */
    delete<T extends CodebaseDeleteArgs>(args: SelectSubset<T, CodebaseDeleteArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Codebase.
     * @param {CodebaseUpdateArgs} args - Arguments to update one Codebase.
     * @example
     * // Update one Codebase
     * const codebase = await prisma.codebase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CodebaseUpdateArgs>(args: SelectSubset<T, CodebaseUpdateArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Codebases.
     * @param {CodebaseDeleteManyArgs} args - Arguments to filter Codebases to delete.
     * @example
     * // Delete a few Codebases
     * const { count } = await prisma.codebase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CodebaseDeleteManyArgs>(args?: SelectSubset<T, CodebaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Codebases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodebaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Codebases
     * const codebase = await prisma.codebase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CodebaseUpdateManyArgs>(args: SelectSubset<T, CodebaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Codebase.
     * @param {CodebaseUpsertArgs} args - Arguments to update or create a Codebase.
     * @example
     * // Update or create a Codebase
     * const codebase = await prisma.codebase.upsert({
     *   create: {
     *     // ... data to create a Codebase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Codebase we want to update
     *   }
     * })
     */
    upsert<T extends CodebaseUpsertArgs>(args: SelectSubset<T, CodebaseUpsertArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Codebases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodebaseCountArgs} args - Arguments to filter Codebases to count.
     * @example
     * // Count the number of Codebases
     * const count = await prisma.codebase.count({
     *   where: {
     *     // ... the filter for the Codebases we want to count
     *   }
     * })
    **/
    count<T extends CodebaseCountArgs>(
      args?: Subset<T, CodebaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodebaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Codebase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodebaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodebaseAggregateArgs>(args: Subset<T, CodebaseAggregateArgs>): Prisma.PrismaPromise<GetCodebaseAggregateType<T>>

    /**
     * Group by Codebase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodebaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodebaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodebaseGroupByArgs['orderBy'] }
        : { orderBy?: CodebaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodebaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodebaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Codebase model
   */
  readonly fields: CodebaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Codebase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodebaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    files<T extends Codebase$filesArgs<ExtArgs> = {}>(args?: Subset<T, Codebase$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany"> | Null>
    syncJobs<T extends Codebase$syncJobsArgs<ExtArgs> = {}>(args?: Subset<T, Codebase$syncJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findMany"> | Null>
    indexHistory<T extends Codebase$indexHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Codebase$indexHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    codegraphConfig<T extends Codebase$codegraphConfigArgs<ExtArgs> = {}>(args?: Subset<T, Codebase$codegraphConfigArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    vectorEmbeddings<T extends Codebase$vectorEmbeddingsArgs<ExtArgs> = {}>(args?: Subset<T, Codebase$vectorEmbeddingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Codebase model
   */ 
  interface CodebaseFieldRefs {
    readonly id: FieldRef<"Codebase", 'String'>
    readonly name: FieldRef<"Codebase", 'String'>
    readonly description: FieldRef<"Codebase", 'String'>
    readonly gitlabUrl: FieldRef<"Codebase", 'String'>
    readonly gitlabProjectId: FieldRef<"Codebase", 'Int'>
    readonly branch: FieldRef<"Codebase", 'String'>
    readonly language: FieldRef<"Codebase", 'String'>
    readonly status: FieldRef<"Codebase", 'CodebaseStatus'>
    readonly lastSyncAt: FieldRef<"Codebase", 'DateTime'>
    readonly totalFiles: FieldRef<"Codebase", 'Int'>
    readonly totalLines: FieldRef<"Codebase", 'Int'>
    readonly settings: FieldRef<"Codebase", 'Json'>
    readonly createdAt: FieldRef<"Codebase", 'DateTime'>
    readonly updatedAt: FieldRef<"Codebase", 'DateTime'>
    readonly projectId: FieldRef<"Codebase", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Codebase findUnique
   */
  export type CodebaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * Filter, which Codebase to fetch.
     */
    where: CodebaseWhereUniqueInput
  }

  /**
   * Codebase findUniqueOrThrow
   */
  export type CodebaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * Filter, which Codebase to fetch.
     */
    where: CodebaseWhereUniqueInput
  }

  /**
   * Codebase findFirst
   */
  export type CodebaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * Filter, which Codebase to fetch.
     */
    where?: CodebaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codebases to fetch.
     */
    orderBy?: CodebaseOrderByWithRelationInput | CodebaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Codebases.
     */
    cursor?: CodebaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codebases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codebases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Codebases.
     */
    distinct?: CodebaseScalarFieldEnum | CodebaseScalarFieldEnum[]
  }

  /**
   * Codebase findFirstOrThrow
   */
  export type CodebaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * Filter, which Codebase to fetch.
     */
    where?: CodebaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codebases to fetch.
     */
    orderBy?: CodebaseOrderByWithRelationInput | CodebaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Codebases.
     */
    cursor?: CodebaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codebases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codebases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Codebases.
     */
    distinct?: CodebaseScalarFieldEnum | CodebaseScalarFieldEnum[]
  }

  /**
   * Codebase findMany
   */
  export type CodebaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * Filter, which Codebases to fetch.
     */
    where?: CodebaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Codebases to fetch.
     */
    orderBy?: CodebaseOrderByWithRelationInput | CodebaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Codebases.
     */
    cursor?: CodebaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Codebases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Codebases.
     */
    skip?: number
    distinct?: CodebaseScalarFieldEnum | CodebaseScalarFieldEnum[]
  }

  /**
   * Codebase create
   */
  export type CodebaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Codebase.
     */
    data: XOR<CodebaseCreateInput, CodebaseUncheckedCreateInput>
  }

  /**
   * Codebase createMany
   */
  export type CodebaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Codebases.
     */
    data: CodebaseCreateManyInput | CodebaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Codebase createManyAndReturn
   */
  export type CodebaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Codebases.
     */
    data: CodebaseCreateManyInput | CodebaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Codebase update
   */
  export type CodebaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Codebase.
     */
    data: XOR<CodebaseUpdateInput, CodebaseUncheckedUpdateInput>
    /**
     * Choose, which Codebase to update.
     */
    where: CodebaseWhereUniqueInput
  }

  /**
   * Codebase updateMany
   */
  export type CodebaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Codebases.
     */
    data: XOR<CodebaseUpdateManyMutationInput, CodebaseUncheckedUpdateManyInput>
    /**
     * Filter which Codebases to update
     */
    where?: CodebaseWhereInput
  }

  /**
   * Codebase upsert
   */
  export type CodebaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Codebase to update in case it exists.
     */
    where: CodebaseWhereUniqueInput
    /**
     * In case the Codebase found by the `where` argument doesn't exist, create a new Codebase with this data.
     */
    create: XOR<CodebaseCreateInput, CodebaseUncheckedCreateInput>
    /**
     * In case the Codebase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodebaseUpdateInput, CodebaseUncheckedUpdateInput>
  }

  /**
   * Codebase delete
   */
  export type CodebaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    /**
     * Filter which Codebase to delete.
     */
    where: CodebaseWhereUniqueInput
  }

  /**
   * Codebase deleteMany
   */
  export type CodebaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Codebases to delete
     */
    where?: CodebaseWhereInput
  }

  /**
   * Codebase.files
   */
  export type Codebase$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Codebase.syncJobs
   */
  export type Codebase$syncJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    where?: SyncJobWhereInput
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    cursor?: SyncJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * Codebase.indexHistory
   */
  export type Codebase$indexHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    where?: IndexHistoryWhereInput
    orderBy?: IndexHistoryOrderByWithRelationInput | IndexHistoryOrderByWithRelationInput[]
    cursor?: IndexHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IndexHistoryScalarFieldEnum | IndexHistoryScalarFieldEnum[]
  }

  /**
   * Codebase.codegraphConfig
   */
  export type Codebase$codegraphConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    where?: CodegraphConfigWhereInput
  }

  /**
   * Codebase.vectorEmbeddings
   */
  export type Codebase$vectorEmbeddingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    where?: VectorEmbeddingWhereInput
    orderBy?: VectorEmbeddingOrderByWithRelationInput | VectorEmbeddingOrderByWithRelationInput[]
    cursor?: VectorEmbeddingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VectorEmbeddingScalarFieldEnum | VectorEmbeddingScalarFieldEnum[]
  }

  /**
   * Codebase without action
   */
  export type CodebaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
    lineCount: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
    lineCount: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    path: string | null
    hash: string | null
    size: number | null
    language: string | null
    status: $Enums.FileStatus | null
    lastModified: Date | null
    lineCount: number | null
    storageKey: string | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    path: string | null
    hash: string | null
    size: number | null
    language: string | null
    status: $Enums.FileStatus | null
    lastModified: Date | null
    lineCount: number | null
    storageKey: string | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    path: number
    hash: number
    size: number
    language: number
    status: number
    lastModified: number
    lineCount: number
    storageKey: number
    createdAt: number
    updatedAt: number
    codebaseId: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
    lineCount?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
    lineCount?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    path?: true
    hash?: true
    size?: true
    language?: true
    status?: true
    lastModified?: true
    lineCount?: true
    storageKey?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    path?: true
    hash?: true
    size?: true
    language?: true
    status?: true
    lastModified?: true
    lineCount?: true
    storageKey?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    path?: true
    hash?: true
    size?: true
    language?: true
    status?: true
    lastModified?: true
    lineCount?: true
    storageKey?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    path: string
    hash: string
    size: number
    language: string | null
    status: $Enums.FileStatus
    lastModified: Date | null
    lineCount: number
    storageKey: string | null
    createdAt: Date
    updatedAt: Date
    codebaseId: string
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    hash?: boolean
    size?: boolean
    language?: boolean
    status?: boolean
    lastModified?: boolean
    lineCount?: boolean
    storageKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
    indexHistory?: boolean | File$indexHistoryArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    hash?: boolean
    size?: boolean
    language?: boolean
    status?: boolean
    lastModified?: boolean
    lineCount?: boolean
    storageKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    path?: boolean
    hash?: boolean
    size?: boolean
    language?: boolean
    status?: boolean
    lastModified?: boolean
    lineCount?: boolean
    storageKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
  }

  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
    indexHistory?: boolean | File$indexHistoryArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      codebase: Prisma.$CodebasePayload<ExtArgs>
      indexHistory: Prisma.$IndexHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      path: string
      hash: string
      size: number
      language: string | null
      status: $Enums.FileStatus
      lastModified: Date | null
      lineCount: number
      storageKey: string | null
      createdAt: Date
      updatedAt: Date
      codebaseId: string
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    codebase<T extends CodebaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CodebaseDefaultArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    indexHistory<T extends File$indexHistoryArgs<ExtArgs> = {}>(args?: Subset<T, File$indexHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */ 
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly path: FieldRef<"File", 'String'>
    readonly hash: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly language: FieldRef<"File", 'String'>
    readonly status: FieldRef<"File", 'FileStatus'>
    readonly lastModified: FieldRef<"File", 'DateTime'>
    readonly lineCount: FieldRef<"File", 'Int'>
    readonly storageKey: FieldRef<"File", 'String'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
    readonly codebaseId: FieldRef<"File", 'String'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
  }

  /**
   * File.indexHistory
   */
  export type File$indexHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    where?: IndexHistoryWhereInput
    orderBy?: IndexHistoryOrderByWithRelationInput | IndexHistoryOrderByWithRelationInput[]
    cursor?: IndexHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IndexHistoryScalarFieldEnum | IndexHistoryScalarFieldEnum[]
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model SyncJob
   */

  export type AggregateSyncJob = {
    _count: SyncJobCountAggregateOutputType | null
    _avg: SyncJobAvgAggregateOutputType | null
    _sum: SyncJobSumAggregateOutputType | null
    _min: SyncJobMinAggregateOutputType | null
    _max: SyncJobMaxAggregateOutputType | null
  }

  export type SyncJobAvgAggregateOutputType = {
    priority: number | null
    progress: number | null
  }

  export type SyncJobSumAggregateOutputType = {
    priority: number | null
    progress: number | null
  }

  export type SyncJobMinAggregateOutputType = {
    id: string | null
    type: $Enums.SyncJobType | null
    status: $Enums.SyncJobStatus | null
    priority: number | null
    progress: number | null
    message: string | null
    error: string | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
    userId: string | null
  }

  export type SyncJobMaxAggregateOutputType = {
    id: string | null
    type: $Enums.SyncJobType | null
    status: $Enums.SyncJobStatus | null
    priority: number | null
    progress: number | null
    message: string | null
    error: string | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
    userId: string | null
  }

  export type SyncJobCountAggregateOutputType = {
    id: number
    type: number
    status: number
    priority: number
    progress: number
    message: number
    error: number
    metadata: number
    startedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    codebaseId: number
    userId: number
    _all: number
  }


  export type SyncJobAvgAggregateInputType = {
    priority?: true
    progress?: true
  }

  export type SyncJobSumAggregateInputType = {
    priority?: true
    progress?: true
  }

  export type SyncJobMinAggregateInputType = {
    id?: true
    type?: true
    status?: true
    priority?: true
    progress?: true
    message?: true
    error?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    userId?: true
  }

  export type SyncJobMaxAggregateInputType = {
    id?: true
    type?: true
    status?: true
    priority?: true
    progress?: true
    message?: true
    error?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    userId?: true
  }

  export type SyncJobCountAggregateInputType = {
    id?: true
    type?: true
    status?: true
    priority?: true
    progress?: true
    message?: true
    error?: true
    metadata?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    userId?: true
    _all?: true
  }

  export type SyncJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncJob to aggregate.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SyncJobs
    **/
    _count?: true | SyncJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SyncJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SyncJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SyncJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SyncJobMaxAggregateInputType
  }

  export type GetSyncJobAggregateType<T extends SyncJobAggregateArgs> = {
        [P in keyof T & keyof AggregateSyncJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSyncJob[P]>
      : GetScalarType<T[P], AggregateSyncJob[P]>
  }




  export type SyncJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SyncJobWhereInput
    orderBy?: SyncJobOrderByWithAggregationInput | SyncJobOrderByWithAggregationInput[]
    by: SyncJobScalarFieldEnum[] | SyncJobScalarFieldEnum
    having?: SyncJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SyncJobCountAggregateInputType | true
    _avg?: SyncJobAvgAggregateInputType
    _sum?: SyncJobSumAggregateInputType
    _min?: SyncJobMinAggregateInputType
    _max?: SyncJobMaxAggregateInputType
  }

  export type SyncJobGroupByOutputType = {
    id: string
    type: $Enums.SyncJobType
    status: $Enums.SyncJobStatus
    priority: number
    progress: number
    message: string | null
    error: string | null
    metadata: JsonValue | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    codebaseId: string | null
    userId: string | null
    _count: SyncJobCountAggregateOutputType | null
    _avg: SyncJobAvgAggregateOutputType | null
    _sum: SyncJobSumAggregateOutputType | null
    _min: SyncJobMinAggregateOutputType | null
    _max: SyncJobMaxAggregateOutputType | null
  }

  type GetSyncJobGroupByPayload<T extends SyncJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SyncJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SyncJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SyncJobGroupByOutputType[P]>
            : GetScalarType<T[P], SyncJobGroupByOutputType[P]>
        }
      >
    >


  export type SyncJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    progress?: boolean
    message?: boolean
    error?: boolean
    metadata?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    userId?: boolean
    codebase?: boolean | SyncJob$codebaseArgs<ExtArgs>
    user?: boolean | SyncJob$userArgs<ExtArgs>
    indexHistory?: boolean | SyncJob$indexHistoryArgs<ExtArgs>
    _count?: boolean | SyncJobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["syncJob"]>

  export type SyncJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    progress?: boolean
    message?: boolean
    error?: boolean
    metadata?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    userId?: boolean
    codebase?: boolean | SyncJob$codebaseArgs<ExtArgs>
    user?: boolean | SyncJob$userArgs<ExtArgs>
  }, ExtArgs["result"]["syncJob"]>

  export type SyncJobSelectScalar = {
    id?: boolean
    type?: boolean
    status?: boolean
    priority?: boolean
    progress?: boolean
    message?: boolean
    error?: boolean
    metadata?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    userId?: boolean
  }

  export type SyncJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | SyncJob$codebaseArgs<ExtArgs>
    user?: boolean | SyncJob$userArgs<ExtArgs>
    indexHistory?: boolean | SyncJob$indexHistoryArgs<ExtArgs>
    _count?: boolean | SyncJobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SyncJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | SyncJob$codebaseArgs<ExtArgs>
    user?: boolean | SyncJob$userArgs<ExtArgs>
  }

  export type $SyncJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SyncJob"
    objects: {
      codebase: Prisma.$CodebasePayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
      indexHistory: Prisma.$IndexHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.SyncJobType
      status: $Enums.SyncJobStatus
      priority: number
      progress: number
      message: string | null
      error: string | null
      metadata: Prisma.JsonValue | null
      startedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
      codebaseId: string | null
      userId: string | null
    }, ExtArgs["result"]["syncJob"]>
    composites: {}
  }

  type SyncJobGetPayload<S extends boolean | null | undefined | SyncJobDefaultArgs> = $Result.GetResult<Prisma.$SyncJobPayload, S>

  type SyncJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SyncJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SyncJobCountAggregateInputType | true
    }

  export interface SyncJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SyncJob'], meta: { name: 'SyncJob' } }
    /**
     * Find zero or one SyncJob that matches the filter.
     * @param {SyncJobFindUniqueArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SyncJobFindUniqueArgs>(args: SelectSubset<T, SyncJobFindUniqueArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SyncJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SyncJobFindUniqueOrThrowArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SyncJobFindUniqueOrThrowArgs>(args: SelectSubset<T, SyncJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SyncJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindFirstArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SyncJobFindFirstArgs>(args?: SelectSubset<T, SyncJobFindFirstArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SyncJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindFirstOrThrowArgs} args - Arguments to find a SyncJob
     * @example
     * // Get one SyncJob
     * const syncJob = await prisma.syncJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SyncJobFindFirstOrThrowArgs>(args?: SelectSubset<T, SyncJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SyncJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SyncJobs
     * const syncJobs = await prisma.syncJob.findMany()
     * 
     * // Get first 10 SyncJobs
     * const syncJobs = await prisma.syncJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const syncJobWithIdOnly = await prisma.syncJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SyncJobFindManyArgs>(args?: SelectSubset<T, SyncJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SyncJob.
     * @param {SyncJobCreateArgs} args - Arguments to create a SyncJob.
     * @example
     * // Create one SyncJob
     * const SyncJob = await prisma.syncJob.create({
     *   data: {
     *     // ... data to create a SyncJob
     *   }
     * })
     * 
     */
    create<T extends SyncJobCreateArgs>(args: SelectSubset<T, SyncJobCreateArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SyncJobs.
     * @param {SyncJobCreateManyArgs} args - Arguments to create many SyncJobs.
     * @example
     * // Create many SyncJobs
     * const syncJob = await prisma.syncJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SyncJobCreateManyArgs>(args?: SelectSubset<T, SyncJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SyncJobs and returns the data saved in the database.
     * @param {SyncJobCreateManyAndReturnArgs} args - Arguments to create many SyncJobs.
     * @example
     * // Create many SyncJobs
     * const syncJob = await prisma.syncJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SyncJobs and only return the `id`
     * const syncJobWithIdOnly = await prisma.syncJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SyncJobCreateManyAndReturnArgs>(args?: SelectSubset<T, SyncJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SyncJob.
     * @param {SyncJobDeleteArgs} args - Arguments to delete one SyncJob.
     * @example
     * // Delete one SyncJob
     * const SyncJob = await prisma.syncJob.delete({
     *   where: {
     *     // ... filter to delete one SyncJob
     *   }
     * })
     * 
     */
    delete<T extends SyncJobDeleteArgs>(args: SelectSubset<T, SyncJobDeleteArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SyncJob.
     * @param {SyncJobUpdateArgs} args - Arguments to update one SyncJob.
     * @example
     * // Update one SyncJob
     * const syncJob = await prisma.syncJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SyncJobUpdateArgs>(args: SelectSubset<T, SyncJobUpdateArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SyncJobs.
     * @param {SyncJobDeleteManyArgs} args - Arguments to filter SyncJobs to delete.
     * @example
     * // Delete a few SyncJobs
     * const { count } = await prisma.syncJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SyncJobDeleteManyArgs>(args?: SelectSubset<T, SyncJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SyncJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SyncJobs
     * const syncJob = await prisma.syncJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SyncJobUpdateManyArgs>(args: SelectSubset<T, SyncJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SyncJob.
     * @param {SyncJobUpsertArgs} args - Arguments to update or create a SyncJob.
     * @example
     * // Update or create a SyncJob
     * const syncJob = await prisma.syncJob.upsert({
     *   create: {
     *     // ... data to create a SyncJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SyncJob we want to update
     *   }
     * })
     */
    upsert<T extends SyncJobUpsertArgs>(args: SelectSubset<T, SyncJobUpsertArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SyncJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobCountArgs} args - Arguments to filter SyncJobs to count.
     * @example
     * // Count the number of SyncJobs
     * const count = await prisma.syncJob.count({
     *   where: {
     *     // ... the filter for the SyncJobs we want to count
     *   }
     * })
    **/
    count<T extends SyncJobCountArgs>(
      args?: Subset<T, SyncJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SyncJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SyncJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SyncJobAggregateArgs>(args: Subset<T, SyncJobAggregateArgs>): Prisma.PrismaPromise<GetSyncJobAggregateType<T>>

    /**
     * Group by SyncJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SyncJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SyncJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SyncJobGroupByArgs['orderBy'] }
        : { orderBy?: SyncJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SyncJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSyncJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SyncJob model
   */
  readonly fields: SyncJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SyncJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SyncJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    codebase<T extends SyncJob$codebaseArgs<ExtArgs> = {}>(args?: Subset<T, SyncJob$codebaseArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends SyncJob$userArgs<ExtArgs> = {}>(args?: Subset<T, SyncJob$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    indexHistory<T extends SyncJob$indexHistoryArgs<ExtArgs> = {}>(args?: Subset<T, SyncJob$indexHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SyncJob model
   */ 
  interface SyncJobFieldRefs {
    readonly id: FieldRef<"SyncJob", 'String'>
    readonly type: FieldRef<"SyncJob", 'SyncJobType'>
    readonly status: FieldRef<"SyncJob", 'SyncJobStatus'>
    readonly priority: FieldRef<"SyncJob", 'Int'>
    readonly progress: FieldRef<"SyncJob", 'Int'>
    readonly message: FieldRef<"SyncJob", 'String'>
    readonly error: FieldRef<"SyncJob", 'String'>
    readonly metadata: FieldRef<"SyncJob", 'Json'>
    readonly startedAt: FieldRef<"SyncJob", 'DateTime'>
    readonly completedAt: FieldRef<"SyncJob", 'DateTime'>
    readonly createdAt: FieldRef<"SyncJob", 'DateTime'>
    readonly updatedAt: FieldRef<"SyncJob", 'DateTime'>
    readonly codebaseId: FieldRef<"SyncJob", 'String'>
    readonly userId: FieldRef<"SyncJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SyncJob findUnique
   */
  export type SyncJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob findUniqueOrThrow
   */
  export type SyncJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob findFirst
   */
  export type SyncJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncJobs.
     */
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob findFirstOrThrow
   */
  export type SyncJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJob to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SyncJobs.
     */
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob findMany
   */
  export type SyncJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter, which SyncJobs to fetch.
     */
    where?: SyncJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SyncJobs to fetch.
     */
    orderBy?: SyncJobOrderByWithRelationInput | SyncJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SyncJobs.
     */
    cursor?: SyncJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SyncJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SyncJobs.
     */
    skip?: number
    distinct?: SyncJobScalarFieldEnum | SyncJobScalarFieldEnum[]
  }

  /**
   * SyncJob create
   */
  export type SyncJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * The data needed to create a SyncJob.
     */
    data: XOR<SyncJobCreateInput, SyncJobUncheckedCreateInput>
  }

  /**
   * SyncJob createMany
   */
  export type SyncJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SyncJobs.
     */
    data: SyncJobCreateManyInput | SyncJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SyncJob createManyAndReturn
   */
  export type SyncJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SyncJobs.
     */
    data: SyncJobCreateManyInput | SyncJobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SyncJob update
   */
  export type SyncJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * The data needed to update a SyncJob.
     */
    data: XOR<SyncJobUpdateInput, SyncJobUncheckedUpdateInput>
    /**
     * Choose, which SyncJob to update.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob updateMany
   */
  export type SyncJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SyncJobs.
     */
    data: XOR<SyncJobUpdateManyMutationInput, SyncJobUncheckedUpdateManyInput>
    /**
     * Filter which SyncJobs to update
     */
    where?: SyncJobWhereInput
  }

  /**
   * SyncJob upsert
   */
  export type SyncJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * The filter to search for the SyncJob to update in case it exists.
     */
    where: SyncJobWhereUniqueInput
    /**
     * In case the SyncJob found by the `where` argument doesn't exist, create a new SyncJob with this data.
     */
    create: XOR<SyncJobCreateInput, SyncJobUncheckedCreateInput>
    /**
     * In case the SyncJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SyncJobUpdateInput, SyncJobUncheckedUpdateInput>
  }

  /**
   * SyncJob delete
   */
  export type SyncJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    /**
     * Filter which SyncJob to delete.
     */
    where: SyncJobWhereUniqueInput
  }

  /**
   * SyncJob deleteMany
   */
  export type SyncJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SyncJobs to delete
     */
    where?: SyncJobWhereInput
  }

  /**
   * SyncJob.codebase
   */
  export type SyncJob$codebaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Codebase
     */
    select?: CodebaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodebaseInclude<ExtArgs> | null
    where?: CodebaseWhereInput
  }

  /**
   * SyncJob.user
   */
  export type SyncJob$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SyncJob.indexHistory
   */
  export type SyncJob$indexHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    where?: IndexHistoryWhereInput
    orderBy?: IndexHistoryOrderByWithRelationInput | IndexHistoryOrderByWithRelationInput[]
    cursor?: IndexHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IndexHistoryScalarFieldEnum | IndexHistoryScalarFieldEnum[]
  }

  /**
   * SyncJob without action
   */
  export type SyncJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
  }


  /**
   * Model IndexHistory
   */

  export type AggregateIndexHistory = {
    _count: IndexHistoryCountAggregateOutputType | null
    _avg: IndexHistoryAvgAggregateOutputType | null
    _sum: IndexHistorySumAggregateOutputType | null
    _min: IndexHistoryMinAggregateOutputType | null
    _max: IndexHistoryMaxAggregateOutputType | null
  }

  export type IndexHistoryAvgAggregateOutputType = {
    totalFiles: number | null
    processedFiles: number | null
    failedFiles: number | null
    ignoredFiles: number | null
    durationMs: number | null
  }

  export type IndexHistorySumAggregateOutputType = {
    totalFiles: number | null
    processedFiles: number | null
    failedFiles: number | null
    ignoredFiles: number | null
    durationMs: number | null
  }

  export type IndexHistoryMinAggregateOutputType = {
    id: string | null
    taskType: $Enums.IndexTaskType | null
    status: $Enums.IndexTaskStatus | null
    totalFiles: number | null
    processedFiles: number | null
    failedFiles: number | null
    ignoredFiles: number | null
    startTime: Date | null
    endTime: Date | null
    durationMs: number | null
    errorMessage: string | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
    syncJobId: string | null
    fileId: string | null
  }

  export type IndexHistoryMaxAggregateOutputType = {
    id: string | null
    taskType: $Enums.IndexTaskType | null
    status: $Enums.IndexTaskStatus | null
    totalFiles: number | null
    processedFiles: number | null
    failedFiles: number | null
    ignoredFiles: number | null
    startTime: Date | null
    endTime: Date | null
    durationMs: number | null
    errorMessage: string | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
    syncJobId: string | null
    fileId: string | null
  }

  export type IndexHistoryCountAggregateOutputType = {
    id: number
    taskType: number
    status: number
    totalFiles: number
    processedFiles: number
    failedFiles: number
    ignoredFiles: number
    startTime: number
    endTime: number
    durationMs: number
    errorMessage: number
    metadata: number
    createdAt: number
    updatedAt: number
    codebaseId: number
    syncJobId: number
    fileId: number
    _all: number
  }


  export type IndexHistoryAvgAggregateInputType = {
    totalFiles?: true
    processedFiles?: true
    failedFiles?: true
    ignoredFiles?: true
    durationMs?: true
  }

  export type IndexHistorySumAggregateInputType = {
    totalFiles?: true
    processedFiles?: true
    failedFiles?: true
    ignoredFiles?: true
    durationMs?: true
  }

  export type IndexHistoryMinAggregateInputType = {
    id?: true
    taskType?: true
    status?: true
    totalFiles?: true
    processedFiles?: true
    failedFiles?: true
    ignoredFiles?: true
    startTime?: true
    endTime?: true
    durationMs?: true
    errorMessage?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    syncJobId?: true
    fileId?: true
  }

  export type IndexHistoryMaxAggregateInputType = {
    id?: true
    taskType?: true
    status?: true
    totalFiles?: true
    processedFiles?: true
    failedFiles?: true
    ignoredFiles?: true
    startTime?: true
    endTime?: true
    durationMs?: true
    errorMessage?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    syncJobId?: true
    fileId?: true
  }

  export type IndexHistoryCountAggregateInputType = {
    id?: true
    taskType?: true
    status?: true
    totalFiles?: true
    processedFiles?: true
    failedFiles?: true
    ignoredFiles?: true
    startTime?: true
    endTime?: true
    durationMs?: true
    errorMessage?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    syncJobId?: true
    fileId?: true
    _all?: true
  }

  export type IndexHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IndexHistory to aggregate.
     */
    where?: IndexHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndexHistories to fetch.
     */
    orderBy?: IndexHistoryOrderByWithRelationInput | IndexHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IndexHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndexHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndexHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IndexHistories
    **/
    _count?: true | IndexHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IndexHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IndexHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IndexHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IndexHistoryMaxAggregateInputType
  }

  export type GetIndexHistoryAggregateType<T extends IndexHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateIndexHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIndexHistory[P]>
      : GetScalarType<T[P], AggregateIndexHistory[P]>
  }




  export type IndexHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndexHistoryWhereInput
    orderBy?: IndexHistoryOrderByWithAggregationInput | IndexHistoryOrderByWithAggregationInput[]
    by: IndexHistoryScalarFieldEnum[] | IndexHistoryScalarFieldEnum
    having?: IndexHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IndexHistoryCountAggregateInputType | true
    _avg?: IndexHistoryAvgAggregateInputType
    _sum?: IndexHistorySumAggregateInputType
    _min?: IndexHistoryMinAggregateInputType
    _max?: IndexHistoryMaxAggregateInputType
  }

  export type IndexHistoryGroupByOutputType = {
    id: string
    taskType: $Enums.IndexTaskType
    status: $Enums.IndexTaskStatus
    totalFiles: number
    processedFiles: number
    failedFiles: number
    ignoredFiles: number
    startTime: Date | null
    endTime: Date | null
    durationMs: number | null
    errorMessage: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    codebaseId: string
    syncJobId: string | null
    fileId: string | null
    _count: IndexHistoryCountAggregateOutputType | null
    _avg: IndexHistoryAvgAggregateOutputType | null
    _sum: IndexHistorySumAggregateOutputType | null
    _min: IndexHistoryMinAggregateOutputType | null
    _max: IndexHistoryMaxAggregateOutputType | null
  }

  type GetIndexHistoryGroupByPayload<T extends IndexHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IndexHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IndexHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IndexHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], IndexHistoryGroupByOutputType[P]>
        }
      >
    >


  export type IndexHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskType?: boolean
    status?: boolean
    totalFiles?: boolean
    processedFiles?: boolean
    failedFiles?: boolean
    ignoredFiles?: boolean
    startTime?: boolean
    endTime?: boolean
    durationMs?: boolean
    errorMessage?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    syncJobId?: boolean
    fileId?: boolean
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
    syncJob?: boolean | IndexHistory$syncJobArgs<ExtArgs>
    file?: boolean | IndexHistory$fileArgs<ExtArgs>
  }, ExtArgs["result"]["indexHistory"]>

  export type IndexHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskType?: boolean
    status?: boolean
    totalFiles?: boolean
    processedFiles?: boolean
    failedFiles?: boolean
    ignoredFiles?: boolean
    startTime?: boolean
    endTime?: boolean
    durationMs?: boolean
    errorMessage?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    syncJobId?: boolean
    fileId?: boolean
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
    syncJob?: boolean | IndexHistory$syncJobArgs<ExtArgs>
    file?: boolean | IndexHistory$fileArgs<ExtArgs>
  }, ExtArgs["result"]["indexHistory"]>

  export type IndexHistorySelectScalar = {
    id?: boolean
    taskType?: boolean
    status?: boolean
    totalFiles?: boolean
    processedFiles?: boolean
    failedFiles?: boolean
    ignoredFiles?: boolean
    startTime?: boolean
    endTime?: boolean
    durationMs?: boolean
    errorMessage?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    syncJobId?: boolean
    fileId?: boolean
  }

  export type IndexHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
    syncJob?: boolean | IndexHistory$syncJobArgs<ExtArgs>
    file?: boolean | IndexHistory$fileArgs<ExtArgs>
  }
  export type IndexHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
    syncJob?: boolean | IndexHistory$syncJobArgs<ExtArgs>
    file?: boolean | IndexHistory$fileArgs<ExtArgs>
  }

  export type $IndexHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IndexHistory"
    objects: {
      codebase: Prisma.$CodebasePayload<ExtArgs>
      syncJob: Prisma.$SyncJobPayload<ExtArgs> | null
      file: Prisma.$FilePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      taskType: $Enums.IndexTaskType
      status: $Enums.IndexTaskStatus
      totalFiles: number
      processedFiles: number
      failedFiles: number
      ignoredFiles: number
      startTime: Date | null
      endTime: Date | null
      durationMs: number | null
      errorMessage: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      codebaseId: string
      syncJobId: string | null
      fileId: string | null
    }, ExtArgs["result"]["indexHistory"]>
    composites: {}
  }

  type IndexHistoryGetPayload<S extends boolean | null | undefined | IndexHistoryDefaultArgs> = $Result.GetResult<Prisma.$IndexHistoryPayload, S>

  type IndexHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IndexHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IndexHistoryCountAggregateInputType | true
    }

  export interface IndexHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IndexHistory'], meta: { name: 'IndexHistory' } }
    /**
     * Find zero or one IndexHistory that matches the filter.
     * @param {IndexHistoryFindUniqueArgs} args - Arguments to find a IndexHistory
     * @example
     * // Get one IndexHistory
     * const indexHistory = await prisma.indexHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IndexHistoryFindUniqueArgs>(args: SelectSubset<T, IndexHistoryFindUniqueArgs<ExtArgs>>): Prisma__IndexHistoryClient<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IndexHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IndexHistoryFindUniqueOrThrowArgs} args - Arguments to find a IndexHistory
     * @example
     * // Get one IndexHistory
     * const indexHistory = await prisma.indexHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IndexHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, IndexHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IndexHistoryClient<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IndexHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndexHistoryFindFirstArgs} args - Arguments to find a IndexHistory
     * @example
     * // Get one IndexHistory
     * const indexHistory = await prisma.indexHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IndexHistoryFindFirstArgs>(args?: SelectSubset<T, IndexHistoryFindFirstArgs<ExtArgs>>): Prisma__IndexHistoryClient<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IndexHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndexHistoryFindFirstOrThrowArgs} args - Arguments to find a IndexHistory
     * @example
     * // Get one IndexHistory
     * const indexHistory = await prisma.indexHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IndexHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, IndexHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__IndexHistoryClient<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IndexHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndexHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IndexHistories
     * const indexHistories = await prisma.indexHistory.findMany()
     * 
     * // Get first 10 IndexHistories
     * const indexHistories = await prisma.indexHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const indexHistoryWithIdOnly = await prisma.indexHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IndexHistoryFindManyArgs>(args?: SelectSubset<T, IndexHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IndexHistory.
     * @param {IndexHistoryCreateArgs} args - Arguments to create a IndexHistory.
     * @example
     * // Create one IndexHistory
     * const IndexHistory = await prisma.indexHistory.create({
     *   data: {
     *     // ... data to create a IndexHistory
     *   }
     * })
     * 
     */
    create<T extends IndexHistoryCreateArgs>(args: SelectSubset<T, IndexHistoryCreateArgs<ExtArgs>>): Prisma__IndexHistoryClient<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IndexHistories.
     * @param {IndexHistoryCreateManyArgs} args - Arguments to create many IndexHistories.
     * @example
     * // Create many IndexHistories
     * const indexHistory = await prisma.indexHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IndexHistoryCreateManyArgs>(args?: SelectSubset<T, IndexHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IndexHistories and returns the data saved in the database.
     * @param {IndexHistoryCreateManyAndReturnArgs} args - Arguments to create many IndexHistories.
     * @example
     * // Create many IndexHistories
     * const indexHistory = await prisma.indexHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IndexHistories and only return the `id`
     * const indexHistoryWithIdOnly = await prisma.indexHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IndexHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, IndexHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IndexHistory.
     * @param {IndexHistoryDeleteArgs} args - Arguments to delete one IndexHistory.
     * @example
     * // Delete one IndexHistory
     * const IndexHistory = await prisma.indexHistory.delete({
     *   where: {
     *     // ... filter to delete one IndexHistory
     *   }
     * })
     * 
     */
    delete<T extends IndexHistoryDeleteArgs>(args: SelectSubset<T, IndexHistoryDeleteArgs<ExtArgs>>): Prisma__IndexHistoryClient<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IndexHistory.
     * @param {IndexHistoryUpdateArgs} args - Arguments to update one IndexHistory.
     * @example
     * // Update one IndexHistory
     * const indexHistory = await prisma.indexHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IndexHistoryUpdateArgs>(args: SelectSubset<T, IndexHistoryUpdateArgs<ExtArgs>>): Prisma__IndexHistoryClient<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IndexHistories.
     * @param {IndexHistoryDeleteManyArgs} args - Arguments to filter IndexHistories to delete.
     * @example
     * // Delete a few IndexHistories
     * const { count } = await prisma.indexHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IndexHistoryDeleteManyArgs>(args?: SelectSubset<T, IndexHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IndexHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndexHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IndexHistories
     * const indexHistory = await prisma.indexHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IndexHistoryUpdateManyArgs>(args: SelectSubset<T, IndexHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IndexHistory.
     * @param {IndexHistoryUpsertArgs} args - Arguments to update or create a IndexHistory.
     * @example
     * // Update or create a IndexHistory
     * const indexHistory = await prisma.indexHistory.upsert({
     *   create: {
     *     // ... data to create a IndexHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IndexHistory we want to update
     *   }
     * })
     */
    upsert<T extends IndexHistoryUpsertArgs>(args: SelectSubset<T, IndexHistoryUpsertArgs<ExtArgs>>): Prisma__IndexHistoryClient<$Result.GetResult<Prisma.$IndexHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IndexHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndexHistoryCountArgs} args - Arguments to filter IndexHistories to count.
     * @example
     * // Count the number of IndexHistories
     * const count = await prisma.indexHistory.count({
     *   where: {
     *     // ... the filter for the IndexHistories we want to count
     *   }
     * })
    **/
    count<T extends IndexHistoryCountArgs>(
      args?: Subset<T, IndexHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IndexHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IndexHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndexHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IndexHistoryAggregateArgs>(args: Subset<T, IndexHistoryAggregateArgs>): Prisma.PrismaPromise<GetIndexHistoryAggregateType<T>>

    /**
     * Group by IndexHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndexHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IndexHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IndexHistoryGroupByArgs['orderBy'] }
        : { orderBy?: IndexHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IndexHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIndexHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IndexHistory model
   */
  readonly fields: IndexHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IndexHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IndexHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    codebase<T extends CodebaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CodebaseDefaultArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    syncJob<T extends IndexHistory$syncJobArgs<ExtArgs> = {}>(args?: Subset<T, IndexHistory$syncJobArgs<ExtArgs>>): Prisma__SyncJobClient<$Result.GetResult<Prisma.$SyncJobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    file<T extends IndexHistory$fileArgs<ExtArgs> = {}>(args?: Subset<T, IndexHistory$fileArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IndexHistory model
   */ 
  interface IndexHistoryFieldRefs {
    readonly id: FieldRef<"IndexHistory", 'String'>
    readonly taskType: FieldRef<"IndexHistory", 'IndexTaskType'>
    readonly status: FieldRef<"IndexHistory", 'IndexTaskStatus'>
    readonly totalFiles: FieldRef<"IndexHistory", 'Int'>
    readonly processedFiles: FieldRef<"IndexHistory", 'Int'>
    readonly failedFiles: FieldRef<"IndexHistory", 'Int'>
    readonly ignoredFiles: FieldRef<"IndexHistory", 'Int'>
    readonly startTime: FieldRef<"IndexHistory", 'DateTime'>
    readonly endTime: FieldRef<"IndexHistory", 'DateTime'>
    readonly durationMs: FieldRef<"IndexHistory", 'Int'>
    readonly errorMessage: FieldRef<"IndexHistory", 'String'>
    readonly metadata: FieldRef<"IndexHistory", 'Json'>
    readonly createdAt: FieldRef<"IndexHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"IndexHistory", 'DateTime'>
    readonly codebaseId: FieldRef<"IndexHistory", 'String'>
    readonly syncJobId: FieldRef<"IndexHistory", 'String'>
    readonly fileId: FieldRef<"IndexHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * IndexHistory findUnique
   */
  export type IndexHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * Filter, which IndexHistory to fetch.
     */
    where: IndexHistoryWhereUniqueInput
  }

  /**
   * IndexHistory findUniqueOrThrow
   */
  export type IndexHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * Filter, which IndexHistory to fetch.
     */
    where: IndexHistoryWhereUniqueInput
  }

  /**
   * IndexHistory findFirst
   */
  export type IndexHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * Filter, which IndexHistory to fetch.
     */
    where?: IndexHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndexHistories to fetch.
     */
    orderBy?: IndexHistoryOrderByWithRelationInput | IndexHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IndexHistories.
     */
    cursor?: IndexHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndexHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndexHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IndexHistories.
     */
    distinct?: IndexHistoryScalarFieldEnum | IndexHistoryScalarFieldEnum[]
  }

  /**
   * IndexHistory findFirstOrThrow
   */
  export type IndexHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * Filter, which IndexHistory to fetch.
     */
    where?: IndexHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndexHistories to fetch.
     */
    orderBy?: IndexHistoryOrderByWithRelationInput | IndexHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IndexHistories.
     */
    cursor?: IndexHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndexHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndexHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IndexHistories.
     */
    distinct?: IndexHistoryScalarFieldEnum | IndexHistoryScalarFieldEnum[]
  }

  /**
   * IndexHistory findMany
   */
  export type IndexHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * Filter, which IndexHistories to fetch.
     */
    where?: IndexHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IndexHistories to fetch.
     */
    orderBy?: IndexHistoryOrderByWithRelationInput | IndexHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IndexHistories.
     */
    cursor?: IndexHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IndexHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IndexHistories.
     */
    skip?: number
    distinct?: IndexHistoryScalarFieldEnum | IndexHistoryScalarFieldEnum[]
  }

  /**
   * IndexHistory create
   */
  export type IndexHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a IndexHistory.
     */
    data: XOR<IndexHistoryCreateInput, IndexHistoryUncheckedCreateInput>
  }

  /**
   * IndexHistory createMany
   */
  export type IndexHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IndexHistories.
     */
    data: IndexHistoryCreateManyInput | IndexHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IndexHistory createManyAndReturn
   */
  export type IndexHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IndexHistories.
     */
    data: IndexHistoryCreateManyInput | IndexHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IndexHistory update
   */
  export type IndexHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a IndexHistory.
     */
    data: XOR<IndexHistoryUpdateInput, IndexHistoryUncheckedUpdateInput>
    /**
     * Choose, which IndexHistory to update.
     */
    where: IndexHistoryWhereUniqueInput
  }

  /**
   * IndexHistory updateMany
   */
  export type IndexHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IndexHistories.
     */
    data: XOR<IndexHistoryUpdateManyMutationInput, IndexHistoryUncheckedUpdateManyInput>
    /**
     * Filter which IndexHistories to update
     */
    where?: IndexHistoryWhereInput
  }

  /**
   * IndexHistory upsert
   */
  export type IndexHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the IndexHistory to update in case it exists.
     */
    where: IndexHistoryWhereUniqueInput
    /**
     * In case the IndexHistory found by the `where` argument doesn't exist, create a new IndexHistory with this data.
     */
    create: XOR<IndexHistoryCreateInput, IndexHistoryUncheckedCreateInput>
    /**
     * In case the IndexHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IndexHistoryUpdateInput, IndexHistoryUncheckedUpdateInput>
  }

  /**
   * IndexHistory delete
   */
  export type IndexHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
    /**
     * Filter which IndexHistory to delete.
     */
    where: IndexHistoryWhereUniqueInput
  }

  /**
   * IndexHistory deleteMany
   */
  export type IndexHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IndexHistories to delete
     */
    where?: IndexHistoryWhereInput
  }

  /**
   * IndexHistory.syncJob
   */
  export type IndexHistory$syncJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SyncJob
     */
    select?: SyncJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SyncJobInclude<ExtArgs> | null
    where?: SyncJobWhereInput
  }

  /**
   * IndexHistory.file
   */
  export type IndexHistory$fileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * IndexHistory without action
   */
  export type IndexHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndexHistory
     */
    select?: IndexHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndexHistoryInclude<ExtArgs> | null
  }


  /**
   * Model CodegraphConfig
   */

  export type AggregateCodegraphConfig = {
    _count: CodegraphConfigCountAggregateOutputType | null
    _avg: CodegraphConfigAvgAggregateOutputType | null
    _sum: CodegraphConfigSumAggregateOutputType | null
    _min: CodegraphConfigMinAggregateOutputType | null
    _max: CodegraphConfigMaxAggregateOutputType | null
  }

  export type CodegraphConfigAvgAggregateOutputType = {
    maxConcurrency: number | null
    scipTimeout: number | null
    parseTimeout: number | null
    chunkSize: number | null
    chunkOverlap: number | null
    maxTokens: number | null
  }

  export type CodegraphConfigSumAggregateOutputType = {
    maxConcurrency: number | null
    scipTimeout: number | null
    parseTimeout: number | null
    chunkSize: number | null
    chunkOverlap: number | null
    maxTokens: number | null
  }

  export type CodegraphConfigMinAggregateOutputType = {
    id: string | null
    scipEnabled: boolean | null
    treeSitterEnabled: boolean | null
    embeddingEnabled: boolean | null
    maxConcurrency: number | null
    scipTimeout: number | null
    parseTimeout: number | null
    chunkSize: number | null
    chunkOverlap: number | null
    maxTokens: number | null
    badgerDbPath: string | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
  }

  export type CodegraphConfigMaxAggregateOutputType = {
    id: string | null
    scipEnabled: boolean | null
    treeSitterEnabled: boolean | null
    embeddingEnabled: boolean | null
    maxConcurrency: number | null
    scipTimeout: number | null
    parseTimeout: number | null
    chunkSize: number | null
    chunkOverlap: number | null
    maxTokens: number | null
    badgerDbPath: string | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
  }

  export type CodegraphConfigCountAggregateOutputType = {
    id: number
    scipEnabled: number
    treeSitterEnabled: number
    embeddingEnabled: number
    maxConcurrency: number
    scipTimeout: number
    parseTimeout: number
    chunkSize: number
    chunkOverlap: number
    maxTokens: number
    badgerDbPath: number
    scipToolsPath: number
    languageConfig: number
    createdAt: number
    updatedAt: number
    codebaseId: number
    _all: number
  }


  export type CodegraphConfigAvgAggregateInputType = {
    maxConcurrency?: true
    scipTimeout?: true
    parseTimeout?: true
    chunkSize?: true
    chunkOverlap?: true
    maxTokens?: true
  }

  export type CodegraphConfigSumAggregateInputType = {
    maxConcurrency?: true
    scipTimeout?: true
    parseTimeout?: true
    chunkSize?: true
    chunkOverlap?: true
    maxTokens?: true
  }

  export type CodegraphConfigMinAggregateInputType = {
    id?: true
    scipEnabled?: true
    treeSitterEnabled?: true
    embeddingEnabled?: true
    maxConcurrency?: true
    scipTimeout?: true
    parseTimeout?: true
    chunkSize?: true
    chunkOverlap?: true
    maxTokens?: true
    badgerDbPath?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
  }

  export type CodegraphConfigMaxAggregateInputType = {
    id?: true
    scipEnabled?: true
    treeSitterEnabled?: true
    embeddingEnabled?: true
    maxConcurrency?: true
    scipTimeout?: true
    parseTimeout?: true
    chunkSize?: true
    chunkOverlap?: true
    maxTokens?: true
    badgerDbPath?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
  }

  export type CodegraphConfigCountAggregateInputType = {
    id?: true
    scipEnabled?: true
    treeSitterEnabled?: true
    embeddingEnabled?: true
    maxConcurrency?: true
    scipTimeout?: true
    parseTimeout?: true
    chunkSize?: true
    chunkOverlap?: true
    maxTokens?: true
    badgerDbPath?: true
    scipToolsPath?: true
    languageConfig?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    _all?: true
  }

  export type CodegraphConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodegraphConfig to aggregate.
     */
    where?: CodegraphConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodegraphConfigs to fetch.
     */
    orderBy?: CodegraphConfigOrderByWithRelationInput | CodegraphConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodegraphConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodegraphConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodegraphConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CodegraphConfigs
    **/
    _count?: true | CodegraphConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CodegraphConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CodegraphConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodegraphConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodegraphConfigMaxAggregateInputType
  }

  export type GetCodegraphConfigAggregateType<T extends CodegraphConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateCodegraphConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCodegraphConfig[P]>
      : GetScalarType<T[P], AggregateCodegraphConfig[P]>
  }




  export type CodegraphConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodegraphConfigWhereInput
    orderBy?: CodegraphConfigOrderByWithAggregationInput | CodegraphConfigOrderByWithAggregationInput[]
    by: CodegraphConfigScalarFieldEnum[] | CodegraphConfigScalarFieldEnum
    having?: CodegraphConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodegraphConfigCountAggregateInputType | true
    _avg?: CodegraphConfigAvgAggregateInputType
    _sum?: CodegraphConfigSumAggregateInputType
    _min?: CodegraphConfigMinAggregateInputType
    _max?: CodegraphConfigMaxAggregateInputType
  }

  export type CodegraphConfigGroupByOutputType = {
    id: string
    scipEnabled: boolean
    treeSitterEnabled: boolean
    embeddingEnabled: boolean
    maxConcurrency: number
    scipTimeout: number
    parseTimeout: number
    chunkSize: number
    chunkOverlap: number
    maxTokens: number
    badgerDbPath: string | null
    scipToolsPath: JsonValue | null
    languageConfig: JsonValue | null
    createdAt: Date
    updatedAt: Date
    codebaseId: string
    _count: CodegraphConfigCountAggregateOutputType | null
    _avg: CodegraphConfigAvgAggregateOutputType | null
    _sum: CodegraphConfigSumAggregateOutputType | null
    _min: CodegraphConfigMinAggregateOutputType | null
    _max: CodegraphConfigMaxAggregateOutputType | null
  }

  type GetCodegraphConfigGroupByPayload<T extends CodegraphConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodegraphConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodegraphConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodegraphConfigGroupByOutputType[P]>
            : GetScalarType<T[P], CodegraphConfigGroupByOutputType[P]>
        }
      >
    >


  export type CodegraphConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scipEnabled?: boolean
    treeSitterEnabled?: boolean
    embeddingEnabled?: boolean
    maxConcurrency?: boolean
    scipTimeout?: boolean
    parseTimeout?: boolean
    chunkSize?: boolean
    chunkOverlap?: boolean
    maxTokens?: boolean
    badgerDbPath?: boolean
    scipToolsPath?: boolean
    languageConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["codegraphConfig"]>

  export type CodegraphConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scipEnabled?: boolean
    treeSitterEnabled?: boolean
    embeddingEnabled?: boolean
    maxConcurrency?: boolean
    scipTimeout?: boolean
    parseTimeout?: boolean
    chunkSize?: boolean
    chunkOverlap?: boolean
    maxTokens?: boolean
    badgerDbPath?: boolean
    scipToolsPath?: boolean
    languageConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["codegraphConfig"]>

  export type CodegraphConfigSelectScalar = {
    id?: boolean
    scipEnabled?: boolean
    treeSitterEnabled?: boolean
    embeddingEnabled?: boolean
    maxConcurrency?: boolean
    scipTimeout?: boolean
    parseTimeout?: boolean
    chunkSize?: boolean
    chunkOverlap?: boolean
    maxTokens?: boolean
    badgerDbPath?: boolean
    scipToolsPath?: boolean
    languageConfig?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
  }

  export type CodegraphConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }
  export type CodegraphConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }

  export type $CodegraphConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CodegraphConfig"
    objects: {
      codebase: Prisma.$CodebasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      scipEnabled: boolean
      treeSitterEnabled: boolean
      embeddingEnabled: boolean
      maxConcurrency: number
      scipTimeout: number
      parseTimeout: number
      chunkSize: number
      chunkOverlap: number
      maxTokens: number
      badgerDbPath: string | null
      scipToolsPath: Prisma.JsonValue | null
      languageConfig: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      codebaseId: string
    }, ExtArgs["result"]["codegraphConfig"]>
    composites: {}
  }

  type CodegraphConfigGetPayload<S extends boolean | null | undefined | CodegraphConfigDefaultArgs> = $Result.GetResult<Prisma.$CodegraphConfigPayload, S>

  type CodegraphConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CodegraphConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CodegraphConfigCountAggregateInputType | true
    }

  export interface CodegraphConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CodegraphConfig'], meta: { name: 'CodegraphConfig' } }
    /**
     * Find zero or one CodegraphConfig that matches the filter.
     * @param {CodegraphConfigFindUniqueArgs} args - Arguments to find a CodegraphConfig
     * @example
     * // Get one CodegraphConfig
     * const codegraphConfig = await prisma.codegraphConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CodegraphConfigFindUniqueArgs>(args: SelectSubset<T, CodegraphConfigFindUniqueArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CodegraphConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CodegraphConfigFindUniqueOrThrowArgs} args - Arguments to find a CodegraphConfig
     * @example
     * // Get one CodegraphConfig
     * const codegraphConfig = await prisma.codegraphConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CodegraphConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, CodegraphConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CodegraphConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodegraphConfigFindFirstArgs} args - Arguments to find a CodegraphConfig
     * @example
     * // Get one CodegraphConfig
     * const codegraphConfig = await prisma.codegraphConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CodegraphConfigFindFirstArgs>(args?: SelectSubset<T, CodegraphConfigFindFirstArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CodegraphConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodegraphConfigFindFirstOrThrowArgs} args - Arguments to find a CodegraphConfig
     * @example
     * // Get one CodegraphConfig
     * const codegraphConfig = await prisma.codegraphConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CodegraphConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, CodegraphConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CodegraphConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodegraphConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CodegraphConfigs
     * const codegraphConfigs = await prisma.codegraphConfig.findMany()
     * 
     * // Get first 10 CodegraphConfigs
     * const codegraphConfigs = await prisma.codegraphConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const codegraphConfigWithIdOnly = await prisma.codegraphConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CodegraphConfigFindManyArgs>(args?: SelectSubset<T, CodegraphConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CodegraphConfig.
     * @param {CodegraphConfigCreateArgs} args - Arguments to create a CodegraphConfig.
     * @example
     * // Create one CodegraphConfig
     * const CodegraphConfig = await prisma.codegraphConfig.create({
     *   data: {
     *     // ... data to create a CodegraphConfig
     *   }
     * })
     * 
     */
    create<T extends CodegraphConfigCreateArgs>(args: SelectSubset<T, CodegraphConfigCreateArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CodegraphConfigs.
     * @param {CodegraphConfigCreateManyArgs} args - Arguments to create many CodegraphConfigs.
     * @example
     * // Create many CodegraphConfigs
     * const codegraphConfig = await prisma.codegraphConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CodegraphConfigCreateManyArgs>(args?: SelectSubset<T, CodegraphConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CodegraphConfigs and returns the data saved in the database.
     * @param {CodegraphConfigCreateManyAndReturnArgs} args - Arguments to create many CodegraphConfigs.
     * @example
     * // Create many CodegraphConfigs
     * const codegraphConfig = await prisma.codegraphConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CodegraphConfigs and only return the `id`
     * const codegraphConfigWithIdOnly = await prisma.codegraphConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CodegraphConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, CodegraphConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CodegraphConfig.
     * @param {CodegraphConfigDeleteArgs} args - Arguments to delete one CodegraphConfig.
     * @example
     * // Delete one CodegraphConfig
     * const CodegraphConfig = await prisma.codegraphConfig.delete({
     *   where: {
     *     // ... filter to delete one CodegraphConfig
     *   }
     * })
     * 
     */
    delete<T extends CodegraphConfigDeleteArgs>(args: SelectSubset<T, CodegraphConfigDeleteArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CodegraphConfig.
     * @param {CodegraphConfigUpdateArgs} args - Arguments to update one CodegraphConfig.
     * @example
     * // Update one CodegraphConfig
     * const codegraphConfig = await prisma.codegraphConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CodegraphConfigUpdateArgs>(args: SelectSubset<T, CodegraphConfigUpdateArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CodegraphConfigs.
     * @param {CodegraphConfigDeleteManyArgs} args - Arguments to filter CodegraphConfigs to delete.
     * @example
     * // Delete a few CodegraphConfigs
     * const { count } = await prisma.codegraphConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CodegraphConfigDeleteManyArgs>(args?: SelectSubset<T, CodegraphConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CodegraphConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodegraphConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CodegraphConfigs
     * const codegraphConfig = await prisma.codegraphConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CodegraphConfigUpdateManyArgs>(args: SelectSubset<T, CodegraphConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CodegraphConfig.
     * @param {CodegraphConfigUpsertArgs} args - Arguments to update or create a CodegraphConfig.
     * @example
     * // Update or create a CodegraphConfig
     * const codegraphConfig = await prisma.codegraphConfig.upsert({
     *   create: {
     *     // ... data to create a CodegraphConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CodegraphConfig we want to update
     *   }
     * })
     */
    upsert<T extends CodegraphConfigUpsertArgs>(args: SelectSubset<T, CodegraphConfigUpsertArgs<ExtArgs>>): Prisma__CodegraphConfigClient<$Result.GetResult<Prisma.$CodegraphConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CodegraphConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodegraphConfigCountArgs} args - Arguments to filter CodegraphConfigs to count.
     * @example
     * // Count the number of CodegraphConfigs
     * const count = await prisma.codegraphConfig.count({
     *   where: {
     *     // ... the filter for the CodegraphConfigs we want to count
     *   }
     * })
    **/
    count<T extends CodegraphConfigCountArgs>(
      args?: Subset<T, CodegraphConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodegraphConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CodegraphConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodegraphConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodegraphConfigAggregateArgs>(args: Subset<T, CodegraphConfigAggregateArgs>): Prisma.PrismaPromise<GetCodegraphConfigAggregateType<T>>

    /**
     * Group by CodegraphConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodegraphConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodegraphConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodegraphConfigGroupByArgs['orderBy'] }
        : { orderBy?: CodegraphConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodegraphConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodegraphConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CodegraphConfig model
   */
  readonly fields: CodegraphConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CodegraphConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodegraphConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    codebase<T extends CodebaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CodebaseDefaultArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CodegraphConfig model
   */ 
  interface CodegraphConfigFieldRefs {
    readonly id: FieldRef<"CodegraphConfig", 'String'>
    readonly scipEnabled: FieldRef<"CodegraphConfig", 'Boolean'>
    readonly treeSitterEnabled: FieldRef<"CodegraphConfig", 'Boolean'>
    readonly embeddingEnabled: FieldRef<"CodegraphConfig", 'Boolean'>
    readonly maxConcurrency: FieldRef<"CodegraphConfig", 'Int'>
    readonly scipTimeout: FieldRef<"CodegraphConfig", 'Int'>
    readonly parseTimeout: FieldRef<"CodegraphConfig", 'Int'>
    readonly chunkSize: FieldRef<"CodegraphConfig", 'Int'>
    readonly chunkOverlap: FieldRef<"CodegraphConfig", 'Int'>
    readonly maxTokens: FieldRef<"CodegraphConfig", 'Int'>
    readonly badgerDbPath: FieldRef<"CodegraphConfig", 'String'>
    readonly scipToolsPath: FieldRef<"CodegraphConfig", 'Json'>
    readonly languageConfig: FieldRef<"CodegraphConfig", 'Json'>
    readonly createdAt: FieldRef<"CodegraphConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"CodegraphConfig", 'DateTime'>
    readonly codebaseId: FieldRef<"CodegraphConfig", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CodegraphConfig findUnique
   */
  export type CodegraphConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * Filter, which CodegraphConfig to fetch.
     */
    where: CodegraphConfigWhereUniqueInput
  }

  /**
   * CodegraphConfig findUniqueOrThrow
   */
  export type CodegraphConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * Filter, which CodegraphConfig to fetch.
     */
    where: CodegraphConfigWhereUniqueInput
  }

  /**
   * CodegraphConfig findFirst
   */
  export type CodegraphConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * Filter, which CodegraphConfig to fetch.
     */
    where?: CodegraphConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodegraphConfigs to fetch.
     */
    orderBy?: CodegraphConfigOrderByWithRelationInput | CodegraphConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodegraphConfigs.
     */
    cursor?: CodegraphConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodegraphConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodegraphConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodegraphConfigs.
     */
    distinct?: CodegraphConfigScalarFieldEnum | CodegraphConfigScalarFieldEnum[]
  }

  /**
   * CodegraphConfig findFirstOrThrow
   */
  export type CodegraphConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * Filter, which CodegraphConfig to fetch.
     */
    where?: CodegraphConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodegraphConfigs to fetch.
     */
    orderBy?: CodegraphConfigOrderByWithRelationInput | CodegraphConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodegraphConfigs.
     */
    cursor?: CodegraphConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodegraphConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodegraphConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodegraphConfigs.
     */
    distinct?: CodegraphConfigScalarFieldEnum | CodegraphConfigScalarFieldEnum[]
  }

  /**
   * CodegraphConfig findMany
   */
  export type CodegraphConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * Filter, which CodegraphConfigs to fetch.
     */
    where?: CodegraphConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodegraphConfigs to fetch.
     */
    orderBy?: CodegraphConfigOrderByWithRelationInput | CodegraphConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CodegraphConfigs.
     */
    cursor?: CodegraphConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodegraphConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodegraphConfigs.
     */
    skip?: number
    distinct?: CodegraphConfigScalarFieldEnum | CodegraphConfigScalarFieldEnum[]
  }

  /**
   * CodegraphConfig create
   */
  export type CodegraphConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a CodegraphConfig.
     */
    data: XOR<CodegraphConfigCreateInput, CodegraphConfigUncheckedCreateInput>
  }

  /**
   * CodegraphConfig createMany
   */
  export type CodegraphConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CodegraphConfigs.
     */
    data: CodegraphConfigCreateManyInput | CodegraphConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CodegraphConfig createManyAndReturn
   */
  export type CodegraphConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CodegraphConfigs.
     */
    data: CodegraphConfigCreateManyInput | CodegraphConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CodegraphConfig update
   */
  export type CodegraphConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a CodegraphConfig.
     */
    data: XOR<CodegraphConfigUpdateInput, CodegraphConfigUncheckedUpdateInput>
    /**
     * Choose, which CodegraphConfig to update.
     */
    where: CodegraphConfigWhereUniqueInput
  }

  /**
   * CodegraphConfig updateMany
   */
  export type CodegraphConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CodegraphConfigs.
     */
    data: XOR<CodegraphConfigUpdateManyMutationInput, CodegraphConfigUncheckedUpdateManyInput>
    /**
     * Filter which CodegraphConfigs to update
     */
    where?: CodegraphConfigWhereInput
  }

  /**
   * CodegraphConfig upsert
   */
  export type CodegraphConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the CodegraphConfig to update in case it exists.
     */
    where: CodegraphConfigWhereUniqueInput
    /**
     * In case the CodegraphConfig found by the `where` argument doesn't exist, create a new CodegraphConfig with this data.
     */
    create: XOR<CodegraphConfigCreateInput, CodegraphConfigUncheckedCreateInput>
    /**
     * In case the CodegraphConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodegraphConfigUpdateInput, CodegraphConfigUncheckedUpdateInput>
  }

  /**
   * CodegraphConfig delete
   */
  export type CodegraphConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
    /**
     * Filter which CodegraphConfig to delete.
     */
    where: CodegraphConfigWhereUniqueInput
  }

  /**
   * CodegraphConfig deleteMany
   */
  export type CodegraphConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodegraphConfigs to delete
     */
    where?: CodegraphConfigWhereInput
  }

  /**
   * CodegraphConfig without action
   */
  export type CodegraphConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodegraphConfig
     */
    select?: CodegraphConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CodegraphConfigInclude<ExtArgs> | null
  }


  /**
   * Model VectorEmbedding
   */

  export type AggregateVectorEmbedding = {
    _count: VectorEmbeddingCountAggregateOutputType | null
    _avg: VectorEmbeddingAvgAggregateOutputType | null
    _sum: VectorEmbeddingSumAggregateOutputType | null
    _min: VectorEmbeddingMinAggregateOutputType | null
    _max: VectorEmbeddingMaxAggregateOutputType | null
  }

  export type VectorEmbeddingAvgAggregateOutputType = {
    chunkIndex: number | null
    startLine: number | null
    endLine: number | null
    startColumn: number | null
    endColumn: number | null
    tokenCount: number | null
  }

  export type VectorEmbeddingSumAggregateOutputType = {
    chunkIndex: number | null
    startLine: number | null
    endLine: number | null
    startColumn: number | null
    endColumn: number | null
    tokenCount: number | null
  }

  export type VectorEmbeddingMinAggregateOutputType = {
    id: string | null
    content: string | null
    filePath: string | null
    chunkIndex: number | null
    startLine: number | null
    endLine: number | null
    startColumn: number | null
    endColumn: number | null
    tokenCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
  }

  export type VectorEmbeddingMaxAggregateOutputType = {
    id: string | null
    content: string | null
    filePath: string | null
    chunkIndex: number | null
    startLine: number | null
    endLine: number | null
    startColumn: number | null
    endColumn: number | null
    tokenCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    codebaseId: string | null
  }

  export type VectorEmbeddingCountAggregateOutputType = {
    id: number
    content: number
    filePath: number
    chunkIndex: number
    startLine: number
    endLine: number
    startColumn: number
    endColumn: number
    tokenCount: number
    embedding: number
    metadata: number
    createdAt: number
    updatedAt: number
    codebaseId: number
    _all: number
  }


  export type VectorEmbeddingAvgAggregateInputType = {
    chunkIndex?: true
    startLine?: true
    endLine?: true
    startColumn?: true
    endColumn?: true
    tokenCount?: true
  }

  export type VectorEmbeddingSumAggregateInputType = {
    chunkIndex?: true
    startLine?: true
    endLine?: true
    startColumn?: true
    endColumn?: true
    tokenCount?: true
  }

  export type VectorEmbeddingMinAggregateInputType = {
    id?: true
    content?: true
    filePath?: true
    chunkIndex?: true
    startLine?: true
    endLine?: true
    startColumn?: true
    endColumn?: true
    tokenCount?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
  }

  export type VectorEmbeddingMaxAggregateInputType = {
    id?: true
    content?: true
    filePath?: true
    chunkIndex?: true
    startLine?: true
    endLine?: true
    startColumn?: true
    endColumn?: true
    tokenCount?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
  }

  export type VectorEmbeddingCountAggregateInputType = {
    id?: true
    content?: true
    filePath?: true
    chunkIndex?: true
    startLine?: true
    endLine?: true
    startColumn?: true
    endColumn?: true
    tokenCount?: true
    embedding?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    codebaseId?: true
    _all?: true
  }

  export type VectorEmbeddingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VectorEmbedding to aggregate.
     */
    where?: VectorEmbeddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VectorEmbeddings to fetch.
     */
    orderBy?: VectorEmbeddingOrderByWithRelationInput | VectorEmbeddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VectorEmbeddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VectorEmbeddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VectorEmbeddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VectorEmbeddings
    **/
    _count?: true | VectorEmbeddingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VectorEmbeddingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VectorEmbeddingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VectorEmbeddingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VectorEmbeddingMaxAggregateInputType
  }

  export type GetVectorEmbeddingAggregateType<T extends VectorEmbeddingAggregateArgs> = {
        [P in keyof T & keyof AggregateVectorEmbedding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVectorEmbedding[P]>
      : GetScalarType<T[P], AggregateVectorEmbedding[P]>
  }




  export type VectorEmbeddingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VectorEmbeddingWhereInput
    orderBy?: VectorEmbeddingOrderByWithAggregationInput | VectorEmbeddingOrderByWithAggregationInput[]
    by: VectorEmbeddingScalarFieldEnum[] | VectorEmbeddingScalarFieldEnum
    having?: VectorEmbeddingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VectorEmbeddingCountAggregateInputType | true
    _avg?: VectorEmbeddingAvgAggregateInputType
    _sum?: VectorEmbeddingSumAggregateInputType
    _min?: VectorEmbeddingMinAggregateInputType
    _max?: VectorEmbeddingMaxAggregateInputType
  }

  export type VectorEmbeddingGroupByOutputType = {
    id: string
    content: string
    filePath: string
    chunkIndex: number
    startLine: number
    endLine: number
    startColumn: number | null
    endColumn: number | null
    tokenCount: number
    embedding: JsonValue
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    codebaseId: string
    _count: VectorEmbeddingCountAggregateOutputType | null
    _avg: VectorEmbeddingAvgAggregateOutputType | null
    _sum: VectorEmbeddingSumAggregateOutputType | null
    _min: VectorEmbeddingMinAggregateOutputType | null
    _max: VectorEmbeddingMaxAggregateOutputType | null
  }

  type GetVectorEmbeddingGroupByPayload<T extends VectorEmbeddingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VectorEmbeddingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VectorEmbeddingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VectorEmbeddingGroupByOutputType[P]>
            : GetScalarType<T[P], VectorEmbeddingGroupByOutputType[P]>
        }
      >
    >


  export type VectorEmbeddingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    filePath?: boolean
    chunkIndex?: boolean
    startLine?: boolean
    endLine?: boolean
    startColumn?: boolean
    endColumn?: boolean
    tokenCount?: boolean
    embedding?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vectorEmbedding"]>

  export type VectorEmbeddingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    filePath?: boolean
    chunkIndex?: boolean
    startLine?: boolean
    endLine?: boolean
    startColumn?: boolean
    endColumn?: boolean
    tokenCount?: boolean
    embedding?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vectorEmbedding"]>

  export type VectorEmbeddingSelectScalar = {
    id?: boolean
    content?: boolean
    filePath?: boolean
    chunkIndex?: boolean
    startLine?: boolean
    endLine?: boolean
    startColumn?: boolean
    endColumn?: boolean
    tokenCount?: boolean
    embedding?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    codebaseId?: boolean
  }

  export type VectorEmbeddingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }
  export type VectorEmbeddingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    codebase?: boolean | CodebaseDefaultArgs<ExtArgs>
  }

  export type $VectorEmbeddingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VectorEmbedding"
    objects: {
      codebase: Prisma.$CodebasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      filePath: string
      chunkIndex: number
      startLine: number
      endLine: number
      startColumn: number | null
      endColumn: number | null
      tokenCount: number
      embedding: Prisma.JsonValue
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      codebaseId: string
    }, ExtArgs["result"]["vectorEmbedding"]>
    composites: {}
  }

  type VectorEmbeddingGetPayload<S extends boolean | null | undefined | VectorEmbeddingDefaultArgs> = $Result.GetResult<Prisma.$VectorEmbeddingPayload, S>

  type VectorEmbeddingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VectorEmbeddingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VectorEmbeddingCountAggregateInputType | true
    }

  export interface VectorEmbeddingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VectorEmbedding'], meta: { name: 'VectorEmbedding' } }
    /**
     * Find zero or one VectorEmbedding that matches the filter.
     * @param {VectorEmbeddingFindUniqueArgs} args - Arguments to find a VectorEmbedding
     * @example
     * // Get one VectorEmbedding
     * const vectorEmbedding = await prisma.vectorEmbedding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VectorEmbeddingFindUniqueArgs>(args: SelectSubset<T, VectorEmbeddingFindUniqueArgs<ExtArgs>>): Prisma__VectorEmbeddingClient<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VectorEmbedding that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VectorEmbeddingFindUniqueOrThrowArgs} args - Arguments to find a VectorEmbedding
     * @example
     * // Get one VectorEmbedding
     * const vectorEmbedding = await prisma.vectorEmbedding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VectorEmbeddingFindUniqueOrThrowArgs>(args: SelectSubset<T, VectorEmbeddingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VectorEmbeddingClient<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VectorEmbedding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorEmbeddingFindFirstArgs} args - Arguments to find a VectorEmbedding
     * @example
     * // Get one VectorEmbedding
     * const vectorEmbedding = await prisma.vectorEmbedding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VectorEmbeddingFindFirstArgs>(args?: SelectSubset<T, VectorEmbeddingFindFirstArgs<ExtArgs>>): Prisma__VectorEmbeddingClient<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VectorEmbedding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorEmbeddingFindFirstOrThrowArgs} args - Arguments to find a VectorEmbedding
     * @example
     * // Get one VectorEmbedding
     * const vectorEmbedding = await prisma.vectorEmbedding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VectorEmbeddingFindFirstOrThrowArgs>(args?: SelectSubset<T, VectorEmbeddingFindFirstOrThrowArgs<ExtArgs>>): Prisma__VectorEmbeddingClient<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VectorEmbeddings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorEmbeddingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VectorEmbeddings
     * const vectorEmbeddings = await prisma.vectorEmbedding.findMany()
     * 
     * // Get first 10 VectorEmbeddings
     * const vectorEmbeddings = await prisma.vectorEmbedding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vectorEmbeddingWithIdOnly = await prisma.vectorEmbedding.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VectorEmbeddingFindManyArgs>(args?: SelectSubset<T, VectorEmbeddingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VectorEmbedding.
     * @param {VectorEmbeddingCreateArgs} args - Arguments to create a VectorEmbedding.
     * @example
     * // Create one VectorEmbedding
     * const VectorEmbedding = await prisma.vectorEmbedding.create({
     *   data: {
     *     // ... data to create a VectorEmbedding
     *   }
     * })
     * 
     */
    create<T extends VectorEmbeddingCreateArgs>(args: SelectSubset<T, VectorEmbeddingCreateArgs<ExtArgs>>): Prisma__VectorEmbeddingClient<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VectorEmbeddings.
     * @param {VectorEmbeddingCreateManyArgs} args - Arguments to create many VectorEmbeddings.
     * @example
     * // Create many VectorEmbeddings
     * const vectorEmbedding = await prisma.vectorEmbedding.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VectorEmbeddingCreateManyArgs>(args?: SelectSubset<T, VectorEmbeddingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VectorEmbeddings and returns the data saved in the database.
     * @param {VectorEmbeddingCreateManyAndReturnArgs} args - Arguments to create many VectorEmbeddings.
     * @example
     * // Create many VectorEmbeddings
     * const vectorEmbedding = await prisma.vectorEmbedding.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VectorEmbeddings and only return the `id`
     * const vectorEmbeddingWithIdOnly = await prisma.vectorEmbedding.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VectorEmbeddingCreateManyAndReturnArgs>(args?: SelectSubset<T, VectorEmbeddingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VectorEmbedding.
     * @param {VectorEmbeddingDeleteArgs} args - Arguments to delete one VectorEmbedding.
     * @example
     * // Delete one VectorEmbedding
     * const VectorEmbedding = await prisma.vectorEmbedding.delete({
     *   where: {
     *     // ... filter to delete one VectorEmbedding
     *   }
     * })
     * 
     */
    delete<T extends VectorEmbeddingDeleteArgs>(args: SelectSubset<T, VectorEmbeddingDeleteArgs<ExtArgs>>): Prisma__VectorEmbeddingClient<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VectorEmbedding.
     * @param {VectorEmbeddingUpdateArgs} args - Arguments to update one VectorEmbedding.
     * @example
     * // Update one VectorEmbedding
     * const vectorEmbedding = await prisma.vectorEmbedding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VectorEmbeddingUpdateArgs>(args: SelectSubset<T, VectorEmbeddingUpdateArgs<ExtArgs>>): Prisma__VectorEmbeddingClient<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VectorEmbeddings.
     * @param {VectorEmbeddingDeleteManyArgs} args - Arguments to filter VectorEmbeddings to delete.
     * @example
     * // Delete a few VectorEmbeddings
     * const { count } = await prisma.vectorEmbedding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VectorEmbeddingDeleteManyArgs>(args?: SelectSubset<T, VectorEmbeddingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VectorEmbeddings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorEmbeddingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VectorEmbeddings
     * const vectorEmbedding = await prisma.vectorEmbedding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VectorEmbeddingUpdateManyArgs>(args: SelectSubset<T, VectorEmbeddingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VectorEmbedding.
     * @param {VectorEmbeddingUpsertArgs} args - Arguments to update or create a VectorEmbedding.
     * @example
     * // Update or create a VectorEmbedding
     * const vectorEmbedding = await prisma.vectorEmbedding.upsert({
     *   create: {
     *     // ... data to create a VectorEmbedding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VectorEmbedding we want to update
     *   }
     * })
     */
    upsert<T extends VectorEmbeddingUpsertArgs>(args: SelectSubset<T, VectorEmbeddingUpsertArgs<ExtArgs>>): Prisma__VectorEmbeddingClient<$Result.GetResult<Prisma.$VectorEmbeddingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VectorEmbeddings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorEmbeddingCountArgs} args - Arguments to filter VectorEmbeddings to count.
     * @example
     * // Count the number of VectorEmbeddings
     * const count = await prisma.vectorEmbedding.count({
     *   where: {
     *     // ... the filter for the VectorEmbeddings we want to count
     *   }
     * })
    **/
    count<T extends VectorEmbeddingCountArgs>(
      args?: Subset<T, VectorEmbeddingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VectorEmbeddingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VectorEmbedding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorEmbeddingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VectorEmbeddingAggregateArgs>(args: Subset<T, VectorEmbeddingAggregateArgs>): Prisma.PrismaPromise<GetVectorEmbeddingAggregateType<T>>

    /**
     * Group by VectorEmbedding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VectorEmbeddingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VectorEmbeddingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VectorEmbeddingGroupByArgs['orderBy'] }
        : { orderBy?: VectorEmbeddingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VectorEmbeddingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVectorEmbeddingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VectorEmbedding model
   */
  readonly fields: VectorEmbeddingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VectorEmbedding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VectorEmbeddingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    codebase<T extends CodebaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CodebaseDefaultArgs<ExtArgs>>): Prisma__CodebaseClient<$Result.GetResult<Prisma.$CodebasePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VectorEmbedding model
   */ 
  interface VectorEmbeddingFieldRefs {
    readonly id: FieldRef<"VectorEmbedding", 'String'>
    readonly content: FieldRef<"VectorEmbedding", 'String'>
    readonly filePath: FieldRef<"VectorEmbedding", 'String'>
    readonly chunkIndex: FieldRef<"VectorEmbedding", 'Int'>
    readonly startLine: FieldRef<"VectorEmbedding", 'Int'>
    readonly endLine: FieldRef<"VectorEmbedding", 'Int'>
    readonly startColumn: FieldRef<"VectorEmbedding", 'Int'>
    readonly endColumn: FieldRef<"VectorEmbedding", 'Int'>
    readonly tokenCount: FieldRef<"VectorEmbedding", 'Int'>
    readonly embedding: FieldRef<"VectorEmbedding", 'Json'>
    readonly metadata: FieldRef<"VectorEmbedding", 'Json'>
    readonly createdAt: FieldRef<"VectorEmbedding", 'DateTime'>
    readonly updatedAt: FieldRef<"VectorEmbedding", 'DateTime'>
    readonly codebaseId: FieldRef<"VectorEmbedding", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VectorEmbedding findUnique
   */
  export type VectorEmbeddingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * Filter, which VectorEmbedding to fetch.
     */
    where: VectorEmbeddingWhereUniqueInput
  }

  /**
   * VectorEmbedding findUniqueOrThrow
   */
  export type VectorEmbeddingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * Filter, which VectorEmbedding to fetch.
     */
    where: VectorEmbeddingWhereUniqueInput
  }

  /**
   * VectorEmbedding findFirst
   */
  export type VectorEmbeddingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * Filter, which VectorEmbedding to fetch.
     */
    where?: VectorEmbeddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VectorEmbeddings to fetch.
     */
    orderBy?: VectorEmbeddingOrderByWithRelationInput | VectorEmbeddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VectorEmbeddings.
     */
    cursor?: VectorEmbeddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VectorEmbeddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VectorEmbeddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VectorEmbeddings.
     */
    distinct?: VectorEmbeddingScalarFieldEnum | VectorEmbeddingScalarFieldEnum[]
  }

  /**
   * VectorEmbedding findFirstOrThrow
   */
  export type VectorEmbeddingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * Filter, which VectorEmbedding to fetch.
     */
    where?: VectorEmbeddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VectorEmbeddings to fetch.
     */
    orderBy?: VectorEmbeddingOrderByWithRelationInput | VectorEmbeddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VectorEmbeddings.
     */
    cursor?: VectorEmbeddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VectorEmbeddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VectorEmbeddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VectorEmbeddings.
     */
    distinct?: VectorEmbeddingScalarFieldEnum | VectorEmbeddingScalarFieldEnum[]
  }

  /**
   * VectorEmbedding findMany
   */
  export type VectorEmbeddingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * Filter, which VectorEmbeddings to fetch.
     */
    where?: VectorEmbeddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VectorEmbeddings to fetch.
     */
    orderBy?: VectorEmbeddingOrderByWithRelationInput | VectorEmbeddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VectorEmbeddings.
     */
    cursor?: VectorEmbeddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VectorEmbeddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VectorEmbeddings.
     */
    skip?: number
    distinct?: VectorEmbeddingScalarFieldEnum | VectorEmbeddingScalarFieldEnum[]
  }

  /**
   * VectorEmbedding create
   */
  export type VectorEmbeddingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * The data needed to create a VectorEmbedding.
     */
    data: XOR<VectorEmbeddingCreateInput, VectorEmbeddingUncheckedCreateInput>
  }

  /**
   * VectorEmbedding createMany
   */
  export type VectorEmbeddingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VectorEmbeddings.
     */
    data: VectorEmbeddingCreateManyInput | VectorEmbeddingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VectorEmbedding createManyAndReturn
   */
  export type VectorEmbeddingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VectorEmbeddings.
     */
    data: VectorEmbeddingCreateManyInput | VectorEmbeddingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VectorEmbedding update
   */
  export type VectorEmbeddingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * The data needed to update a VectorEmbedding.
     */
    data: XOR<VectorEmbeddingUpdateInput, VectorEmbeddingUncheckedUpdateInput>
    /**
     * Choose, which VectorEmbedding to update.
     */
    where: VectorEmbeddingWhereUniqueInput
  }

  /**
   * VectorEmbedding updateMany
   */
  export type VectorEmbeddingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VectorEmbeddings.
     */
    data: XOR<VectorEmbeddingUpdateManyMutationInput, VectorEmbeddingUncheckedUpdateManyInput>
    /**
     * Filter which VectorEmbeddings to update
     */
    where?: VectorEmbeddingWhereInput
  }

  /**
   * VectorEmbedding upsert
   */
  export type VectorEmbeddingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * The filter to search for the VectorEmbedding to update in case it exists.
     */
    where: VectorEmbeddingWhereUniqueInput
    /**
     * In case the VectorEmbedding found by the `where` argument doesn't exist, create a new VectorEmbedding with this data.
     */
    create: XOR<VectorEmbeddingCreateInput, VectorEmbeddingUncheckedCreateInput>
    /**
     * In case the VectorEmbedding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VectorEmbeddingUpdateInput, VectorEmbeddingUncheckedUpdateInput>
  }

  /**
   * VectorEmbedding delete
   */
  export type VectorEmbeddingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
    /**
     * Filter which VectorEmbedding to delete.
     */
    where: VectorEmbeddingWhereUniqueInput
  }

  /**
   * VectorEmbedding deleteMany
   */
  export type VectorEmbeddingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VectorEmbeddings to delete
     */
    where?: VectorEmbeddingWhereInput
  }

  /**
   * VectorEmbedding without action
   */
  export type VectorEmbeddingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VectorEmbedding
     */
    select?: VectorEmbeddingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VectorEmbeddingInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    avatar: 'avatar',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    slug: 'slug',
    status: 'status',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ProjectMemberScalarFieldEnum: {
    id: 'id',
    role: 'role',
    joinedAt: 'joinedAt',
    userId: 'userId',
    projectId: 'projectId'
  };

  export type ProjectMemberScalarFieldEnum = (typeof ProjectMemberScalarFieldEnum)[keyof typeof ProjectMemberScalarFieldEnum]


  export const CodebaseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    gitlabUrl: 'gitlabUrl',
    gitlabProjectId: 'gitlabProjectId',
    branch: 'branch',
    language: 'language',
    status: 'status',
    lastSyncAt: 'lastSyncAt',
    totalFiles: 'totalFiles',
    totalLines: 'totalLines',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId'
  };

  export type CodebaseScalarFieldEnum = (typeof CodebaseScalarFieldEnum)[keyof typeof CodebaseScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    path: 'path',
    hash: 'hash',
    size: 'size',
    language: 'language',
    status: 'status',
    lastModified: 'lastModified',
    lineCount: 'lineCount',
    storageKey: 'storageKey',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    codebaseId: 'codebaseId'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const SyncJobScalarFieldEnum: {
    id: 'id',
    type: 'type',
    status: 'status',
    priority: 'priority',
    progress: 'progress',
    message: 'message',
    error: 'error',
    metadata: 'metadata',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    codebaseId: 'codebaseId',
    userId: 'userId'
  };

  export type SyncJobScalarFieldEnum = (typeof SyncJobScalarFieldEnum)[keyof typeof SyncJobScalarFieldEnum]


  export const IndexHistoryScalarFieldEnum: {
    id: 'id',
    taskType: 'taskType',
    status: 'status',
    totalFiles: 'totalFiles',
    processedFiles: 'processedFiles',
    failedFiles: 'failedFiles',
    ignoredFiles: 'ignoredFiles',
    startTime: 'startTime',
    endTime: 'endTime',
    durationMs: 'durationMs',
    errorMessage: 'errorMessage',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    codebaseId: 'codebaseId',
    syncJobId: 'syncJobId',
    fileId: 'fileId'
  };

  export type IndexHistoryScalarFieldEnum = (typeof IndexHistoryScalarFieldEnum)[keyof typeof IndexHistoryScalarFieldEnum]


  export const CodegraphConfigScalarFieldEnum: {
    id: 'id',
    scipEnabled: 'scipEnabled',
    treeSitterEnabled: 'treeSitterEnabled',
    embeddingEnabled: 'embeddingEnabled',
    maxConcurrency: 'maxConcurrency',
    scipTimeout: 'scipTimeout',
    parseTimeout: 'parseTimeout',
    chunkSize: 'chunkSize',
    chunkOverlap: 'chunkOverlap',
    maxTokens: 'maxTokens',
    badgerDbPath: 'badgerDbPath',
    scipToolsPath: 'scipToolsPath',
    languageConfig: 'languageConfig',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    codebaseId: 'codebaseId'
  };

  export type CodegraphConfigScalarFieldEnum = (typeof CodegraphConfigScalarFieldEnum)[keyof typeof CodegraphConfigScalarFieldEnum]


  export const VectorEmbeddingScalarFieldEnum: {
    id: 'id',
    content: 'content',
    filePath: 'filePath',
    chunkIndex: 'chunkIndex',
    startLine: 'startLine',
    endLine: 'endLine',
    startColumn: 'startColumn',
    endColumn: 'endColumn',
    tokenCount: 'tokenCount',
    embedding: 'embedding',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    codebaseId: 'codebaseId'
  };

  export type VectorEmbeddingScalarFieldEnum = (typeof VectorEmbeddingScalarFieldEnum)[keyof typeof VectorEmbeddingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ProjectStatus'
   */
  export type EnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus'>
    


  /**
   * Reference to a field of type 'ProjectStatus[]'
   */
  export type ListEnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'ProjectMemberRole'
   */
  export type EnumProjectMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectMemberRole'>
    


  /**
   * Reference to a field of type 'ProjectMemberRole[]'
   */
  export type ListEnumProjectMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectMemberRole[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'CodebaseStatus'
   */
  export type EnumCodebaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CodebaseStatus'>
    


  /**
   * Reference to a field of type 'CodebaseStatus[]'
   */
  export type ListEnumCodebaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CodebaseStatus[]'>
    


  /**
   * Reference to a field of type 'FileStatus'
   */
  export type EnumFileStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileStatus'>
    


  /**
   * Reference to a field of type 'FileStatus[]'
   */
  export type ListEnumFileStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileStatus[]'>
    


  /**
   * Reference to a field of type 'SyncJobType'
   */
  export type EnumSyncJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncJobType'>
    


  /**
   * Reference to a field of type 'SyncJobType[]'
   */
  export type ListEnumSyncJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncJobType[]'>
    


  /**
   * Reference to a field of type 'SyncJobStatus'
   */
  export type EnumSyncJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncJobStatus'>
    


  /**
   * Reference to a field of type 'SyncJobStatus[]'
   */
  export type ListEnumSyncJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SyncJobStatus[]'>
    


  /**
   * Reference to a field of type 'IndexTaskType'
   */
  export type EnumIndexTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IndexTaskType'>
    


  /**
   * Reference to a field of type 'IndexTaskType[]'
   */
  export type ListEnumIndexTaskTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IndexTaskType[]'>
    


  /**
   * Reference to a field of type 'IndexTaskStatus'
   */
  export type EnumIndexTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IndexTaskStatus'>
    


  /**
   * Reference to a field of type 'IndexTaskStatus[]'
   */
  export type ListEnumIndexTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IndexTaskStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    projects?: ProjectMemberListRelationFilter
    syncJobs?: SyncJobListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projects?: ProjectMemberOrderByRelationAggregateInput
    syncJobs?: SyncJobOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    projects?: ProjectMemberListRelationFilter
    syncJobs?: SyncJobListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    slug?: StringFilter<"Project"> | string
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    settings?: JsonNullableFilter<"Project">
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    members?: ProjectMemberListRelationFilter
    codebases?: CodebaseListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slug?: SortOrder
    status?: SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: ProjectMemberOrderByRelationAggregateInput
    codebases?: CodebaseOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    settings?: JsonNullableFilter<"Project">
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    members?: ProjectMemberListRelationFilter
    codebases?: CodebaseListRelationFilter
  }, "id" | "slug">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    slug?: SortOrder
    status?: SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    slug?: StringWithAggregatesFilter<"Project"> | string
    status?: EnumProjectStatusWithAggregatesFilter<"Project"> | $Enums.ProjectStatus
    settings?: JsonNullableWithAggregatesFilter<"Project">
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type ProjectMemberWhereInput = {
    AND?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    OR?: ProjectMemberWhereInput[]
    NOT?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    id?: StringFilter<"ProjectMember"> | string
    role?: EnumProjectMemberRoleFilter<"ProjectMember"> | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type ProjectMemberOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ProjectMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_projectId?: ProjectMemberUserIdProjectIdCompoundUniqueInput
    AND?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    OR?: ProjectMemberWhereInput[]
    NOT?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    role?: EnumProjectMemberRoleFilter<"ProjectMember"> | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id" | "userId_projectId">

  export type ProjectMemberOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    _count?: ProjectMemberCountOrderByAggregateInput
    _max?: ProjectMemberMaxOrderByAggregateInput
    _min?: ProjectMemberMinOrderByAggregateInput
  }

  export type ProjectMemberScalarWhereWithAggregatesInput = {
    AND?: ProjectMemberScalarWhereWithAggregatesInput | ProjectMemberScalarWhereWithAggregatesInput[]
    OR?: ProjectMemberScalarWhereWithAggregatesInput[]
    NOT?: ProjectMemberScalarWhereWithAggregatesInput | ProjectMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectMember"> | string
    role?: EnumProjectMemberRoleWithAggregatesFilter<"ProjectMember"> | $Enums.ProjectMemberRole
    joinedAt?: DateTimeWithAggregatesFilter<"ProjectMember"> | Date | string
    userId?: StringWithAggregatesFilter<"ProjectMember"> | string
    projectId?: StringWithAggregatesFilter<"ProjectMember"> | string
  }

  export type CodebaseWhereInput = {
    AND?: CodebaseWhereInput | CodebaseWhereInput[]
    OR?: CodebaseWhereInput[]
    NOT?: CodebaseWhereInput | CodebaseWhereInput[]
    id?: StringFilter<"Codebase"> | string
    name?: StringFilter<"Codebase"> | string
    description?: StringNullableFilter<"Codebase"> | string | null
    gitlabUrl?: StringFilter<"Codebase"> | string
    gitlabProjectId?: IntNullableFilter<"Codebase"> | number | null
    branch?: StringFilter<"Codebase"> | string
    language?: StringNullableFilter<"Codebase"> | string | null
    status?: EnumCodebaseStatusFilter<"Codebase"> | $Enums.CodebaseStatus
    lastSyncAt?: DateTimeNullableFilter<"Codebase"> | Date | string | null
    totalFiles?: IntFilter<"Codebase"> | number
    totalLines?: IntFilter<"Codebase"> | number
    settings?: JsonNullableFilter<"Codebase">
    createdAt?: DateTimeFilter<"Codebase"> | Date | string
    updatedAt?: DateTimeFilter<"Codebase"> | Date | string
    projectId?: StringFilter<"Codebase"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    files?: FileListRelationFilter
    syncJobs?: SyncJobListRelationFilter
    indexHistory?: IndexHistoryListRelationFilter
    codegraphConfig?: XOR<CodegraphConfigNullableRelationFilter, CodegraphConfigWhereInput> | null
    vectorEmbeddings?: VectorEmbeddingListRelationFilter
  }

  export type CodebaseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    gitlabUrl?: SortOrder
    gitlabProjectId?: SortOrderInput | SortOrder
    branch?: SortOrder
    language?: SortOrderInput | SortOrder
    status?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    totalFiles?: SortOrder
    totalLines?: SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    files?: FileOrderByRelationAggregateInput
    syncJobs?: SyncJobOrderByRelationAggregateInput
    indexHistory?: IndexHistoryOrderByRelationAggregateInput
    codegraphConfig?: CodegraphConfigOrderByWithRelationInput
    vectorEmbeddings?: VectorEmbeddingOrderByRelationAggregateInput
  }

  export type CodebaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_gitlabUrl?: CodebaseProjectIdGitlabUrlCompoundUniqueInput
    AND?: CodebaseWhereInput | CodebaseWhereInput[]
    OR?: CodebaseWhereInput[]
    NOT?: CodebaseWhereInput | CodebaseWhereInput[]
    name?: StringFilter<"Codebase"> | string
    description?: StringNullableFilter<"Codebase"> | string | null
    gitlabUrl?: StringFilter<"Codebase"> | string
    gitlabProjectId?: IntNullableFilter<"Codebase"> | number | null
    branch?: StringFilter<"Codebase"> | string
    language?: StringNullableFilter<"Codebase"> | string | null
    status?: EnumCodebaseStatusFilter<"Codebase"> | $Enums.CodebaseStatus
    lastSyncAt?: DateTimeNullableFilter<"Codebase"> | Date | string | null
    totalFiles?: IntFilter<"Codebase"> | number
    totalLines?: IntFilter<"Codebase"> | number
    settings?: JsonNullableFilter<"Codebase">
    createdAt?: DateTimeFilter<"Codebase"> | Date | string
    updatedAt?: DateTimeFilter<"Codebase"> | Date | string
    projectId?: StringFilter<"Codebase"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    files?: FileListRelationFilter
    syncJobs?: SyncJobListRelationFilter
    indexHistory?: IndexHistoryListRelationFilter
    codegraphConfig?: XOR<CodegraphConfigNullableRelationFilter, CodegraphConfigWhereInput> | null
    vectorEmbeddings?: VectorEmbeddingListRelationFilter
  }, "id" | "projectId_gitlabUrl">

  export type CodebaseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    gitlabUrl?: SortOrder
    gitlabProjectId?: SortOrderInput | SortOrder
    branch?: SortOrder
    language?: SortOrderInput | SortOrder
    status?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    totalFiles?: SortOrder
    totalLines?: SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    _count?: CodebaseCountOrderByAggregateInput
    _avg?: CodebaseAvgOrderByAggregateInput
    _max?: CodebaseMaxOrderByAggregateInput
    _min?: CodebaseMinOrderByAggregateInput
    _sum?: CodebaseSumOrderByAggregateInput
  }

  export type CodebaseScalarWhereWithAggregatesInput = {
    AND?: CodebaseScalarWhereWithAggregatesInput | CodebaseScalarWhereWithAggregatesInput[]
    OR?: CodebaseScalarWhereWithAggregatesInput[]
    NOT?: CodebaseScalarWhereWithAggregatesInput | CodebaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Codebase"> | string
    name?: StringWithAggregatesFilter<"Codebase"> | string
    description?: StringNullableWithAggregatesFilter<"Codebase"> | string | null
    gitlabUrl?: StringWithAggregatesFilter<"Codebase"> | string
    gitlabProjectId?: IntNullableWithAggregatesFilter<"Codebase"> | number | null
    branch?: StringWithAggregatesFilter<"Codebase"> | string
    language?: StringNullableWithAggregatesFilter<"Codebase"> | string | null
    status?: EnumCodebaseStatusWithAggregatesFilter<"Codebase"> | $Enums.CodebaseStatus
    lastSyncAt?: DateTimeNullableWithAggregatesFilter<"Codebase"> | Date | string | null
    totalFiles?: IntWithAggregatesFilter<"Codebase"> | number
    totalLines?: IntWithAggregatesFilter<"Codebase"> | number
    settings?: JsonNullableWithAggregatesFilter<"Codebase">
    createdAt?: DateTimeWithAggregatesFilter<"Codebase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Codebase"> | Date | string
    projectId?: StringWithAggregatesFilter<"Codebase"> | string
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    hash?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    language?: StringNullableFilter<"File"> | string | null
    status?: EnumFileStatusFilter<"File"> | $Enums.FileStatus
    lastModified?: DateTimeNullableFilter<"File"> | Date | string | null
    lineCount?: IntFilter<"File"> | number
    storageKey?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    codebaseId?: StringFilter<"File"> | string
    codebase?: XOR<CodebaseRelationFilter, CodebaseWhereInput>
    indexHistory?: IndexHistoryListRelationFilter
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    hash?: SortOrder
    size?: SortOrder
    language?: SortOrderInput | SortOrder
    status?: SortOrder
    lastModified?: SortOrderInput | SortOrder
    lineCount?: SortOrder
    storageKey?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    codebase?: CodebaseOrderByWithRelationInput
    indexHistory?: IndexHistoryOrderByRelationAggregateInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    codebaseId_path?: FileCodebaseIdPathCompoundUniqueInput
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    path?: StringFilter<"File"> | string
    hash?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    language?: StringNullableFilter<"File"> | string | null
    status?: EnumFileStatusFilter<"File"> | $Enums.FileStatus
    lastModified?: DateTimeNullableFilter<"File"> | Date | string | null
    lineCount?: IntFilter<"File"> | number
    storageKey?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    codebaseId?: StringFilter<"File"> | string
    codebase?: XOR<CodebaseRelationFilter, CodebaseWhereInput>
    indexHistory?: IndexHistoryListRelationFilter
  }, "id" | "codebaseId_path">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    hash?: SortOrder
    size?: SortOrder
    language?: SortOrderInput | SortOrder
    status?: SortOrder
    lastModified?: SortOrderInput | SortOrder
    lineCount?: SortOrder
    storageKey?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    path?: StringWithAggregatesFilter<"File"> | string
    hash?: StringWithAggregatesFilter<"File"> | string
    size?: IntWithAggregatesFilter<"File"> | number
    language?: StringNullableWithAggregatesFilter<"File"> | string | null
    status?: EnumFileStatusWithAggregatesFilter<"File"> | $Enums.FileStatus
    lastModified?: DateTimeNullableWithAggregatesFilter<"File"> | Date | string | null
    lineCount?: IntWithAggregatesFilter<"File"> | number
    storageKey?: StringNullableWithAggregatesFilter<"File"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    codebaseId?: StringWithAggregatesFilter<"File"> | string
  }

  export type SyncJobWhereInput = {
    AND?: SyncJobWhereInput | SyncJobWhereInput[]
    OR?: SyncJobWhereInput[]
    NOT?: SyncJobWhereInput | SyncJobWhereInput[]
    id?: StringFilter<"SyncJob"> | string
    type?: EnumSyncJobTypeFilter<"SyncJob"> | $Enums.SyncJobType
    status?: EnumSyncJobStatusFilter<"SyncJob"> | $Enums.SyncJobStatus
    priority?: IntFilter<"SyncJob"> | number
    progress?: IntFilter<"SyncJob"> | number
    message?: StringNullableFilter<"SyncJob"> | string | null
    error?: StringNullableFilter<"SyncJob"> | string | null
    metadata?: JsonNullableFilter<"SyncJob">
    startedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    createdAt?: DateTimeFilter<"SyncJob"> | Date | string
    updatedAt?: DateTimeFilter<"SyncJob"> | Date | string
    codebaseId?: StringNullableFilter<"SyncJob"> | string | null
    userId?: StringNullableFilter<"SyncJob"> | string | null
    codebase?: XOR<CodebaseNullableRelationFilter, CodebaseWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    indexHistory?: IndexHistoryListRelationFilter
  }

  export type SyncJobOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    message?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    codebase?: CodebaseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    indexHistory?: IndexHistoryOrderByRelationAggregateInput
  }

  export type SyncJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SyncJobWhereInput | SyncJobWhereInput[]
    OR?: SyncJobWhereInput[]
    NOT?: SyncJobWhereInput | SyncJobWhereInput[]
    type?: EnumSyncJobTypeFilter<"SyncJob"> | $Enums.SyncJobType
    status?: EnumSyncJobStatusFilter<"SyncJob"> | $Enums.SyncJobStatus
    priority?: IntFilter<"SyncJob"> | number
    progress?: IntFilter<"SyncJob"> | number
    message?: StringNullableFilter<"SyncJob"> | string | null
    error?: StringNullableFilter<"SyncJob"> | string | null
    metadata?: JsonNullableFilter<"SyncJob">
    startedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    createdAt?: DateTimeFilter<"SyncJob"> | Date | string
    updatedAt?: DateTimeFilter<"SyncJob"> | Date | string
    codebaseId?: StringNullableFilter<"SyncJob"> | string | null
    userId?: StringNullableFilter<"SyncJob"> | string | null
    codebase?: XOR<CodebaseNullableRelationFilter, CodebaseWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    indexHistory?: IndexHistoryListRelationFilter
  }, "id">

  export type SyncJobOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    message?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: SyncJobCountOrderByAggregateInput
    _avg?: SyncJobAvgOrderByAggregateInput
    _max?: SyncJobMaxOrderByAggregateInput
    _min?: SyncJobMinOrderByAggregateInput
    _sum?: SyncJobSumOrderByAggregateInput
  }

  export type SyncJobScalarWhereWithAggregatesInput = {
    AND?: SyncJobScalarWhereWithAggregatesInput | SyncJobScalarWhereWithAggregatesInput[]
    OR?: SyncJobScalarWhereWithAggregatesInput[]
    NOT?: SyncJobScalarWhereWithAggregatesInput | SyncJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SyncJob"> | string
    type?: EnumSyncJobTypeWithAggregatesFilter<"SyncJob"> | $Enums.SyncJobType
    status?: EnumSyncJobStatusWithAggregatesFilter<"SyncJob"> | $Enums.SyncJobStatus
    priority?: IntWithAggregatesFilter<"SyncJob"> | number
    progress?: IntWithAggregatesFilter<"SyncJob"> | number
    message?: StringNullableWithAggregatesFilter<"SyncJob"> | string | null
    error?: StringNullableWithAggregatesFilter<"SyncJob"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"SyncJob">
    startedAt?: DateTimeNullableWithAggregatesFilter<"SyncJob"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"SyncJob"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SyncJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SyncJob"> | Date | string
    codebaseId?: StringNullableWithAggregatesFilter<"SyncJob"> | string | null
    userId?: StringNullableWithAggregatesFilter<"SyncJob"> | string | null
  }

  export type IndexHistoryWhereInput = {
    AND?: IndexHistoryWhereInput | IndexHistoryWhereInput[]
    OR?: IndexHistoryWhereInput[]
    NOT?: IndexHistoryWhereInput | IndexHistoryWhereInput[]
    id?: StringFilter<"IndexHistory"> | string
    taskType?: EnumIndexTaskTypeFilter<"IndexHistory"> | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFilter<"IndexHistory"> | $Enums.IndexTaskStatus
    totalFiles?: IntFilter<"IndexHistory"> | number
    processedFiles?: IntFilter<"IndexHistory"> | number
    failedFiles?: IntFilter<"IndexHistory"> | number
    ignoredFiles?: IntFilter<"IndexHistory"> | number
    startTime?: DateTimeNullableFilter<"IndexHistory"> | Date | string | null
    endTime?: DateTimeNullableFilter<"IndexHistory"> | Date | string | null
    durationMs?: IntNullableFilter<"IndexHistory"> | number | null
    errorMessage?: StringNullableFilter<"IndexHistory"> | string | null
    metadata?: JsonNullableFilter<"IndexHistory">
    createdAt?: DateTimeFilter<"IndexHistory"> | Date | string
    updatedAt?: DateTimeFilter<"IndexHistory"> | Date | string
    codebaseId?: StringFilter<"IndexHistory"> | string
    syncJobId?: StringNullableFilter<"IndexHistory"> | string | null
    fileId?: StringNullableFilter<"IndexHistory"> | string | null
    codebase?: XOR<CodebaseRelationFilter, CodebaseWhereInput>
    syncJob?: XOR<SyncJobNullableRelationFilter, SyncJobWhereInput> | null
    file?: XOR<FileNullableRelationFilter, FileWhereInput> | null
  }

  export type IndexHistoryOrderByWithRelationInput = {
    id?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    totalFiles?: SortOrder
    processedFiles?: SortOrder
    failedFiles?: SortOrder
    ignoredFiles?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    durationMs?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    syncJobId?: SortOrderInput | SortOrder
    fileId?: SortOrderInput | SortOrder
    codebase?: CodebaseOrderByWithRelationInput
    syncJob?: SyncJobOrderByWithRelationInput
    file?: FileOrderByWithRelationInput
  }

  export type IndexHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IndexHistoryWhereInput | IndexHistoryWhereInput[]
    OR?: IndexHistoryWhereInput[]
    NOT?: IndexHistoryWhereInput | IndexHistoryWhereInput[]
    taskType?: EnumIndexTaskTypeFilter<"IndexHistory"> | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFilter<"IndexHistory"> | $Enums.IndexTaskStatus
    totalFiles?: IntFilter<"IndexHistory"> | number
    processedFiles?: IntFilter<"IndexHistory"> | number
    failedFiles?: IntFilter<"IndexHistory"> | number
    ignoredFiles?: IntFilter<"IndexHistory"> | number
    startTime?: DateTimeNullableFilter<"IndexHistory"> | Date | string | null
    endTime?: DateTimeNullableFilter<"IndexHistory"> | Date | string | null
    durationMs?: IntNullableFilter<"IndexHistory"> | number | null
    errorMessage?: StringNullableFilter<"IndexHistory"> | string | null
    metadata?: JsonNullableFilter<"IndexHistory">
    createdAt?: DateTimeFilter<"IndexHistory"> | Date | string
    updatedAt?: DateTimeFilter<"IndexHistory"> | Date | string
    codebaseId?: StringFilter<"IndexHistory"> | string
    syncJobId?: StringNullableFilter<"IndexHistory"> | string | null
    fileId?: StringNullableFilter<"IndexHistory"> | string | null
    codebase?: XOR<CodebaseRelationFilter, CodebaseWhereInput>
    syncJob?: XOR<SyncJobNullableRelationFilter, SyncJobWhereInput> | null
    file?: XOR<FileNullableRelationFilter, FileWhereInput> | null
  }, "id">

  export type IndexHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    totalFiles?: SortOrder
    processedFiles?: SortOrder
    failedFiles?: SortOrder
    ignoredFiles?: SortOrder
    startTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    durationMs?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    syncJobId?: SortOrderInput | SortOrder
    fileId?: SortOrderInput | SortOrder
    _count?: IndexHistoryCountOrderByAggregateInput
    _avg?: IndexHistoryAvgOrderByAggregateInput
    _max?: IndexHistoryMaxOrderByAggregateInput
    _min?: IndexHistoryMinOrderByAggregateInput
    _sum?: IndexHistorySumOrderByAggregateInput
  }

  export type IndexHistoryScalarWhereWithAggregatesInput = {
    AND?: IndexHistoryScalarWhereWithAggregatesInput | IndexHistoryScalarWhereWithAggregatesInput[]
    OR?: IndexHistoryScalarWhereWithAggregatesInput[]
    NOT?: IndexHistoryScalarWhereWithAggregatesInput | IndexHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IndexHistory"> | string
    taskType?: EnumIndexTaskTypeWithAggregatesFilter<"IndexHistory"> | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusWithAggregatesFilter<"IndexHistory"> | $Enums.IndexTaskStatus
    totalFiles?: IntWithAggregatesFilter<"IndexHistory"> | number
    processedFiles?: IntWithAggregatesFilter<"IndexHistory"> | number
    failedFiles?: IntWithAggregatesFilter<"IndexHistory"> | number
    ignoredFiles?: IntWithAggregatesFilter<"IndexHistory"> | number
    startTime?: DateTimeNullableWithAggregatesFilter<"IndexHistory"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"IndexHistory"> | Date | string | null
    durationMs?: IntNullableWithAggregatesFilter<"IndexHistory"> | number | null
    errorMessage?: StringNullableWithAggregatesFilter<"IndexHistory"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"IndexHistory">
    createdAt?: DateTimeWithAggregatesFilter<"IndexHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"IndexHistory"> | Date | string
    codebaseId?: StringWithAggregatesFilter<"IndexHistory"> | string
    syncJobId?: StringNullableWithAggregatesFilter<"IndexHistory"> | string | null
    fileId?: StringNullableWithAggregatesFilter<"IndexHistory"> | string | null
  }

  export type CodegraphConfigWhereInput = {
    AND?: CodegraphConfigWhereInput | CodegraphConfigWhereInput[]
    OR?: CodegraphConfigWhereInput[]
    NOT?: CodegraphConfigWhereInput | CodegraphConfigWhereInput[]
    id?: StringFilter<"CodegraphConfig"> | string
    scipEnabled?: BoolFilter<"CodegraphConfig"> | boolean
    treeSitterEnabled?: BoolFilter<"CodegraphConfig"> | boolean
    embeddingEnabled?: BoolFilter<"CodegraphConfig"> | boolean
    maxConcurrency?: IntFilter<"CodegraphConfig"> | number
    scipTimeout?: IntFilter<"CodegraphConfig"> | number
    parseTimeout?: IntFilter<"CodegraphConfig"> | number
    chunkSize?: IntFilter<"CodegraphConfig"> | number
    chunkOverlap?: IntFilter<"CodegraphConfig"> | number
    maxTokens?: IntFilter<"CodegraphConfig"> | number
    badgerDbPath?: StringNullableFilter<"CodegraphConfig"> | string | null
    scipToolsPath?: JsonNullableFilter<"CodegraphConfig">
    languageConfig?: JsonNullableFilter<"CodegraphConfig">
    createdAt?: DateTimeFilter<"CodegraphConfig"> | Date | string
    updatedAt?: DateTimeFilter<"CodegraphConfig"> | Date | string
    codebaseId?: StringFilter<"CodegraphConfig"> | string
    codebase?: XOR<CodebaseRelationFilter, CodebaseWhereInput>
  }

  export type CodegraphConfigOrderByWithRelationInput = {
    id?: SortOrder
    scipEnabled?: SortOrder
    treeSitterEnabled?: SortOrder
    embeddingEnabled?: SortOrder
    maxConcurrency?: SortOrder
    scipTimeout?: SortOrder
    parseTimeout?: SortOrder
    chunkSize?: SortOrder
    chunkOverlap?: SortOrder
    maxTokens?: SortOrder
    badgerDbPath?: SortOrderInput | SortOrder
    scipToolsPath?: SortOrderInput | SortOrder
    languageConfig?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    codebase?: CodebaseOrderByWithRelationInput
  }

  export type CodegraphConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    codebaseId?: string
    AND?: CodegraphConfigWhereInput | CodegraphConfigWhereInput[]
    OR?: CodegraphConfigWhereInput[]
    NOT?: CodegraphConfigWhereInput | CodegraphConfigWhereInput[]
    scipEnabled?: BoolFilter<"CodegraphConfig"> | boolean
    treeSitterEnabled?: BoolFilter<"CodegraphConfig"> | boolean
    embeddingEnabled?: BoolFilter<"CodegraphConfig"> | boolean
    maxConcurrency?: IntFilter<"CodegraphConfig"> | number
    scipTimeout?: IntFilter<"CodegraphConfig"> | number
    parseTimeout?: IntFilter<"CodegraphConfig"> | number
    chunkSize?: IntFilter<"CodegraphConfig"> | number
    chunkOverlap?: IntFilter<"CodegraphConfig"> | number
    maxTokens?: IntFilter<"CodegraphConfig"> | number
    badgerDbPath?: StringNullableFilter<"CodegraphConfig"> | string | null
    scipToolsPath?: JsonNullableFilter<"CodegraphConfig">
    languageConfig?: JsonNullableFilter<"CodegraphConfig">
    createdAt?: DateTimeFilter<"CodegraphConfig"> | Date | string
    updatedAt?: DateTimeFilter<"CodegraphConfig"> | Date | string
    codebase?: XOR<CodebaseRelationFilter, CodebaseWhereInput>
  }, "id" | "codebaseId">

  export type CodegraphConfigOrderByWithAggregationInput = {
    id?: SortOrder
    scipEnabled?: SortOrder
    treeSitterEnabled?: SortOrder
    embeddingEnabled?: SortOrder
    maxConcurrency?: SortOrder
    scipTimeout?: SortOrder
    parseTimeout?: SortOrder
    chunkSize?: SortOrder
    chunkOverlap?: SortOrder
    maxTokens?: SortOrder
    badgerDbPath?: SortOrderInput | SortOrder
    scipToolsPath?: SortOrderInput | SortOrder
    languageConfig?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    _count?: CodegraphConfigCountOrderByAggregateInput
    _avg?: CodegraphConfigAvgOrderByAggregateInput
    _max?: CodegraphConfigMaxOrderByAggregateInput
    _min?: CodegraphConfigMinOrderByAggregateInput
    _sum?: CodegraphConfigSumOrderByAggregateInput
  }

  export type CodegraphConfigScalarWhereWithAggregatesInput = {
    AND?: CodegraphConfigScalarWhereWithAggregatesInput | CodegraphConfigScalarWhereWithAggregatesInput[]
    OR?: CodegraphConfigScalarWhereWithAggregatesInput[]
    NOT?: CodegraphConfigScalarWhereWithAggregatesInput | CodegraphConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CodegraphConfig"> | string
    scipEnabled?: BoolWithAggregatesFilter<"CodegraphConfig"> | boolean
    treeSitterEnabled?: BoolWithAggregatesFilter<"CodegraphConfig"> | boolean
    embeddingEnabled?: BoolWithAggregatesFilter<"CodegraphConfig"> | boolean
    maxConcurrency?: IntWithAggregatesFilter<"CodegraphConfig"> | number
    scipTimeout?: IntWithAggregatesFilter<"CodegraphConfig"> | number
    parseTimeout?: IntWithAggregatesFilter<"CodegraphConfig"> | number
    chunkSize?: IntWithAggregatesFilter<"CodegraphConfig"> | number
    chunkOverlap?: IntWithAggregatesFilter<"CodegraphConfig"> | number
    maxTokens?: IntWithAggregatesFilter<"CodegraphConfig"> | number
    badgerDbPath?: StringNullableWithAggregatesFilter<"CodegraphConfig"> | string | null
    scipToolsPath?: JsonNullableWithAggregatesFilter<"CodegraphConfig">
    languageConfig?: JsonNullableWithAggregatesFilter<"CodegraphConfig">
    createdAt?: DateTimeWithAggregatesFilter<"CodegraphConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CodegraphConfig"> | Date | string
    codebaseId?: StringWithAggregatesFilter<"CodegraphConfig"> | string
  }

  export type VectorEmbeddingWhereInput = {
    AND?: VectorEmbeddingWhereInput | VectorEmbeddingWhereInput[]
    OR?: VectorEmbeddingWhereInput[]
    NOT?: VectorEmbeddingWhereInput | VectorEmbeddingWhereInput[]
    id?: StringFilter<"VectorEmbedding"> | string
    content?: StringFilter<"VectorEmbedding"> | string
    filePath?: StringFilter<"VectorEmbedding"> | string
    chunkIndex?: IntFilter<"VectorEmbedding"> | number
    startLine?: IntFilter<"VectorEmbedding"> | number
    endLine?: IntFilter<"VectorEmbedding"> | number
    startColumn?: IntNullableFilter<"VectorEmbedding"> | number | null
    endColumn?: IntNullableFilter<"VectorEmbedding"> | number | null
    tokenCount?: IntFilter<"VectorEmbedding"> | number
    embedding?: JsonFilter<"VectorEmbedding">
    metadata?: JsonNullableFilter<"VectorEmbedding">
    createdAt?: DateTimeFilter<"VectorEmbedding"> | Date | string
    updatedAt?: DateTimeFilter<"VectorEmbedding"> | Date | string
    codebaseId?: StringFilter<"VectorEmbedding"> | string
    codebase?: XOR<CodebaseRelationFilter, CodebaseWhereInput>
  }

  export type VectorEmbeddingOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    filePath?: SortOrder
    chunkIndex?: SortOrder
    startLine?: SortOrder
    endLine?: SortOrder
    startColumn?: SortOrderInput | SortOrder
    endColumn?: SortOrderInput | SortOrder
    tokenCount?: SortOrder
    embedding?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    codebase?: CodebaseOrderByWithRelationInput
  }

  export type VectorEmbeddingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    codebaseId_filePath_chunkIndex?: VectorEmbeddingCodebaseIdFilePathChunkIndexCompoundUniqueInput
    AND?: VectorEmbeddingWhereInput | VectorEmbeddingWhereInput[]
    OR?: VectorEmbeddingWhereInput[]
    NOT?: VectorEmbeddingWhereInput | VectorEmbeddingWhereInput[]
    content?: StringFilter<"VectorEmbedding"> | string
    filePath?: StringFilter<"VectorEmbedding"> | string
    chunkIndex?: IntFilter<"VectorEmbedding"> | number
    startLine?: IntFilter<"VectorEmbedding"> | number
    endLine?: IntFilter<"VectorEmbedding"> | number
    startColumn?: IntNullableFilter<"VectorEmbedding"> | number | null
    endColumn?: IntNullableFilter<"VectorEmbedding"> | number | null
    tokenCount?: IntFilter<"VectorEmbedding"> | number
    embedding?: JsonFilter<"VectorEmbedding">
    metadata?: JsonNullableFilter<"VectorEmbedding">
    createdAt?: DateTimeFilter<"VectorEmbedding"> | Date | string
    updatedAt?: DateTimeFilter<"VectorEmbedding"> | Date | string
    codebaseId?: StringFilter<"VectorEmbedding"> | string
    codebase?: XOR<CodebaseRelationFilter, CodebaseWhereInput>
  }, "id" | "codebaseId_filePath_chunkIndex">

  export type VectorEmbeddingOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    filePath?: SortOrder
    chunkIndex?: SortOrder
    startLine?: SortOrder
    endLine?: SortOrder
    startColumn?: SortOrderInput | SortOrder
    endColumn?: SortOrderInput | SortOrder
    tokenCount?: SortOrder
    embedding?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    _count?: VectorEmbeddingCountOrderByAggregateInput
    _avg?: VectorEmbeddingAvgOrderByAggregateInput
    _max?: VectorEmbeddingMaxOrderByAggregateInput
    _min?: VectorEmbeddingMinOrderByAggregateInput
    _sum?: VectorEmbeddingSumOrderByAggregateInput
  }

  export type VectorEmbeddingScalarWhereWithAggregatesInput = {
    AND?: VectorEmbeddingScalarWhereWithAggregatesInput | VectorEmbeddingScalarWhereWithAggregatesInput[]
    OR?: VectorEmbeddingScalarWhereWithAggregatesInput[]
    NOT?: VectorEmbeddingScalarWhereWithAggregatesInput | VectorEmbeddingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VectorEmbedding"> | string
    content?: StringWithAggregatesFilter<"VectorEmbedding"> | string
    filePath?: StringWithAggregatesFilter<"VectorEmbedding"> | string
    chunkIndex?: IntWithAggregatesFilter<"VectorEmbedding"> | number
    startLine?: IntWithAggregatesFilter<"VectorEmbedding"> | number
    endLine?: IntWithAggregatesFilter<"VectorEmbedding"> | number
    startColumn?: IntNullableWithAggregatesFilter<"VectorEmbedding"> | number | null
    endColumn?: IntNullableWithAggregatesFilter<"VectorEmbedding"> | number | null
    tokenCount?: IntWithAggregatesFilter<"VectorEmbedding"> | number
    embedding?: JsonWithAggregatesFilter<"VectorEmbedding">
    metadata?: JsonNullableWithAggregatesFilter<"VectorEmbedding">
    createdAt?: DateTimeWithAggregatesFilter<"VectorEmbedding"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VectorEmbedding"> | Date | string
    codebaseId?: StringWithAggregatesFilter<"VectorEmbedding"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectMemberCreateNestedManyWithoutUserInput
    syncJobs?: SyncJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    syncJobs?: SyncJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectMemberUpdateManyWithoutUserNestedInput
    syncJobs?: SyncJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    syncJobs?: SyncJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    status?: $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    codebases?: CodebaseCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    status?: $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    codebases?: CodebaseUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    codebases?: CodebaseUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    codebases?: CodebaseUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    status?: $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectMemberCreateInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutProjectsInput
    project: ProjectCreateNestedOneWithoutMembersInput
  }

  export type ProjectMemberUncheckedCreateInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    userId: string
    projectId: string
  }

  export type ProjectMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    project?: ProjectUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberCreateManyInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    userId: string
    projectId: string
  }

  export type ProjectMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CodebaseCreateInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutCodebasesInput
    files?: FileCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    files?: FileUncheckedCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobUncheckedCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigUncheckedCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingUncheckedCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutCodebasesNestedInput
    files?: FileUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    files?: FileUncheckedUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUncheckedUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUncheckedUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUncheckedUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type CodebaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodebaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type FileCreateInput = {
    id?: string
    path: string
    hash: string
    size: number
    language?: string | null
    status?: $Enums.FileStatus
    lastModified?: Date | string | null
    lineCount?: number
    storageKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase: CodebaseCreateNestedOneWithoutFilesInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    path: string
    hash: string
    size: number
    language?: string | null
    status?: $Enums.FileStatus
    lastModified?: Date | string | null
    lineCount?: number
    storageKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneRequiredWithoutFilesNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutFileNestedInput
  }

  export type FileCreateManyInput = {
    id?: string
    path: string
    hash: string
    size: number
    language?: string | null
    status?: $Enums.FileStatus
    lastModified?: Date | string | null
    lineCount?: number
    storageKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
  }

  export type SyncJobCreateInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase?: CodebaseCreateNestedOneWithoutSyncJobsInput
    user?: UserCreateNestedOneWithoutSyncJobsInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutSyncJobInput
  }

  export type SyncJobUncheckedCreateInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId?: string | null
    userId?: string | null
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutSyncJobInput
  }

  export type SyncJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneWithoutSyncJobsNestedInput
    user?: UserUpdateOneWithoutSyncJobsNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutSyncJobNestedInput
  }

  export type SyncJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutSyncJobNestedInput
  }

  export type SyncJobCreateManyInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId?: string | null
    userId?: string | null
  }

  export type SyncJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IndexHistoryCreateInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase: CodebaseCreateNestedOneWithoutIndexHistoryInput
    syncJob?: SyncJobCreateNestedOneWithoutIndexHistoryInput
    file?: FileCreateNestedOneWithoutIndexHistoryInput
  }

  export type IndexHistoryUncheckedCreateInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
    syncJobId?: string | null
    fileId?: string | null
  }

  export type IndexHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneRequiredWithoutIndexHistoryNestedInput
    syncJob?: SyncJobUpdateOneWithoutIndexHistoryNestedInput
    file?: FileUpdateOneWithoutIndexHistoryNestedInput
  }

  export type IndexHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IndexHistoryCreateManyInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
    syncJobId?: string | null
    fileId?: string | null
  }

  export type IndexHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndexHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CodegraphConfigCreateInput = {
    id?: string
    scipEnabled?: boolean
    treeSitterEnabled?: boolean
    embeddingEnabled?: boolean
    maxConcurrency?: number
    scipTimeout?: number
    parseTimeout?: number
    chunkSize?: number
    chunkOverlap?: number
    maxTokens?: number
    badgerDbPath?: string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase: CodebaseCreateNestedOneWithoutCodegraphConfigInput
  }

  export type CodegraphConfigUncheckedCreateInput = {
    id?: string
    scipEnabled?: boolean
    treeSitterEnabled?: boolean
    embeddingEnabled?: boolean
    maxConcurrency?: number
    scipTimeout?: number
    parseTimeout?: number
    chunkSize?: number
    chunkOverlap?: number
    maxTokens?: number
    badgerDbPath?: string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
  }

  export type CodegraphConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scipEnabled?: BoolFieldUpdateOperationsInput | boolean
    treeSitterEnabled?: BoolFieldUpdateOperationsInput | boolean
    embeddingEnabled?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrency?: IntFieldUpdateOperationsInput | number
    scipTimeout?: IntFieldUpdateOperationsInput | number
    parseTimeout?: IntFieldUpdateOperationsInput | number
    chunkSize?: IntFieldUpdateOperationsInput | number
    chunkOverlap?: IntFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    badgerDbPath?: NullableStringFieldUpdateOperationsInput | string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneRequiredWithoutCodegraphConfigNestedInput
  }

  export type CodegraphConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scipEnabled?: BoolFieldUpdateOperationsInput | boolean
    treeSitterEnabled?: BoolFieldUpdateOperationsInput | boolean
    embeddingEnabled?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrency?: IntFieldUpdateOperationsInput | number
    scipTimeout?: IntFieldUpdateOperationsInput | number
    parseTimeout?: IntFieldUpdateOperationsInput | number
    chunkSize?: IntFieldUpdateOperationsInput | number
    chunkOverlap?: IntFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    badgerDbPath?: NullableStringFieldUpdateOperationsInput | string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
  }

  export type CodegraphConfigCreateManyInput = {
    id?: string
    scipEnabled?: boolean
    treeSitterEnabled?: boolean
    embeddingEnabled?: boolean
    maxConcurrency?: number
    scipTimeout?: number
    parseTimeout?: number
    chunkSize?: number
    chunkOverlap?: number
    maxTokens?: number
    badgerDbPath?: string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
  }

  export type CodegraphConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scipEnabled?: BoolFieldUpdateOperationsInput | boolean
    treeSitterEnabled?: BoolFieldUpdateOperationsInput | boolean
    embeddingEnabled?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrency?: IntFieldUpdateOperationsInput | number
    scipTimeout?: IntFieldUpdateOperationsInput | number
    parseTimeout?: IntFieldUpdateOperationsInput | number
    chunkSize?: IntFieldUpdateOperationsInput | number
    chunkOverlap?: IntFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    badgerDbPath?: NullableStringFieldUpdateOperationsInput | string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodegraphConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scipEnabled?: BoolFieldUpdateOperationsInput | boolean
    treeSitterEnabled?: BoolFieldUpdateOperationsInput | boolean
    embeddingEnabled?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrency?: IntFieldUpdateOperationsInput | number
    scipTimeout?: IntFieldUpdateOperationsInput | number
    parseTimeout?: IntFieldUpdateOperationsInput | number
    chunkSize?: IntFieldUpdateOperationsInput | number
    chunkOverlap?: IntFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    badgerDbPath?: NullableStringFieldUpdateOperationsInput | string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
  }

  export type VectorEmbeddingCreateInput = {
    id?: string
    content: string
    filePath: string
    chunkIndex: number
    startLine: number
    endLine: number
    startColumn?: number | null
    endColumn?: number | null
    tokenCount: number
    embedding: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase: CodebaseCreateNestedOneWithoutVectorEmbeddingsInput
  }

  export type VectorEmbeddingUncheckedCreateInput = {
    id?: string
    content: string
    filePath: string
    chunkIndex: number
    startLine: number
    endLine: number
    startColumn?: number | null
    endColumn?: number | null
    tokenCount: number
    embedding: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
  }

  export type VectorEmbeddingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    startLine?: IntFieldUpdateOperationsInput | number
    endLine?: IntFieldUpdateOperationsInput | number
    startColumn?: NullableIntFieldUpdateOperationsInput | number | null
    endColumn?: NullableIntFieldUpdateOperationsInput | number | null
    tokenCount?: IntFieldUpdateOperationsInput | number
    embedding?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneRequiredWithoutVectorEmbeddingsNestedInput
  }

  export type VectorEmbeddingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    startLine?: IntFieldUpdateOperationsInput | number
    endLine?: IntFieldUpdateOperationsInput | number
    startColumn?: NullableIntFieldUpdateOperationsInput | number | null
    endColumn?: NullableIntFieldUpdateOperationsInput | number | null
    tokenCount?: IntFieldUpdateOperationsInput | number
    embedding?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
  }

  export type VectorEmbeddingCreateManyInput = {
    id?: string
    content: string
    filePath: string
    chunkIndex: number
    startLine: number
    endLine: number
    startColumn?: number | null
    endColumn?: number | null
    tokenCount: number
    embedding: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
  }

  export type VectorEmbeddingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    startLine?: IntFieldUpdateOperationsInput | number
    endLine?: IntFieldUpdateOperationsInput | number
    startColumn?: NullableIntFieldUpdateOperationsInput | number | null
    endColumn?: NullableIntFieldUpdateOperationsInput | number | null
    tokenCount?: IntFieldUpdateOperationsInput | number
    embedding?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VectorEmbeddingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    startLine?: IntFieldUpdateOperationsInput | number
    endLine?: IntFieldUpdateOperationsInput | number
    startColumn?: NullableIntFieldUpdateOperationsInput | number | null
    endColumn?: NullableIntFieldUpdateOperationsInput | number | null
    tokenCount?: IntFieldUpdateOperationsInput | number
    embedding?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProjectMemberListRelationFilter = {
    every?: ProjectMemberWhereInput
    some?: ProjectMemberWhereInput
    none?: ProjectMemberWhereInput
  }

  export type SyncJobListRelationFilter = {
    every?: SyncJobWhereInput
    some?: SyncJobWhereInput
    none?: SyncJobWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProjectMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SyncJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CodebaseListRelationFilter = {
    every?: CodebaseWhereInput
    some?: CodebaseWhereInput
    none?: CodebaseWhereInput
  }

  export type CodebaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumProjectMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectMemberRole | EnumProjectMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectMemberRole[] | ListEnumProjectMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectMemberRole[] | ListEnumProjectMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectMemberRoleFilter<$PrismaModel> | $Enums.ProjectMemberRole
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type ProjectMemberUserIdProjectIdCompoundUniqueInput = {
    userId: string
    projectId: string
  }

  export type ProjectMemberCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type EnumProjectMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectMemberRole | EnumProjectMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectMemberRole[] | ListEnumProjectMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectMemberRole[] | ListEnumProjectMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.ProjectMemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumProjectMemberRoleFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumCodebaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CodebaseStatus | EnumCodebaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CodebaseStatus[] | ListEnumCodebaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CodebaseStatus[] | ListEnumCodebaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCodebaseStatusFilter<$PrismaModel> | $Enums.CodebaseStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type IndexHistoryListRelationFilter = {
    every?: IndexHistoryWhereInput
    some?: IndexHistoryWhereInput
    none?: IndexHistoryWhereInput
  }

  export type CodegraphConfigNullableRelationFilter = {
    is?: CodegraphConfigWhereInput | null
    isNot?: CodegraphConfigWhereInput | null
  }

  export type VectorEmbeddingListRelationFilter = {
    every?: VectorEmbeddingWhereInput
    some?: VectorEmbeddingWhereInput
    none?: VectorEmbeddingWhereInput
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IndexHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VectorEmbeddingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CodebaseProjectIdGitlabUrlCompoundUniqueInput = {
    projectId: string
    gitlabUrl: string
  }

  export type CodebaseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    gitlabUrl?: SortOrder
    gitlabProjectId?: SortOrder
    branch?: SortOrder
    language?: SortOrder
    status?: SortOrder
    lastSyncAt?: SortOrder
    totalFiles?: SortOrder
    totalLines?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type CodebaseAvgOrderByAggregateInput = {
    gitlabProjectId?: SortOrder
    totalFiles?: SortOrder
    totalLines?: SortOrder
  }

  export type CodebaseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    gitlabUrl?: SortOrder
    gitlabProjectId?: SortOrder
    branch?: SortOrder
    language?: SortOrder
    status?: SortOrder
    lastSyncAt?: SortOrder
    totalFiles?: SortOrder
    totalLines?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type CodebaseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    gitlabUrl?: SortOrder
    gitlabProjectId?: SortOrder
    branch?: SortOrder
    language?: SortOrder
    status?: SortOrder
    lastSyncAt?: SortOrder
    totalFiles?: SortOrder
    totalLines?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type CodebaseSumOrderByAggregateInput = {
    gitlabProjectId?: SortOrder
    totalFiles?: SortOrder
    totalLines?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumCodebaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CodebaseStatus | EnumCodebaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CodebaseStatus[] | ListEnumCodebaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CodebaseStatus[] | ListEnumCodebaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCodebaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CodebaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCodebaseStatusFilter<$PrismaModel>
    _max?: NestedEnumCodebaseStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumFileStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FileStatus | EnumFileStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FileStatus[] | ListEnumFileStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileStatus[] | ListEnumFileStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFileStatusFilter<$PrismaModel> | $Enums.FileStatus
  }

  export type CodebaseRelationFilter = {
    is?: CodebaseWhereInput
    isNot?: CodebaseWhereInput
  }

  export type FileCodebaseIdPathCompoundUniqueInput = {
    codebaseId: string
    path: string
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    hash?: SortOrder
    size?: SortOrder
    language?: SortOrder
    status?: SortOrder
    lastModified?: SortOrder
    lineCount?: SortOrder
    storageKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
    lineCount?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    hash?: SortOrder
    size?: SortOrder
    language?: SortOrder
    status?: SortOrder
    lastModified?: SortOrder
    lineCount?: SortOrder
    storageKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    hash?: SortOrder
    size?: SortOrder
    language?: SortOrder
    status?: SortOrder
    lastModified?: SortOrder
    lineCount?: SortOrder
    storageKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
    lineCount?: SortOrder
  }

  export type EnumFileStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileStatus | EnumFileStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FileStatus[] | ListEnumFileStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileStatus[] | ListEnumFileStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFileStatusWithAggregatesFilter<$PrismaModel> | $Enums.FileStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileStatusFilter<$PrismaModel>
    _max?: NestedEnumFileStatusFilter<$PrismaModel>
  }

  export type EnumSyncJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncJobType | EnumSyncJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SyncJobType[] | ListEnumSyncJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncJobType[] | ListEnumSyncJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncJobTypeFilter<$PrismaModel> | $Enums.SyncJobType
  }

  export type EnumSyncJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncJobStatus | EnumSyncJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncJobStatus[] | ListEnumSyncJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncJobStatus[] | ListEnumSyncJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncJobStatusFilter<$PrismaModel> | $Enums.SyncJobStatus
  }

  export type CodebaseNullableRelationFilter = {
    is?: CodebaseWhereInput | null
    isNot?: CodebaseWhereInput | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SyncJobCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    message?: SortOrder
    error?: SortOrder
    metadata?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    userId?: SortOrder
  }

  export type SyncJobAvgOrderByAggregateInput = {
    priority?: SortOrder
    progress?: SortOrder
  }

  export type SyncJobMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    message?: SortOrder
    error?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    userId?: SortOrder
  }

  export type SyncJobMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    progress?: SortOrder
    message?: SortOrder
    error?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    userId?: SortOrder
  }

  export type SyncJobSumOrderByAggregateInput = {
    priority?: SortOrder
    progress?: SortOrder
  }

  export type EnumSyncJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncJobType | EnumSyncJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SyncJobType[] | ListEnumSyncJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncJobType[] | ListEnumSyncJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.SyncJobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncJobTypeFilter<$PrismaModel>
    _max?: NestedEnumSyncJobTypeFilter<$PrismaModel>
  }

  export type EnumSyncJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncJobStatus | EnumSyncJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncJobStatus[] | ListEnumSyncJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncJobStatus[] | ListEnumSyncJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.SyncJobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncJobStatusFilter<$PrismaModel>
    _max?: NestedEnumSyncJobStatusFilter<$PrismaModel>
  }

  export type EnumIndexTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IndexTaskType | EnumIndexTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IndexTaskType[] | ListEnumIndexTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndexTaskType[] | ListEnumIndexTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIndexTaskTypeFilter<$PrismaModel> | $Enums.IndexTaskType
  }

  export type EnumIndexTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IndexTaskStatus | EnumIndexTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IndexTaskStatus[] | ListEnumIndexTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndexTaskStatus[] | ListEnumIndexTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIndexTaskStatusFilter<$PrismaModel> | $Enums.IndexTaskStatus
  }

  export type SyncJobNullableRelationFilter = {
    is?: SyncJobWhereInput | null
    isNot?: SyncJobWhereInput | null
  }

  export type FileNullableRelationFilter = {
    is?: FileWhereInput | null
    isNot?: FileWhereInput | null
  }

  export type IndexHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    totalFiles?: SortOrder
    processedFiles?: SortOrder
    failedFiles?: SortOrder
    ignoredFiles?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    durationMs?: SortOrder
    errorMessage?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    syncJobId?: SortOrder
    fileId?: SortOrder
  }

  export type IndexHistoryAvgOrderByAggregateInput = {
    totalFiles?: SortOrder
    processedFiles?: SortOrder
    failedFiles?: SortOrder
    ignoredFiles?: SortOrder
    durationMs?: SortOrder
  }

  export type IndexHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    totalFiles?: SortOrder
    processedFiles?: SortOrder
    failedFiles?: SortOrder
    ignoredFiles?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    durationMs?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    syncJobId?: SortOrder
    fileId?: SortOrder
  }

  export type IndexHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    taskType?: SortOrder
    status?: SortOrder
    totalFiles?: SortOrder
    processedFiles?: SortOrder
    failedFiles?: SortOrder
    ignoredFiles?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    durationMs?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
    syncJobId?: SortOrder
    fileId?: SortOrder
  }

  export type IndexHistorySumOrderByAggregateInput = {
    totalFiles?: SortOrder
    processedFiles?: SortOrder
    failedFiles?: SortOrder
    ignoredFiles?: SortOrder
    durationMs?: SortOrder
  }

  export type EnumIndexTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IndexTaskType | EnumIndexTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IndexTaskType[] | ListEnumIndexTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndexTaskType[] | ListEnumIndexTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIndexTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.IndexTaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndexTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumIndexTaskTypeFilter<$PrismaModel>
  }

  export type EnumIndexTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IndexTaskStatus | EnumIndexTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IndexTaskStatus[] | ListEnumIndexTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndexTaskStatus[] | ListEnumIndexTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIndexTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.IndexTaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndexTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumIndexTaskStatusFilter<$PrismaModel>
  }

  export type CodegraphConfigCountOrderByAggregateInput = {
    id?: SortOrder
    scipEnabled?: SortOrder
    treeSitterEnabled?: SortOrder
    embeddingEnabled?: SortOrder
    maxConcurrency?: SortOrder
    scipTimeout?: SortOrder
    parseTimeout?: SortOrder
    chunkSize?: SortOrder
    chunkOverlap?: SortOrder
    maxTokens?: SortOrder
    badgerDbPath?: SortOrder
    scipToolsPath?: SortOrder
    languageConfig?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type CodegraphConfigAvgOrderByAggregateInput = {
    maxConcurrency?: SortOrder
    scipTimeout?: SortOrder
    parseTimeout?: SortOrder
    chunkSize?: SortOrder
    chunkOverlap?: SortOrder
    maxTokens?: SortOrder
  }

  export type CodegraphConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    scipEnabled?: SortOrder
    treeSitterEnabled?: SortOrder
    embeddingEnabled?: SortOrder
    maxConcurrency?: SortOrder
    scipTimeout?: SortOrder
    parseTimeout?: SortOrder
    chunkSize?: SortOrder
    chunkOverlap?: SortOrder
    maxTokens?: SortOrder
    badgerDbPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type CodegraphConfigMinOrderByAggregateInput = {
    id?: SortOrder
    scipEnabled?: SortOrder
    treeSitterEnabled?: SortOrder
    embeddingEnabled?: SortOrder
    maxConcurrency?: SortOrder
    scipTimeout?: SortOrder
    parseTimeout?: SortOrder
    chunkSize?: SortOrder
    chunkOverlap?: SortOrder
    maxTokens?: SortOrder
    badgerDbPath?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type CodegraphConfigSumOrderByAggregateInput = {
    maxConcurrency?: SortOrder
    scipTimeout?: SortOrder
    parseTimeout?: SortOrder
    chunkSize?: SortOrder
    chunkOverlap?: SortOrder
    maxTokens?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type VectorEmbeddingCodebaseIdFilePathChunkIndexCompoundUniqueInput = {
    codebaseId: string
    filePath: string
    chunkIndex: number
  }

  export type VectorEmbeddingCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    filePath?: SortOrder
    chunkIndex?: SortOrder
    startLine?: SortOrder
    endLine?: SortOrder
    startColumn?: SortOrder
    endColumn?: SortOrder
    tokenCount?: SortOrder
    embedding?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type VectorEmbeddingAvgOrderByAggregateInput = {
    chunkIndex?: SortOrder
    startLine?: SortOrder
    endLine?: SortOrder
    startColumn?: SortOrder
    endColumn?: SortOrder
    tokenCount?: SortOrder
  }

  export type VectorEmbeddingMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    filePath?: SortOrder
    chunkIndex?: SortOrder
    startLine?: SortOrder
    endLine?: SortOrder
    startColumn?: SortOrder
    endColumn?: SortOrder
    tokenCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type VectorEmbeddingMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    filePath?: SortOrder
    chunkIndex?: SortOrder
    startLine?: SortOrder
    endLine?: SortOrder
    startColumn?: SortOrder
    endColumn?: SortOrder
    tokenCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    codebaseId?: SortOrder
  }

  export type VectorEmbeddingSumOrderByAggregateInput = {
    chunkIndex?: SortOrder
    startLine?: SortOrder
    endLine?: SortOrder
    startColumn?: SortOrder
    endColumn?: SortOrder
    tokenCount?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ProjectMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type SyncJobCreateNestedManyWithoutUserInput = {
    create?: XOR<SyncJobCreateWithoutUserInput, SyncJobUncheckedCreateWithoutUserInput> | SyncJobCreateWithoutUserInput[] | SyncJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncJobCreateOrConnectWithoutUserInput | SyncJobCreateOrConnectWithoutUserInput[]
    createMany?: SyncJobCreateManyUserInputEnvelope
    connect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
  }

  export type ProjectMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type SyncJobUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SyncJobCreateWithoutUserInput, SyncJobUncheckedCreateWithoutUserInput> | SyncJobCreateWithoutUserInput[] | SyncJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncJobCreateOrConnectWithoutUserInput | SyncJobCreateOrConnectWithoutUserInput[]
    createMany?: SyncJobCreateManyUserInputEnvelope
    connect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProjectMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutUserInput | ProjectMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutUserInput | ProjectMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutUserInput | ProjectMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type SyncJobUpdateManyWithoutUserNestedInput = {
    create?: XOR<SyncJobCreateWithoutUserInput, SyncJobUncheckedCreateWithoutUserInput> | SyncJobCreateWithoutUserInput[] | SyncJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncJobCreateOrConnectWithoutUserInput | SyncJobCreateOrConnectWithoutUserInput[]
    upsert?: SyncJobUpsertWithWhereUniqueWithoutUserInput | SyncJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SyncJobCreateManyUserInputEnvelope
    set?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    disconnect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    delete?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    connect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    update?: SyncJobUpdateWithWhereUniqueWithoutUserInput | SyncJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SyncJobUpdateManyWithWhereWithoutUserInput | SyncJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SyncJobScalarWhereInput | SyncJobScalarWhereInput[]
  }

  export type ProjectMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutUserInput | ProjectMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutUserInput | ProjectMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutUserInput | ProjectMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type SyncJobUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SyncJobCreateWithoutUserInput, SyncJobUncheckedCreateWithoutUserInput> | SyncJobCreateWithoutUserInput[] | SyncJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SyncJobCreateOrConnectWithoutUserInput | SyncJobCreateOrConnectWithoutUserInput[]
    upsert?: SyncJobUpsertWithWhereUniqueWithoutUserInput | SyncJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SyncJobCreateManyUserInputEnvelope
    set?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    disconnect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    delete?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    connect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    update?: SyncJobUpdateWithWhereUniqueWithoutUserInput | SyncJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SyncJobUpdateManyWithWhereWithoutUserInput | SyncJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SyncJobScalarWhereInput | SyncJobScalarWhereInput[]
  }

  export type ProjectMemberCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type CodebaseCreateNestedManyWithoutProjectInput = {
    create?: XOR<CodebaseCreateWithoutProjectInput, CodebaseUncheckedCreateWithoutProjectInput> | CodebaseCreateWithoutProjectInput[] | CodebaseUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CodebaseCreateOrConnectWithoutProjectInput | CodebaseCreateOrConnectWithoutProjectInput[]
    createMany?: CodebaseCreateManyProjectInputEnvelope
    connect?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
  }

  export type ProjectMemberUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type CodebaseUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CodebaseCreateWithoutProjectInput, CodebaseUncheckedCreateWithoutProjectInput> | CodebaseCreateWithoutProjectInput[] | CodebaseUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CodebaseCreateOrConnectWithoutProjectInput | CodebaseCreateOrConnectWithoutProjectInput[]
    createMany?: CodebaseCreateManyProjectInputEnvelope
    connect?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
  }

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStatus
  }

  export type ProjectMemberUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutProjectInput | ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutProjectInput | ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutProjectInput | ProjectMemberUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type CodebaseUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CodebaseCreateWithoutProjectInput, CodebaseUncheckedCreateWithoutProjectInput> | CodebaseCreateWithoutProjectInput[] | CodebaseUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CodebaseCreateOrConnectWithoutProjectInput | CodebaseCreateOrConnectWithoutProjectInput[]
    upsert?: CodebaseUpsertWithWhereUniqueWithoutProjectInput | CodebaseUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CodebaseCreateManyProjectInputEnvelope
    set?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
    disconnect?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
    delete?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
    connect?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
    update?: CodebaseUpdateWithWhereUniqueWithoutProjectInput | CodebaseUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CodebaseUpdateManyWithWhereWithoutProjectInput | CodebaseUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CodebaseScalarWhereInput | CodebaseScalarWhereInput[]
  }

  export type ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutProjectInput | ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutProjectInput | ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutProjectInput | ProjectMemberUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type CodebaseUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CodebaseCreateWithoutProjectInput, CodebaseUncheckedCreateWithoutProjectInput> | CodebaseCreateWithoutProjectInput[] | CodebaseUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CodebaseCreateOrConnectWithoutProjectInput | CodebaseCreateOrConnectWithoutProjectInput[]
    upsert?: CodebaseUpsertWithWhereUniqueWithoutProjectInput | CodebaseUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CodebaseCreateManyProjectInputEnvelope
    set?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
    disconnect?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
    delete?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
    connect?: CodebaseWhereUniqueInput | CodebaseWhereUniqueInput[]
    update?: CodebaseUpdateWithWhereUniqueWithoutProjectInput | CodebaseUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CodebaseUpdateManyWithWhereWithoutProjectInput | CodebaseUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CodebaseScalarWhereInput | CodebaseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutMembersInput = {
    create?: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMembersInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumProjectMemberRoleFieldUpdateOperationsInput = {
    set?: $Enums.ProjectMemberRole
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectsInput, UserUpdateWithoutProjectsInput>, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type ProjectUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMembersInput
    upsert?: ProjectUpsertWithoutMembersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutMembersInput, ProjectUpdateWithoutMembersInput>, ProjectUncheckedUpdateWithoutMembersInput>
  }

  export type ProjectCreateNestedOneWithoutCodebasesInput = {
    create?: XOR<ProjectCreateWithoutCodebasesInput, ProjectUncheckedCreateWithoutCodebasesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCodebasesInput
    connect?: ProjectWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutCodebaseInput = {
    create?: XOR<FileCreateWithoutCodebaseInput, FileUncheckedCreateWithoutCodebaseInput> | FileCreateWithoutCodebaseInput[] | FileUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCodebaseInput | FileCreateOrConnectWithoutCodebaseInput[]
    createMany?: FileCreateManyCodebaseInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type SyncJobCreateNestedManyWithoutCodebaseInput = {
    create?: XOR<SyncJobCreateWithoutCodebaseInput, SyncJobUncheckedCreateWithoutCodebaseInput> | SyncJobCreateWithoutCodebaseInput[] | SyncJobUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: SyncJobCreateOrConnectWithoutCodebaseInput | SyncJobCreateOrConnectWithoutCodebaseInput[]
    createMany?: SyncJobCreateManyCodebaseInputEnvelope
    connect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
  }

  export type IndexHistoryCreateNestedManyWithoutCodebaseInput = {
    create?: XOR<IndexHistoryCreateWithoutCodebaseInput, IndexHistoryUncheckedCreateWithoutCodebaseInput> | IndexHistoryCreateWithoutCodebaseInput[] | IndexHistoryUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutCodebaseInput | IndexHistoryCreateOrConnectWithoutCodebaseInput[]
    createMany?: IndexHistoryCreateManyCodebaseInputEnvelope
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
  }

  export type CodegraphConfigCreateNestedOneWithoutCodebaseInput = {
    create?: XOR<CodegraphConfigCreateWithoutCodebaseInput, CodegraphConfigUncheckedCreateWithoutCodebaseInput>
    connectOrCreate?: CodegraphConfigCreateOrConnectWithoutCodebaseInput
    connect?: CodegraphConfigWhereUniqueInput
  }

  export type VectorEmbeddingCreateNestedManyWithoutCodebaseInput = {
    create?: XOR<VectorEmbeddingCreateWithoutCodebaseInput, VectorEmbeddingUncheckedCreateWithoutCodebaseInput> | VectorEmbeddingCreateWithoutCodebaseInput[] | VectorEmbeddingUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: VectorEmbeddingCreateOrConnectWithoutCodebaseInput | VectorEmbeddingCreateOrConnectWithoutCodebaseInput[]
    createMany?: VectorEmbeddingCreateManyCodebaseInputEnvelope
    connect?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutCodebaseInput = {
    create?: XOR<FileCreateWithoutCodebaseInput, FileUncheckedCreateWithoutCodebaseInput> | FileCreateWithoutCodebaseInput[] | FileUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCodebaseInput | FileCreateOrConnectWithoutCodebaseInput[]
    createMany?: FileCreateManyCodebaseInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type SyncJobUncheckedCreateNestedManyWithoutCodebaseInput = {
    create?: XOR<SyncJobCreateWithoutCodebaseInput, SyncJobUncheckedCreateWithoutCodebaseInput> | SyncJobCreateWithoutCodebaseInput[] | SyncJobUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: SyncJobCreateOrConnectWithoutCodebaseInput | SyncJobCreateOrConnectWithoutCodebaseInput[]
    createMany?: SyncJobCreateManyCodebaseInputEnvelope
    connect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
  }

  export type IndexHistoryUncheckedCreateNestedManyWithoutCodebaseInput = {
    create?: XOR<IndexHistoryCreateWithoutCodebaseInput, IndexHistoryUncheckedCreateWithoutCodebaseInput> | IndexHistoryCreateWithoutCodebaseInput[] | IndexHistoryUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutCodebaseInput | IndexHistoryCreateOrConnectWithoutCodebaseInput[]
    createMany?: IndexHistoryCreateManyCodebaseInputEnvelope
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
  }

  export type CodegraphConfigUncheckedCreateNestedOneWithoutCodebaseInput = {
    create?: XOR<CodegraphConfigCreateWithoutCodebaseInput, CodegraphConfigUncheckedCreateWithoutCodebaseInput>
    connectOrCreate?: CodegraphConfigCreateOrConnectWithoutCodebaseInput
    connect?: CodegraphConfigWhereUniqueInput
  }

  export type VectorEmbeddingUncheckedCreateNestedManyWithoutCodebaseInput = {
    create?: XOR<VectorEmbeddingCreateWithoutCodebaseInput, VectorEmbeddingUncheckedCreateWithoutCodebaseInput> | VectorEmbeddingCreateWithoutCodebaseInput[] | VectorEmbeddingUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: VectorEmbeddingCreateOrConnectWithoutCodebaseInput | VectorEmbeddingCreateOrConnectWithoutCodebaseInput[]
    createMany?: VectorEmbeddingCreateManyCodebaseInputEnvelope
    connect?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumCodebaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.CodebaseStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateOneRequiredWithoutCodebasesNestedInput = {
    create?: XOR<ProjectCreateWithoutCodebasesInput, ProjectUncheckedCreateWithoutCodebasesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCodebasesInput
    upsert?: ProjectUpsertWithoutCodebasesInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCodebasesInput, ProjectUpdateWithoutCodebasesInput>, ProjectUncheckedUpdateWithoutCodebasesInput>
  }

  export type FileUpdateManyWithoutCodebaseNestedInput = {
    create?: XOR<FileCreateWithoutCodebaseInput, FileUncheckedCreateWithoutCodebaseInput> | FileCreateWithoutCodebaseInput[] | FileUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCodebaseInput | FileCreateOrConnectWithoutCodebaseInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutCodebaseInput | FileUpsertWithWhereUniqueWithoutCodebaseInput[]
    createMany?: FileCreateManyCodebaseInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutCodebaseInput | FileUpdateWithWhereUniqueWithoutCodebaseInput[]
    updateMany?: FileUpdateManyWithWhereWithoutCodebaseInput | FileUpdateManyWithWhereWithoutCodebaseInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type SyncJobUpdateManyWithoutCodebaseNestedInput = {
    create?: XOR<SyncJobCreateWithoutCodebaseInput, SyncJobUncheckedCreateWithoutCodebaseInput> | SyncJobCreateWithoutCodebaseInput[] | SyncJobUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: SyncJobCreateOrConnectWithoutCodebaseInput | SyncJobCreateOrConnectWithoutCodebaseInput[]
    upsert?: SyncJobUpsertWithWhereUniqueWithoutCodebaseInput | SyncJobUpsertWithWhereUniqueWithoutCodebaseInput[]
    createMany?: SyncJobCreateManyCodebaseInputEnvelope
    set?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    disconnect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    delete?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    connect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    update?: SyncJobUpdateWithWhereUniqueWithoutCodebaseInput | SyncJobUpdateWithWhereUniqueWithoutCodebaseInput[]
    updateMany?: SyncJobUpdateManyWithWhereWithoutCodebaseInput | SyncJobUpdateManyWithWhereWithoutCodebaseInput[]
    deleteMany?: SyncJobScalarWhereInput | SyncJobScalarWhereInput[]
  }

  export type IndexHistoryUpdateManyWithoutCodebaseNestedInput = {
    create?: XOR<IndexHistoryCreateWithoutCodebaseInput, IndexHistoryUncheckedCreateWithoutCodebaseInput> | IndexHistoryCreateWithoutCodebaseInput[] | IndexHistoryUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutCodebaseInput | IndexHistoryCreateOrConnectWithoutCodebaseInput[]
    upsert?: IndexHistoryUpsertWithWhereUniqueWithoutCodebaseInput | IndexHistoryUpsertWithWhereUniqueWithoutCodebaseInput[]
    createMany?: IndexHistoryCreateManyCodebaseInputEnvelope
    set?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    disconnect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    delete?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    update?: IndexHistoryUpdateWithWhereUniqueWithoutCodebaseInput | IndexHistoryUpdateWithWhereUniqueWithoutCodebaseInput[]
    updateMany?: IndexHistoryUpdateManyWithWhereWithoutCodebaseInput | IndexHistoryUpdateManyWithWhereWithoutCodebaseInput[]
    deleteMany?: IndexHistoryScalarWhereInput | IndexHistoryScalarWhereInput[]
  }

  export type CodegraphConfigUpdateOneWithoutCodebaseNestedInput = {
    create?: XOR<CodegraphConfigCreateWithoutCodebaseInput, CodegraphConfigUncheckedCreateWithoutCodebaseInput>
    connectOrCreate?: CodegraphConfigCreateOrConnectWithoutCodebaseInput
    upsert?: CodegraphConfigUpsertWithoutCodebaseInput
    disconnect?: CodegraphConfigWhereInput | boolean
    delete?: CodegraphConfigWhereInput | boolean
    connect?: CodegraphConfigWhereUniqueInput
    update?: XOR<XOR<CodegraphConfigUpdateToOneWithWhereWithoutCodebaseInput, CodegraphConfigUpdateWithoutCodebaseInput>, CodegraphConfigUncheckedUpdateWithoutCodebaseInput>
  }

  export type VectorEmbeddingUpdateManyWithoutCodebaseNestedInput = {
    create?: XOR<VectorEmbeddingCreateWithoutCodebaseInput, VectorEmbeddingUncheckedCreateWithoutCodebaseInput> | VectorEmbeddingCreateWithoutCodebaseInput[] | VectorEmbeddingUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: VectorEmbeddingCreateOrConnectWithoutCodebaseInput | VectorEmbeddingCreateOrConnectWithoutCodebaseInput[]
    upsert?: VectorEmbeddingUpsertWithWhereUniqueWithoutCodebaseInput | VectorEmbeddingUpsertWithWhereUniqueWithoutCodebaseInput[]
    createMany?: VectorEmbeddingCreateManyCodebaseInputEnvelope
    set?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
    disconnect?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
    delete?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
    connect?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
    update?: VectorEmbeddingUpdateWithWhereUniqueWithoutCodebaseInput | VectorEmbeddingUpdateWithWhereUniqueWithoutCodebaseInput[]
    updateMany?: VectorEmbeddingUpdateManyWithWhereWithoutCodebaseInput | VectorEmbeddingUpdateManyWithWhereWithoutCodebaseInput[]
    deleteMany?: VectorEmbeddingScalarWhereInput | VectorEmbeddingScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutCodebaseNestedInput = {
    create?: XOR<FileCreateWithoutCodebaseInput, FileUncheckedCreateWithoutCodebaseInput> | FileCreateWithoutCodebaseInput[] | FileUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: FileCreateOrConnectWithoutCodebaseInput | FileCreateOrConnectWithoutCodebaseInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutCodebaseInput | FileUpsertWithWhereUniqueWithoutCodebaseInput[]
    createMany?: FileCreateManyCodebaseInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutCodebaseInput | FileUpdateWithWhereUniqueWithoutCodebaseInput[]
    updateMany?: FileUpdateManyWithWhereWithoutCodebaseInput | FileUpdateManyWithWhereWithoutCodebaseInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type SyncJobUncheckedUpdateManyWithoutCodebaseNestedInput = {
    create?: XOR<SyncJobCreateWithoutCodebaseInput, SyncJobUncheckedCreateWithoutCodebaseInput> | SyncJobCreateWithoutCodebaseInput[] | SyncJobUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: SyncJobCreateOrConnectWithoutCodebaseInput | SyncJobCreateOrConnectWithoutCodebaseInput[]
    upsert?: SyncJobUpsertWithWhereUniqueWithoutCodebaseInput | SyncJobUpsertWithWhereUniqueWithoutCodebaseInput[]
    createMany?: SyncJobCreateManyCodebaseInputEnvelope
    set?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    disconnect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    delete?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    connect?: SyncJobWhereUniqueInput | SyncJobWhereUniqueInput[]
    update?: SyncJobUpdateWithWhereUniqueWithoutCodebaseInput | SyncJobUpdateWithWhereUniqueWithoutCodebaseInput[]
    updateMany?: SyncJobUpdateManyWithWhereWithoutCodebaseInput | SyncJobUpdateManyWithWhereWithoutCodebaseInput[]
    deleteMany?: SyncJobScalarWhereInput | SyncJobScalarWhereInput[]
  }

  export type IndexHistoryUncheckedUpdateManyWithoutCodebaseNestedInput = {
    create?: XOR<IndexHistoryCreateWithoutCodebaseInput, IndexHistoryUncheckedCreateWithoutCodebaseInput> | IndexHistoryCreateWithoutCodebaseInput[] | IndexHistoryUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutCodebaseInput | IndexHistoryCreateOrConnectWithoutCodebaseInput[]
    upsert?: IndexHistoryUpsertWithWhereUniqueWithoutCodebaseInput | IndexHistoryUpsertWithWhereUniqueWithoutCodebaseInput[]
    createMany?: IndexHistoryCreateManyCodebaseInputEnvelope
    set?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    disconnect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    delete?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    update?: IndexHistoryUpdateWithWhereUniqueWithoutCodebaseInput | IndexHistoryUpdateWithWhereUniqueWithoutCodebaseInput[]
    updateMany?: IndexHistoryUpdateManyWithWhereWithoutCodebaseInput | IndexHistoryUpdateManyWithWhereWithoutCodebaseInput[]
    deleteMany?: IndexHistoryScalarWhereInput | IndexHistoryScalarWhereInput[]
  }

  export type CodegraphConfigUncheckedUpdateOneWithoutCodebaseNestedInput = {
    create?: XOR<CodegraphConfigCreateWithoutCodebaseInput, CodegraphConfigUncheckedCreateWithoutCodebaseInput>
    connectOrCreate?: CodegraphConfigCreateOrConnectWithoutCodebaseInput
    upsert?: CodegraphConfigUpsertWithoutCodebaseInput
    disconnect?: CodegraphConfigWhereInput | boolean
    delete?: CodegraphConfigWhereInput | boolean
    connect?: CodegraphConfigWhereUniqueInput
    update?: XOR<XOR<CodegraphConfigUpdateToOneWithWhereWithoutCodebaseInput, CodegraphConfigUpdateWithoutCodebaseInput>, CodegraphConfigUncheckedUpdateWithoutCodebaseInput>
  }

  export type VectorEmbeddingUncheckedUpdateManyWithoutCodebaseNestedInput = {
    create?: XOR<VectorEmbeddingCreateWithoutCodebaseInput, VectorEmbeddingUncheckedCreateWithoutCodebaseInput> | VectorEmbeddingCreateWithoutCodebaseInput[] | VectorEmbeddingUncheckedCreateWithoutCodebaseInput[]
    connectOrCreate?: VectorEmbeddingCreateOrConnectWithoutCodebaseInput | VectorEmbeddingCreateOrConnectWithoutCodebaseInput[]
    upsert?: VectorEmbeddingUpsertWithWhereUniqueWithoutCodebaseInput | VectorEmbeddingUpsertWithWhereUniqueWithoutCodebaseInput[]
    createMany?: VectorEmbeddingCreateManyCodebaseInputEnvelope
    set?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
    disconnect?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
    delete?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
    connect?: VectorEmbeddingWhereUniqueInput | VectorEmbeddingWhereUniqueInput[]
    update?: VectorEmbeddingUpdateWithWhereUniqueWithoutCodebaseInput | VectorEmbeddingUpdateWithWhereUniqueWithoutCodebaseInput[]
    updateMany?: VectorEmbeddingUpdateManyWithWhereWithoutCodebaseInput | VectorEmbeddingUpdateManyWithWhereWithoutCodebaseInput[]
    deleteMany?: VectorEmbeddingScalarWhereInput | VectorEmbeddingScalarWhereInput[]
  }

  export type CodebaseCreateNestedOneWithoutFilesInput = {
    create?: XOR<CodebaseCreateWithoutFilesInput, CodebaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutFilesInput
    connect?: CodebaseWhereUniqueInput
  }

  export type IndexHistoryCreateNestedManyWithoutFileInput = {
    create?: XOR<IndexHistoryCreateWithoutFileInput, IndexHistoryUncheckedCreateWithoutFileInput> | IndexHistoryCreateWithoutFileInput[] | IndexHistoryUncheckedCreateWithoutFileInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutFileInput | IndexHistoryCreateOrConnectWithoutFileInput[]
    createMany?: IndexHistoryCreateManyFileInputEnvelope
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
  }

  export type IndexHistoryUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<IndexHistoryCreateWithoutFileInput, IndexHistoryUncheckedCreateWithoutFileInput> | IndexHistoryCreateWithoutFileInput[] | IndexHistoryUncheckedCreateWithoutFileInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutFileInput | IndexHistoryCreateOrConnectWithoutFileInput[]
    createMany?: IndexHistoryCreateManyFileInputEnvelope
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
  }

  export type EnumFileStatusFieldUpdateOperationsInput = {
    set?: $Enums.FileStatus
  }

  export type CodebaseUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<CodebaseCreateWithoutFilesInput, CodebaseUncheckedCreateWithoutFilesInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutFilesInput
    upsert?: CodebaseUpsertWithoutFilesInput
    connect?: CodebaseWhereUniqueInput
    update?: XOR<XOR<CodebaseUpdateToOneWithWhereWithoutFilesInput, CodebaseUpdateWithoutFilesInput>, CodebaseUncheckedUpdateWithoutFilesInput>
  }

  export type IndexHistoryUpdateManyWithoutFileNestedInput = {
    create?: XOR<IndexHistoryCreateWithoutFileInput, IndexHistoryUncheckedCreateWithoutFileInput> | IndexHistoryCreateWithoutFileInput[] | IndexHistoryUncheckedCreateWithoutFileInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutFileInput | IndexHistoryCreateOrConnectWithoutFileInput[]
    upsert?: IndexHistoryUpsertWithWhereUniqueWithoutFileInput | IndexHistoryUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: IndexHistoryCreateManyFileInputEnvelope
    set?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    disconnect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    delete?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    update?: IndexHistoryUpdateWithWhereUniqueWithoutFileInput | IndexHistoryUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: IndexHistoryUpdateManyWithWhereWithoutFileInput | IndexHistoryUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: IndexHistoryScalarWhereInput | IndexHistoryScalarWhereInput[]
  }

  export type IndexHistoryUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<IndexHistoryCreateWithoutFileInput, IndexHistoryUncheckedCreateWithoutFileInput> | IndexHistoryCreateWithoutFileInput[] | IndexHistoryUncheckedCreateWithoutFileInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutFileInput | IndexHistoryCreateOrConnectWithoutFileInput[]
    upsert?: IndexHistoryUpsertWithWhereUniqueWithoutFileInput | IndexHistoryUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: IndexHistoryCreateManyFileInputEnvelope
    set?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    disconnect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    delete?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    update?: IndexHistoryUpdateWithWhereUniqueWithoutFileInput | IndexHistoryUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: IndexHistoryUpdateManyWithWhereWithoutFileInput | IndexHistoryUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: IndexHistoryScalarWhereInput | IndexHistoryScalarWhereInput[]
  }

  export type CodebaseCreateNestedOneWithoutSyncJobsInput = {
    create?: XOR<CodebaseCreateWithoutSyncJobsInput, CodebaseUncheckedCreateWithoutSyncJobsInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutSyncJobsInput
    connect?: CodebaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSyncJobsInput = {
    create?: XOR<UserCreateWithoutSyncJobsInput, UserUncheckedCreateWithoutSyncJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSyncJobsInput
    connect?: UserWhereUniqueInput
  }

  export type IndexHistoryCreateNestedManyWithoutSyncJobInput = {
    create?: XOR<IndexHistoryCreateWithoutSyncJobInput, IndexHistoryUncheckedCreateWithoutSyncJobInput> | IndexHistoryCreateWithoutSyncJobInput[] | IndexHistoryUncheckedCreateWithoutSyncJobInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutSyncJobInput | IndexHistoryCreateOrConnectWithoutSyncJobInput[]
    createMany?: IndexHistoryCreateManySyncJobInputEnvelope
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
  }

  export type IndexHistoryUncheckedCreateNestedManyWithoutSyncJobInput = {
    create?: XOR<IndexHistoryCreateWithoutSyncJobInput, IndexHistoryUncheckedCreateWithoutSyncJobInput> | IndexHistoryCreateWithoutSyncJobInput[] | IndexHistoryUncheckedCreateWithoutSyncJobInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutSyncJobInput | IndexHistoryCreateOrConnectWithoutSyncJobInput[]
    createMany?: IndexHistoryCreateManySyncJobInputEnvelope
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
  }

  export type EnumSyncJobTypeFieldUpdateOperationsInput = {
    set?: $Enums.SyncJobType
  }

  export type EnumSyncJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.SyncJobStatus
  }

  export type CodebaseUpdateOneWithoutSyncJobsNestedInput = {
    create?: XOR<CodebaseCreateWithoutSyncJobsInput, CodebaseUncheckedCreateWithoutSyncJobsInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutSyncJobsInput
    upsert?: CodebaseUpsertWithoutSyncJobsInput
    disconnect?: CodebaseWhereInput | boolean
    delete?: CodebaseWhereInput | boolean
    connect?: CodebaseWhereUniqueInput
    update?: XOR<XOR<CodebaseUpdateToOneWithWhereWithoutSyncJobsInput, CodebaseUpdateWithoutSyncJobsInput>, CodebaseUncheckedUpdateWithoutSyncJobsInput>
  }

  export type UserUpdateOneWithoutSyncJobsNestedInput = {
    create?: XOR<UserCreateWithoutSyncJobsInput, UserUncheckedCreateWithoutSyncJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSyncJobsInput
    upsert?: UserUpsertWithoutSyncJobsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSyncJobsInput, UserUpdateWithoutSyncJobsInput>, UserUncheckedUpdateWithoutSyncJobsInput>
  }

  export type IndexHistoryUpdateManyWithoutSyncJobNestedInput = {
    create?: XOR<IndexHistoryCreateWithoutSyncJobInput, IndexHistoryUncheckedCreateWithoutSyncJobInput> | IndexHistoryCreateWithoutSyncJobInput[] | IndexHistoryUncheckedCreateWithoutSyncJobInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutSyncJobInput | IndexHistoryCreateOrConnectWithoutSyncJobInput[]
    upsert?: IndexHistoryUpsertWithWhereUniqueWithoutSyncJobInput | IndexHistoryUpsertWithWhereUniqueWithoutSyncJobInput[]
    createMany?: IndexHistoryCreateManySyncJobInputEnvelope
    set?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    disconnect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    delete?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    update?: IndexHistoryUpdateWithWhereUniqueWithoutSyncJobInput | IndexHistoryUpdateWithWhereUniqueWithoutSyncJobInput[]
    updateMany?: IndexHistoryUpdateManyWithWhereWithoutSyncJobInput | IndexHistoryUpdateManyWithWhereWithoutSyncJobInput[]
    deleteMany?: IndexHistoryScalarWhereInput | IndexHistoryScalarWhereInput[]
  }

  export type IndexHistoryUncheckedUpdateManyWithoutSyncJobNestedInput = {
    create?: XOR<IndexHistoryCreateWithoutSyncJobInput, IndexHistoryUncheckedCreateWithoutSyncJobInput> | IndexHistoryCreateWithoutSyncJobInput[] | IndexHistoryUncheckedCreateWithoutSyncJobInput[]
    connectOrCreate?: IndexHistoryCreateOrConnectWithoutSyncJobInput | IndexHistoryCreateOrConnectWithoutSyncJobInput[]
    upsert?: IndexHistoryUpsertWithWhereUniqueWithoutSyncJobInput | IndexHistoryUpsertWithWhereUniqueWithoutSyncJobInput[]
    createMany?: IndexHistoryCreateManySyncJobInputEnvelope
    set?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    disconnect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    delete?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    connect?: IndexHistoryWhereUniqueInput | IndexHistoryWhereUniqueInput[]
    update?: IndexHistoryUpdateWithWhereUniqueWithoutSyncJobInput | IndexHistoryUpdateWithWhereUniqueWithoutSyncJobInput[]
    updateMany?: IndexHistoryUpdateManyWithWhereWithoutSyncJobInput | IndexHistoryUpdateManyWithWhereWithoutSyncJobInput[]
    deleteMany?: IndexHistoryScalarWhereInput | IndexHistoryScalarWhereInput[]
  }

  export type CodebaseCreateNestedOneWithoutIndexHistoryInput = {
    create?: XOR<CodebaseCreateWithoutIndexHistoryInput, CodebaseUncheckedCreateWithoutIndexHistoryInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutIndexHistoryInput
    connect?: CodebaseWhereUniqueInput
  }

  export type SyncJobCreateNestedOneWithoutIndexHistoryInput = {
    create?: XOR<SyncJobCreateWithoutIndexHistoryInput, SyncJobUncheckedCreateWithoutIndexHistoryInput>
    connectOrCreate?: SyncJobCreateOrConnectWithoutIndexHistoryInput
    connect?: SyncJobWhereUniqueInput
  }

  export type FileCreateNestedOneWithoutIndexHistoryInput = {
    create?: XOR<FileCreateWithoutIndexHistoryInput, FileUncheckedCreateWithoutIndexHistoryInput>
    connectOrCreate?: FileCreateOrConnectWithoutIndexHistoryInput
    connect?: FileWhereUniqueInput
  }

  export type EnumIndexTaskTypeFieldUpdateOperationsInput = {
    set?: $Enums.IndexTaskType
  }

  export type EnumIndexTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.IndexTaskStatus
  }

  export type CodebaseUpdateOneRequiredWithoutIndexHistoryNestedInput = {
    create?: XOR<CodebaseCreateWithoutIndexHistoryInput, CodebaseUncheckedCreateWithoutIndexHistoryInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutIndexHistoryInput
    upsert?: CodebaseUpsertWithoutIndexHistoryInput
    connect?: CodebaseWhereUniqueInput
    update?: XOR<XOR<CodebaseUpdateToOneWithWhereWithoutIndexHistoryInput, CodebaseUpdateWithoutIndexHistoryInput>, CodebaseUncheckedUpdateWithoutIndexHistoryInput>
  }

  export type SyncJobUpdateOneWithoutIndexHistoryNestedInput = {
    create?: XOR<SyncJobCreateWithoutIndexHistoryInput, SyncJobUncheckedCreateWithoutIndexHistoryInput>
    connectOrCreate?: SyncJobCreateOrConnectWithoutIndexHistoryInput
    upsert?: SyncJobUpsertWithoutIndexHistoryInput
    disconnect?: SyncJobWhereInput | boolean
    delete?: SyncJobWhereInput | boolean
    connect?: SyncJobWhereUniqueInput
    update?: XOR<XOR<SyncJobUpdateToOneWithWhereWithoutIndexHistoryInput, SyncJobUpdateWithoutIndexHistoryInput>, SyncJobUncheckedUpdateWithoutIndexHistoryInput>
  }

  export type FileUpdateOneWithoutIndexHistoryNestedInput = {
    create?: XOR<FileCreateWithoutIndexHistoryInput, FileUncheckedCreateWithoutIndexHistoryInput>
    connectOrCreate?: FileCreateOrConnectWithoutIndexHistoryInput
    upsert?: FileUpsertWithoutIndexHistoryInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutIndexHistoryInput, FileUpdateWithoutIndexHistoryInput>, FileUncheckedUpdateWithoutIndexHistoryInput>
  }

  export type CodebaseCreateNestedOneWithoutCodegraphConfigInput = {
    create?: XOR<CodebaseCreateWithoutCodegraphConfigInput, CodebaseUncheckedCreateWithoutCodegraphConfigInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutCodegraphConfigInput
    connect?: CodebaseWhereUniqueInput
  }

  export type CodebaseUpdateOneRequiredWithoutCodegraphConfigNestedInput = {
    create?: XOR<CodebaseCreateWithoutCodegraphConfigInput, CodebaseUncheckedCreateWithoutCodegraphConfigInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutCodegraphConfigInput
    upsert?: CodebaseUpsertWithoutCodegraphConfigInput
    connect?: CodebaseWhereUniqueInput
    update?: XOR<XOR<CodebaseUpdateToOneWithWhereWithoutCodegraphConfigInput, CodebaseUpdateWithoutCodegraphConfigInput>, CodebaseUncheckedUpdateWithoutCodegraphConfigInput>
  }

  export type CodebaseCreateNestedOneWithoutVectorEmbeddingsInput = {
    create?: XOR<CodebaseCreateWithoutVectorEmbeddingsInput, CodebaseUncheckedCreateWithoutVectorEmbeddingsInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutVectorEmbeddingsInput
    connect?: CodebaseWhereUniqueInput
  }

  export type CodebaseUpdateOneRequiredWithoutVectorEmbeddingsNestedInput = {
    create?: XOR<CodebaseCreateWithoutVectorEmbeddingsInput, CodebaseUncheckedCreateWithoutVectorEmbeddingsInput>
    connectOrCreate?: CodebaseCreateOrConnectWithoutVectorEmbeddingsInput
    upsert?: CodebaseUpsertWithoutVectorEmbeddingsInput
    connect?: CodebaseWhereUniqueInput
    update?: XOR<XOR<CodebaseUpdateToOneWithWhereWithoutVectorEmbeddingsInput, CodebaseUpdateWithoutVectorEmbeddingsInput>, CodebaseUncheckedUpdateWithoutVectorEmbeddingsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumProjectMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectMemberRole | EnumProjectMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectMemberRole[] | ListEnumProjectMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectMemberRole[] | ListEnumProjectMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectMemberRoleFilter<$PrismaModel> | $Enums.ProjectMemberRole
  }

  export type NestedEnumProjectMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectMemberRole | EnumProjectMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectMemberRole[] | ListEnumProjectMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectMemberRole[] | ListEnumProjectMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.ProjectMemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumProjectMemberRoleFilter<$PrismaModel>
  }

  export type NestedEnumCodebaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CodebaseStatus | EnumCodebaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CodebaseStatus[] | ListEnumCodebaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CodebaseStatus[] | ListEnumCodebaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCodebaseStatusFilter<$PrismaModel> | $Enums.CodebaseStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCodebaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CodebaseStatus | EnumCodebaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CodebaseStatus[] | ListEnumCodebaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CodebaseStatus[] | ListEnumCodebaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCodebaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CodebaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCodebaseStatusFilter<$PrismaModel>
    _max?: NestedEnumCodebaseStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumFileStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FileStatus | EnumFileStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FileStatus[] | ListEnumFileStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileStatus[] | ListEnumFileStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFileStatusFilter<$PrismaModel> | $Enums.FileStatus
  }

  export type NestedEnumFileStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileStatus | EnumFileStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FileStatus[] | ListEnumFileStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileStatus[] | ListEnumFileStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFileStatusWithAggregatesFilter<$PrismaModel> | $Enums.FileStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileStatusFilter<$PrismaModel>
    _max?: NestedEnumFileStatusFilter<$PrismaModel>
  }

  export type NestedEnumSyncJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncJobType | EnumSyncJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SyncJobType[] | ListEnumSyncJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncJobType[] | ListEnumSyncJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncJobTypeFilter<$PrismaModel> | $Enums.SyncJobType
  }

  export type NestedEnumSyncJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncJobStatus | EnumSyncJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncJobStatus[] | ListEnumSyncJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncJobStatus[] | ListEnumSyncJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncJobStatusFilter<$PrismaModel> | $Enums.SyncJobStatus
  }

  export type NestedEnumSyncJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncJobType | EnumSyncJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SyncJobType[] | ListEnumSyncJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncJobType[] | ListEnumSyncJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.SyncJobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncJobTypeFilter<$PrismaModel>
    _max?: NestedEnumSyncJobTypeFilter<$PrismaModel>
  }

  export type NestedEnumSyncJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SyncJobStatus | EnumSyncJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SyncJobStatus[] | ListEnumSyncJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SyncJobStatus[] | ListEnumSyncJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSyncJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.SyncJobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSyncJobStatusFilter<$PrismaModel>
    _max?: NestedEnumSyncJobStatusFilter<$PrismaModel>
  }

  export type NestedEnumIndexTaskTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IndexTaskType | EnumIndexTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IndexTaskType[] | ListEnumIndexTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndexTaskType[] | ListEnumIndexTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIndexTaskTypeFilter<$PrismaModel> | $Enums.IndexTaskType
  }

  export type NestedEnumIndexTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IndexTaskStatus | EnumIndexTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IndexTaskStatus[] | ListEnumIndexTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndexTaskStatus[] | ListEnumIndexTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIndexTaskStatusFilter<$PrismaModel> | $Enums.IndexTaskStatus
  }

  export type NestedEnumIndexTaskTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IndexTaskType | EnumIndexTaskTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IndexTaskType[] | ListEnumIndexTaskTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndexTaskType[] | ListEnumIndexTaskTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIndexTaskTypeWithAggregatesFilter<$PrismaModel> | $Enums.IndexTaskType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndexTaskTypeFilter<$PrismaModel>
    _max?: NestedEnumIndexTaskTypeFilter<$PrismaModel>
  }

  export type NestedEnumIndexTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IndexTaskStatus | EnumIndexTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IndexTaskStatus[] | ListEnumIndexTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IndexTaskStatus[] | ListEnumIndexTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIndexTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.IndexTaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndexTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumIndexTaskStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ProjectMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    project: ProjectCreateNestedOneWithoutMembersInput
  }

  export type ProjectMemberUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    projectId: string
  }

  export type ProjectMemberCreateOrConnectWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    create: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput>
  }

  export type ProjectMemberCreateManyUserInputEnvelope = {
    data: ProjectMemberCreateManyUserInput | ProjectMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SyncJobCreateWithoutUserInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase?: CodebaseCreateNestedOneWithoutSyncJobsInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutSyncJobInput
  }

  export type SyncJobUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId?: string | null
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutSyncJobInput
  }

  export type SyncJobCreateOrConnectWithoutUserInput = {
    where: SyncJobWhereUniqueInput
    create: XOR<SyncJobCreateWithoutUserInput, SyncJobUncheckedCreateWithoutUserInput>
  }

  export type SyncJobCreateManyUserInputEnvelope = {
    data: SyncJobCreateManyUserInput | SyncJobCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProjectMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    update: XOR<ProjectMemberUpdateWithoutUserInput, ProjectMemberUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput>
  }

  export type ProjectMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    data: XOR<ProjectMemberUpdateWithoutUserInput, ProjectMemberUncheckedUpdateWithoutUserInput>
  }

  export type ProjectMemberUpdateManyWithWhereWithoutUserInput = {
    where: ProjectMemberScalarWhereInput
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectMemberScalarWhereInput = {
    AND?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
    OR?: ProjectMemberScalarWhereInput[]
    NOT?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
    id?: StringFilter<"ProjectMember"> | string
    role?: EnumProjectMemberRoleFilter<"ProjectMember"> | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
  }

  export type SyncJobUpsertWithWhereUniqueWithoutUserInput = {
    where: SyncJobWhereUniqueInput
    update: XOR<SyncJobUpdateWithoutUserInput, SyncJobUncheckedUpdateWithoutUserInput>
    create: XOR<SyncJobCreateWithoutUserInput, SyncJobUncheckedCreateWithoutUserInput>
  }

  export type SyncJobUpdateWithWhereUniqueWithoutUserInput = {
    where: SyncJobWhereUniqueInput
    data: XOR<SyncJobUpdateWithoutUserInput, SyncJobUncheckedUpdateWithoutUserInput>
  }

  export type SyncJobUpdateManyWithWhereWithoutUserInput = {
    where: SyncJobScalarWhereInput
    data: XOR<SyncJobUpdateManyMutationInput, SyncJobUncheckedUpdateManyWithoutUserInput>
  }

  export type SyncJobScalarWhereInput = {
    AND?: SyncJobScalarWhereInput | SyncJobScalarWhereInput[]
    OR?: SyncJobScalarWhereInput[]
    NOT?: SyncJobScalarWhereInput | SyncJobScalarWhereInput[]
    id?: StringFilter<"SyncJob"> | string
    type?: EnumSyncJobTypeFilter<"SyncJob"> | $Enums.SyncJobType
    status?: EnumSyncJobStatusFilter<"SyncJob"> | $Enums.SyncJobStatus
    priority?: IntFilter<"SyncJob"> | number
    progress?: IntFilter<"SyncJob"> | number
    message?: StringNullableFilter<"SyncJob"> | string | null
    error?: StringNullableFilter<"SyncJob"> | string | null
    metadata?: JsonNullableFilter<"SyncJob">
    startedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"SyncJob"> | Date | string | null
    createdAt?: DateTimeFilter<"SyncJob"> | Date | string
    updatedAt?: DateTimeFilter<"SyncJob"> | Date | string
    codebaseId?: StringNullableFilter<"SyncJob"> | string | null
    userId?: StringNullableFilter<"SyncJob"> | string | null
  }

  export type ProjectMemberCreateWithoutProjectInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectMemberUncheckedCreateWithoutProjectInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    userId: string
  }

  export type ProjectMemberCreateOrConnectWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    create: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMemberCreateManyProjectInputEnvelope = {
    data: ProjectMemberCreateManyProjectInput | ProjectMemberCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type CodebaseCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobUncheckedCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigUncheckedCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingUncheckedCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseCreateOrConnectWithoutProjectInput = {
    where: CodebaseWhereUniqueInput
    create: XOR<CodebaseCreateWithoutProjectInput, CodebaseUncheckedCreateWithoutProjectInput>
  }

  export type CodebaseCreateManyProjectInputEnvelope = {
    data: CodebaseCreateManyProjectInput | CodebaseCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ProjectMemberUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    update: XOR<ProjectMemberUpdateWithoutProjectInput, ProjectMemberUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMemberUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    data: XOR<ProjectMemberUpdateWithoutProjectInput, ProjectMemberUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectMemberUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectMemberScalarWhereInput
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyWithoutProjectInput>
  }

  export type CodebaseUpsertWithWhereUniqueWithoutProjectInput = {
    where: CodebaseWhereUniqueInput
    update: XOR<CodebaseUpdateWithoutProjectInput, CodebaseUncheckedUpdateWithoutProjectInput>
    create: XOR<CodebaseCreateWithoutProjectInput, CodebaseUncheckedCreateWithoutProjectInput>
  }

  export type CodebaseUpdateWithWhereUniqueWithoutProjectInput = {
    where: CodebaseWhereUniqueInput
    data: XOR<CodebaseUpdateWithoutProjectInput, CodebaseUncheckedUpdateWithoutProjectInput>
  }

  export type CodebaseUpdateManyWithWhereWithoutProjectInput = {
    where: CodebaseScalarWhereInput
    data: XOR<CodebaseUpdateManyMutationInput, CodebaseUncheckedUpdateManyWithoutProjectInput>
  }

  export type CodebaseScalarWhereInput = {
    AND?: CodebaseScalarWhereInput | CodebaseScalarWhereInput[]
    OR?: CodebaseScalarWhereInput[]
    NOT?: CodebaseScalarWhereInput | CodebaseScalarWhereInput[]
    id?: StringFilter<"Codebase"> | string
    name?: StringFilter<"Codebase"> | string
    description?: StringNullableFilter<"Codebase"> | string | null
    gitlabUrl?: StringFilter<"Codebase"> | string
    gitlabProjectId?: IntNullableFilter<"Codebase"> | number | null
    branch?: StringFilter<"Codebase"> | string
    language?: StringNullableFilter<"Codebase"> | string | null
    status?: EnumCodebaseStatusFilter<"Codebase"> | $Enums.CodebaseStatus
    lastSyncAt?: DateTimeNullableFilter<"Codebase"> | Date | string | null
    totalFiles?: IntFilter<"Codebase"> | number
    totalLines?: IntFilter<"Codebase"> | number
    settings?: JsonNullableFilter<"Codebase">
    createdAt?: DateTimeFilter<"Codebase"> | Date | string
    updatedAt?: DateTimeFilter<"Codebase"> | Date | string
    projectId?: StringFilter<"Codebase"> | string
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    syncJobs?: SyncJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    syncJobs?: SyncJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type ProjectCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    status?: $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebases?: CodebaseCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    status?: $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebases?: CodebaseUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutMembersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncJobs?: SyncJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncJobs?: SyncJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutMembersInput = {
    update: XOR<ProjectUpdateWithoutMembersInput, ProjectUncheckedUpdateWithoutMembersInput>
    create: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutMembersInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutMembersInput, ProjectUncheckedUpdateWithoutMembersInput>
  }

  export type ProjectUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebases?: CodebaseUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebases?: CodebaseUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutCodebasesInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    status?: $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCodebasesInput = {
    id?: string
    name: string
    description?: string | null
    slug: string
    status?: $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCodebasesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCodebasesInput, ProjectUncheckedCreateWithoutCodebasesInput>
  }

  export type FileCreateWithoutCodebaseInput = {
    id?: string
    path: string
    hash: string
    size: number
    language?: string | null
    status?: $Enums.FileStatus
    lastModified?: Date | string | null
    lineCount?: number
    storageKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    indexHistory?: IndexHistoryCreateNestedManyWithoutFileInput
  }

  export type FileUncheckedCreateWithoutCodebaseInput = {
    id?: string
    path: string
    hash: string
    size: number
    language?: string | null
    status?: $Enums.FileStatus
    lastModified?: Date | string | null
    lineCount?: number
    storageKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutFileInput
  }

  export type FileCreateOrConnectWithoutCodebaseInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutCodebaseInput, FileUncheckedCreateWithoutCodebaseInput>
  }

  export type FileCreateManyCodebaseInputEnvelope = {
    data: FileCreateManyCodebaseInput | FileCreateManyCodebaseInput[]
    skipDuplicates?: boolean
  }

  export type SyncJobCreateWithoutCodebaseInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutSyncJobsInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutSyncJobInput
  }

  export type SyncJobUncheckedCreateWithoutCodebaseInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutSyncJobInput
  }

  export type SyncJobCreateOrConnectWithoutCodebaseInput = {
    where: SyncJobWhereUniqueInput
    create: XOR<SyncJobCreateWithoutCodebaseInput, SyncJobUncheckedCreateWithoutCodebaseInput>
  }

  export type SyncJobCreateManyCodebaseInputEnvelope = {
    data: SyncJobCreateManyCodebaseInput | SyncJobCreateManyCodebaseInput[]
    skipDuplicates?: boolean
  }

  export type IndexHistoryCreateWithoutCodebaseInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    syncJob?: SyncJobCreateNestedOneWithoutIndexHistoryInput
    file?: FileCreateNestedOneWithoutIndexHistoryInput
  }

  export type IndexHistoryUncheckedCreateWithoutCodebaseInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    syncJobId?: string | null
    fileId?: string | null
  }

  export type IndexHistoryCreateOrConnectWithoutCodebaseInput = {
    where: IndexHistoryWhereUniqueInput
    create: XOR<IndexHistoryCreateWithoutCodebaseInput, IndexHistoryUncheckedCreateWithoutCodebaseInput>
  }

  export type IndexHistoryCreateManyCodebaseInputEnvelope = {
    data: IndexHistoryCreateManyCodebaseInput | IndexHistoryCreateManyCodebaseInput[]
    skipDuplicates?: boolean
  }

  export type CodegraphConfigCreateWithoutCodebaseInput = {
    id?: string
    scipEnabled?: boolean
    treeSitterEnabled?: boolean
    embeddingEnabled?: boolean
    maxConcurrency?: number
    scipTimeout?: number
    parseTimeout?: number
    chunkSize?: number
    chunkOverlap?: number
    maxTokens?: number
    badgerDbPath?: string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodegraphConfigUncheckedCreateWithoutCodebaseInput = {
    id?: string
    scipEnabled?: boolean
    treeSitterEnabled?: boolean
    embeddingEnabled?: boolean
    maxConcurrency?: number
    scipTimeout?: number
    parseTimeout?: number
    chunkSize?: number
    chunkOverlap?: number
    maxTokens?: number
    badgerDbPath?: string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodegraphConfigCreateOrConnectWithoutCodebaseInput = {
    where: CodegraphConfigWhereUniqueInput
    create: XOR<CodegraphConfigCreateWithoutCodebaseInput, CodegraphConfigUncheckedCreateWithoutCodebaseInput>
  }

  export type VectorEmbeddingCreateWithoutCodebaseInput = {
    id?: string
    content: string
    filePath: string
    chunkIndex: number
    startLine: number
    endLine: number
    startColumn?: number | null
    endColumn?: number | null
    tokenCount: number
    embedding: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VectorEmbeddingUncheckedCreateWithoutCodebaseInput = {
    id?: string
    content: string
    filePath: string
    chunkIndex: number
    startLine: number
    endLine: number
    startColumn?: number | null
    endColumn?: number | null
    tokenCount: number
    embedding: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VectorEmbeddingCreateOrConnectWithoutCodebaseInput = {
    where: VectorEmbeddingWhereUniqueInput
    create: XOR<VectorEmbeddingCreateWithoutCodebaseInput, VectorEmbeddingUncheckedCreateWithoutCodebaseInput>
  }

  export type VectorEmbeddingCreateManyCodebaseInputEnvelope = {
    data: VectorEmbeddingCreateManyCodebaseInput | VectorEmbeddingCreateManyCodebaseInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutCodebasesInput = {
    update: XOR<ProjectUpdateWithoutCodebasesInput, ProjectUncheckedUpdateWithoutCodebasesInput>
    create: XOR<ProjectCreateWithoutCodebasesInput, ProjectUncheckedCreateWithoutCodebasesInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCodebasesInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCodebasesInput, ProjectUncheckedUpdateWithoutCodebasesInput>
  }

  export type ProjectUpdateWithoutCodebasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCodebasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: StringFieldUpdateOperationsInput | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutCodebaseInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutCodebaseInput, FileUncheckedUpdateWithoutCodebaseInput>
    create: XOR<FileCreateWithoutCodebaseInput, FileUncheckedCreateWithoutCodebaseInput>
  }

  export type FileUpdateWithWhereUniqueWithoutCodebaseInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutCodebaseInput, FileUncheckedUpdateWithoutCodebaseInput>
  }

  export type FileUpdateManyWithWhereWithoutCodebaseInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutCodebaseInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    hash?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    language?: StringNullableFilter<"File"> | string | null
    status?: EnumFileStatusFilter<"File"> | $Enums.FileStatus
    lastModified?: DateTimeNullableFilter<"File"> | Date | string | null
    lineCount?: IntFilter<"File"> | number
    storageKey?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    codebaseId?: StringFilter<"File"> | string
  }

  export type SyncJobUpsertWithWhereUniqueWithoutCodebaseInput = {
    where: SyncJobWhereUniqueInput
    update: XOR<SyncJobUpdateWithoutCodebaseInput, SyncJobUncheckedUpdateWithoutCodebaseInput>
    create: XOR<SyncJobCreateWithoutCodebaseInput, SyncJobUncheckedCreateWithoutCodebaseInput>
  }

  export type SyncJobUpdateWithWhereUniqueWithoutCodebaseInput = {
    where: SyncJobWhereUniqueInput
    data: XOR<SyncJobUpdateWithoutCodebaseInput, SyncJobUncheckedUpdateWithoutCodebaseInput>
  }

  export type SyncJobUpdateManyWithWhereWithoutCodebaseInput = {
    where: SyncJobScalarWhereInput
    data: XOR<SyncJobUpdateManyMutationInput, SyncJobUncheckedUpdateManyWithoutCodebaseInput>
  }

  export type IndexHistoryUpsertWithWhereUniqueWithoutCodebaseInput = {
    where: IndexHistoryWhereUniqueInput
    update: XOR<IndexHistoryUpdateWithoutCodebaseInput, IndexHistoryUncheckedUpdateWithoutCodebaseInput>
    create: XOR<IndexHistoryCreateWithoutCodebaseInput, IndexHistoryUncheckedCreateWithoutCodebaseInput>
  }

  export type IndexHistoryUpdateWithWhereUniqueWithoutCodebaseInput = {
    where: IndexHistoryWhereUniqueInput
    data: XOR<IndexHistoryUpdateWithoutCodebaseInput, IndexHistoryUncheckedUpdateWithoutCodebaseInput>
  }

  export type IndexHistoryUpdateManyWithWhereWithoutCodebaseInput = {
    where: IndexHistoryScalarWhereInput
    data: XOR<IndexHistoryUpdateManyMutationInput, IndexHistoryUncheckedUpdateManyWithoutCodebaseInput>
  }

  export type IndexHistoryScalarWhereInput = {
    AND?: IndexHistoryScalarWhereInput | IndexHistoryScalarWhereInput[]
    OR?: IndexHistoryScalarWhereInput[]
    NOT?: IndexHistoryScalarWhereInput | IndexHistoryScalarWhereInput[]
    id?: StringFilter<"IndexHistory"> | string
    taskType?: EnumIndexTaskTypeFilter<"IndexHistory"> | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFilter<"IndexHistory"> | $Enums.IndexTaskStatus
    totalFiles?: IntFilter<"IndexHistory"> | number
    processedFiles?: IntFilter<"IndexHistory"> | number
    failedFiles?: IntFilter<"IndexHistory"> | number
    ignoredFiles?: IntFilter<"IndexHistory"> | number
    startTime?: DateTimeNullableFilter<"IndexHistory"> | Date | string | null
    endTime?: DateTimeNullableFilter<"IndexHistory"> | Date | string | null
    durationMs?: IntNullableFilter<"IndexHistory"> | number | null
    errorMessage?: StringNullableFilter<"IndexHistory"> | string | null
    metadata?: JsonNullableFilter<"IndexHistory">
    createdAt?: DateTimeFilter<"IndexHistory"> | Date | string
    updatedAt?: DateTimeFilter<"IndexHistory"> | Date | string
    codebaseId?: StringFilter<"IndexHistory"> | string
    syncJobId?: StringNullableFilter<"IndexHistory"> | string | null
    fileId?: StringNullableFilter<"IndexHistory"> | string | null
  }

  export type CodegraphConfigUpsertWithoutCodebaseInput = {
    update: XOR<CodegraphConfigUpdateWithoutCodebaseInput, CodegraphConfigUncheckedUpdateWithoutCodebaseInput>
    create: XOR<CodegraphConfigCreateWithoutCodebaseInput, CodegraphConfigUncheckedCreateWithoutCodebaseInput>
    where?: CodegraphConfigWhereInput
  }

  export type CodegraphConfigUpdateToOneWithWhereWithoutCodebaseInput = {
    where?: CodegraphConfigWhereInput
    data: XOR<CodegraphConfigUpdateWithoutCodebaseInput, CodegraphConfigUncheckedUpdateWithoutCodebaseInput>
  }

  export type CodegraphConfigUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    scipEnabled?: BoolFieldUpdateOperationsInput | boolean
    treeSitterEnabled?: BoolFieldUpdateOperationsInput | boolean
    embeddingEnabled?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrency?: IntFieldUpdateOperationsInput | number
    scipTimeout?: IntFieldUpdateOperationsInput | number
    parseTimeout?: IntFieldUpdateOperationsInput | number
    chunkSize?: IntFieldUpdateOperationsInput | number
    chunkOverlap?: IntFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    badgerDbPath?: NullableStringFieldUpdateOperationsInput | string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodegraphConfigUncheckedUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    scipEnabled?: BoolFieldUpdateOperationsInput | boolean
    treeSitterEnabled?: BoolFieldUpdateOperationsInput | boolean
    embeddingEnabled?: BoolFieldUpdateOperationsInput | boolean
    maxConcurrency?: IntFieldUpdateOperationsInput | number
    scipTimeout?: IntFieldUpdateOperationsInput | number
    parseTimeout?: IntFieldUpdateOperationsInput | number
    chunkSize?: IntFieldUpdateOperationsInput | number
    chunkOverlap?: IntFieldUpdateOperationsInput | number
    maxTokens?: IntFieldUpdateOperationsInput | number
    badgerDbPath?: NullableStringFieldUpdateOperationsInput | string | null
    scipToolsPath?: NullableJsonNullValueInput | InputJsonValue
    languageConfig?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VectorEmbeddingUpsertWithWhereUniqueWithoutCodebaseInput = {
    where: VectorEmbeddingWhereUniqueInput
    update: XOR<VectorEmbeddingUpdateWithoutCodebaseInput, VectorEmbeddingUncheckedUpdateWithoutCodebaseInput>
    create: XOR<VectorEmbeddingCreateWithoutCodebaseInput, VectorEmbeddingUncheckedCreateWithoutCodebaseInput>
  }

  export type VectorEmbeddingUpdateWithWhereUniqueWithoutCodebaseInput = {
    where: VectorEmbeddingWhereUniqueInput
    data: XOR<VectorEmbeddingUpdateWithoutCodebaseInput, VectorEmbeddingUncheckedUpdateWithoutCodebaseInput>
  }

  export type VectorEmbeddingUpdateManyWithWhereWithoutCodebaseInput = {
    where: VectorEmbeddingScalarWhereInput
    data: XOR<VectorEmbeddingUpdateManyMutationInput, VectorEmbeddingUncheckedUpdateManyWithoutCodebaseInput>
  }

  export type VectorEmbeddingScalarWhereInput = {
    AND?: VectorEmbeddingScalarWhereInput | VectorEmbeddingScalarWhereInput[]
    OR?: VectorEmbeddingScalarWhereInput[]
    NOT?: VectorEmbeddingScalarWhereInput | VectorEmbeddingScalarWhereInput[]
    id?: StringFilter<"VectorEmbedding"> | string
    content?: StringFilter<"VectorEmbedding"> | string
    filePath?: StringFilter<"VectorEmbedding"> | string
    chunkIndex?: IntFilter<"VectorEmbedding"> | number
    startLine?: IntFilter<"VectorEmbedding"> | number
    endLine?: IntFilter<"VectorEmbedding"> | number
    startColumn?: IntNullableFilter<"VectorEmbedding"> | number | null
    endColumn?: IntNullableFilter<"VectorEmbedding"> | number | null
    tokenCount?: IntFilter<"VectorEmbedding"> | number
    embedding?: JsonFilter<"VectorEmbedding">
    metadata?: JsonNullableFilter<"VectorEmbedding">
    createdAt?: DateTimeFilter<"VectorEmbedding"> | Date | string
    updatedAt?: DateTimeFilter<"VectorEmbedding"> | Date | string
    codebaseId?: StringFilter<"VectorEmbedding"> | string
  }

  export type CodebaseCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutCodebasesInput
    syncJobs?: SyncJobCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    syncJobs?: SyncJobUncheckedCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigUncheckedCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingUncheckedCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseCreateOrConnectWithoutFilesInput = {
    where: CodebaseWhereUniqueInput
    create: XOR<CodebaseCreateWithoutFilesInput, CodebaseUncheckedCreateWithoutFilesInput>
  }

  export type IndexHistoryCreateWithoutFileInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase: CodebaseCreateNestedOneWithoutIndexHistoryInput
    syncJob?: SyncJobCreateNestedOneWithoutIndexHistoryInput
  }

  export type IndexHistoryUncheckedCreateWithoutFileInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
    syncJobId?: string | null
  }

  export type IndexHistoryCreateOrConnectWithoutFileInput = {
    where: IndexHistoryWhereUniqueInput
    create: XOR<IndexHistoryCreateWithoutFileInput, IndexHistoryUncheckedCreateWithoutFileInput>
  }

  export type IndexHistoryCreateManyFileInputEnvelope = {
    data: IndexHistoryCreateManyFileInput | IndexHistoryCreateManyFileInput[]
    skipDuplicates?: boolean
  }

  export type CodebaseUpsertWithoutFilesInput = {
    update: XOR<CodebaseUpdateWithoutFilesInput, CodebaseUncheckedUpdateWithoutFilesInput>
    create: XOR<CodebaseCreateWithoutFilesInput, CodebaseUncheckedCreateWithoutFilesInput>
    where?: CodebaseWhereInput
  }

  export type CodebaseUpdateToOneWithWhereWithoutFilesInput = {
    where?: CodebaseWhereInput
    data: XOR<CodebaseUpdateWithoutFilesInput, CodebaseUncheckedUpdateWithoutFilesInput>
  }

  export type CodebaseUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutCodebasesNestedInput
    syncJobs?: SyncJobUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    syncJobs?: SyncJobUncheckedUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUncheckedUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUncheckedUpdateManyWithoutCodebaseNestedInput
  }

  export type IndexHistoryUpsertWithWhereUniqueWithoutFileInput = {
    where: IndexHistoryWhereUniqueInput
    update: XOR<IndexHistoryUpdateWithoutFileInput, IndexHistoryUncheckedUpdateWithoutFileInput>
    create: XOR<IndexHistoryCreateWithoutFileInput, IndexHistoryUncheckedCreateWithoutFileInput>
  }

  export type IndexHistoryUpdateWithWhereUniqueWithoutFileInput = {
    where: IndexHistoryWhereUniqueInput
    data: XOR<IndexHistoryUpdateWithoutFileInput, IndexHistoryUncheckedUpdateWithoutFileInput>
  }

  export type IndexHistoryUpdateManyWithWhereWithoutFileInput = {
    where: IndexHistoryScalarWhereInput
    data: XOR<IndexHistoryUpdateManyMutationInput, IndexHistoryUncheckedUpdateManyWithoutFileInput>
  }

  export type CodebaseCreateWithoutSyncJobsInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutCodebasesInput
    files?: FileCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseUncheckedCreateWithoutSyncJobsInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    files?: FileUncheckedCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigUncheckedCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingUncheckedCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseCreateOrConnectWithoutSyncJobsInput = {
    where: CodebaseWhereUniqueInput
    create: XOR<CodebaseCreateWithoutSyncJobsInput, CodebaseUncheckedCreateWithoutSyncJobsInput>
  }

  export type UserCreateWithoutSyncJobsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSyncJobsInput = {
    id?: string
    email: string
    password?: string | null
    name?: string | null
    avatar?: string | null
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSyncJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSyncJobsInput, UserUncheckedCreateWithoutSyncJobsInput>
  }

  export type IndexHistoryCreateWithoutSyncJobInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase: CodebaseCreateNestedOneWithoutIndexHistoryInput
    file?: FileCreateNestedOneWithoutIndexHistoryInput
  }

  export type IndexHistoryUncheckedCreateWithoutSyncJobInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
    fileId?: string | null
  }

  export type IndexHistoryCreateOrConnectWithoutSyncJobInput = {
    where: IndexHistoryWhereUniqueInput
    create: XOR<IndexHistoryCreateWithoutSyncJobInput, IndexHistoryUncheckedCreateWithoutSyncJobInput>
  }

  export type IndexHistoryCreateManySyncJobInputEnvelope = {
    data: IndexHistoryCreateManySyncJobInput | IndexHistoryCreateManySyncJobInput[]
    skipDuplicates?: boolean
  }

  export type CodebaseUpsertWithoutSyncJobsInput = {
    update: XOR<CodebaseUpdateWithoutSyncJobsInput, CodebaseUncheckedUpdateWithoutSyncJobsInput>
    create: XOR<CodebaseCreateWithoutSyncJobsInput, CodebaseUncheckedCreateWithoutSyncJobsInput>
    where?: CodebaseWhereInput
  }

  export type CodebaseUpdateToOneWithWhereWithoutSyncJobsInput = {
    where?: CodebaseWhereInput
    data: XOR<CodebaseUpdateWithoutSyncJobsInput, CodebaseUncheckedUpdateWithoutSyncJobsInput>
  }

  export type CodebaseUpdateWithoutSyncJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutCodebasesNestedInput
    files?: FileUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseUncheckedUpdateWithoutSyncJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    files?: FileUncheckedUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUncheckedUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUncheckedUpdateManyWithoutCodebaseNestedInput
  }

  export type UserUpsertWithoutSyncJobsInput = {
    update: XOR<UserUpdateWithoutSyncJobsInput, UserUncheckedUpdateWithoutSyncJobsInput>
    create: XOR<UserCreateWithoutSyncJobsInput, UserUncheckedCreateWithoutSyncJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSyncJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSyncJobsInput, UserUncheckedUpdateWithoutSyncJobsInput>
  }

  export type UserUpdateWithoutSyncJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSyncJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type IndexHistoryUpsertWithWhereUniqueWithoutSyncJobInput = {
    where: IndexHistoryWhereUniqueInput
    update: XOR<IndexHistoryUpdateWithoutSyncJobInput, IndexHistoryUncheckedUpdateWithoutSyncJobInput>
    create: XOR<IndexHistoryCreateWithoutSyncJobInput, IndexHistoryUncheckedCreateWithoutSyncJobInput>
  }

  export type IndexHistoryUpdateWithWhereUniqueWithoutSyncJobInput = {
    where: IndexHistoryWhereUniqueInput
    data: XOR<IndexHistoryUpdateWithoutSyncJobInput, IndexHistoryUncheckedUpdateWithoutSyncJobInput>
  }

  export type IndexHistoryUpdateManyWithWhereWithoutSyncJobInput = {
    where: IndexHistoryScalarWhereInput
    data: XOR<IndexHistoryUpdateManyMutationInput, IndexHistoryUncheckedUpdateManyWithoutSyncJobInput>
  }

  export type CodebaseCreateWithoutIndexHistoryInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutCodebasesInput
    files?: FileCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseUncheckedCreateWithoutIndexHistoryInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    files?: FileUncheckedCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobUncheckedCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigUncheckedCreateNestedOneWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingUncheckedCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseCreateOrConnectWithoutIndexHistoryInput = {
    where: CodebaseWhereUniqueInput
    create: XOR<CodebaseCreateWithoutIndexHistoryInput, CodebaseUncheckedCreateWithoutIndexHistoryInput>
  }

  export type SyncJobCreateWithoutIndexHistoryInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase?: CodebaseCreateNestedOneWithoutSyncJobsInput
    user?: UserCreateNestedOneWithoutSyncJobsInput
  }

  export type SyncJobUncheckedCreateWithoutIndexHistoryInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId?: string | null
    userId?: string | null
  }

  export type SyncJobCreateOrConnectWithoutIndexHistoryInput = {
    where: SyncJobWhereUniqueInput
    create: XOR<SyncJobCreateWithoutIndexHistoryInput, SyncJobUncheckedCreateWithoutIndexHistoryInput>
  }

  export type FileCreateWithoutIndexHistoryInput = {
    id?: string
    path: string
    hash: string
    size: number
    language?: string | null
    status?: $Enums.FileStatus
    lastModified?: Date | string | null
    lineCount?: number
    storageKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebase: CodebaseCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutIndexHistoryInput = {
    id?: string
    path: string
    hash: string
    size: number
    language?: string | null
    status?: $Enums.FileStatus
    lastModified?: Date | string | null
    lineCount?: number
    storageKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
  }

  export type FileCreateOrConnectWithoutIndexHistoryInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutIndexHistoryInput, FileUncheckedCreateWithoutIndexHistoryInput>
  }

  export type CodebaseUpsertWithoutIndexHistoryInput = {
    update: XOR<CodebaseUpdateWithoutIndexHistoryInput, CodebaseUncheckedUpdateWithoutIndexHistoryInput>
    create: XOR<CodebaseCreateWithoutIndexHistoryInput, CodebaseUncheckedCreateWithoutIndexHistoryInput>
    where?: CodebaseWhereInput
  }

  export type CodebaseUpdateToOneWithWhereWithoutIndexHistoryInput = {
    where?: CodebaseWhereInput
    data: XOR<CodebaseUpdateWithoutIndexHistoryInput, CodebaseUncheckedUpdateWithoutIndexHistoryInput>
  }

  export type CodebaseUpdateWithoutIndexHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutCodebasesNestedInput
    files?: FileUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseUncheckedUpdateWithoutIndexHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    files?: FileUncheckedUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUncheckedUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUncheckedUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUncheckedUpdateManyWithoutCodebaseNestedInput
  }

  export type SyncJobUpsertWithoutIndexHistoryInput = {
    update: XOR<SyncJobUpdateWithoutIndexHistoryInput, SyncJobUncheckedUpdateWithoutIndexHistoryInput>
    create: XOR<SyncJobCreateWithoutIndexHistoryInput, SyncJobUncheckedCreateWithoutIndexHistoryInput>
    where?: SyncJobWhereInput
  }

  export type SyncJobUpdateToOneWithWhereWithoutIndexHistoryInput = {
    where?: SyncJobWhereInput
    data: XOR<SyncJobUpdateWithoutIndexHistoryInput, SyncJobUncheckedUpdateWithoutIndexHistoryInput>
  }

  export type SyncJobUpdateWithoutIndexHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneWithoutSyncJobsNestedInput
    user?: UserUpdateOneWithoutSyncJobsNestedInput
  }

  export type SyncJobUncheckedUpdateWithoutIndexHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileUpsertWithoutIndexHistoryInput = {
    update: XOR<FileUpdateWithoutIndexHistoryInput, FileUncheckedUpdateWithoutIndexHistoryInput>
    create: XOR<FileCreateWithoutIndexHistoryInput, FileUncheckedCreateWithoutIndexHistoryInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutIndexHistoryInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutIndexHistoryInput, FileUncheckedUpdateWithoutIndexHistoryInput>
  }

  export type FileUpdateWithoutIndexHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutIndexHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
  }

  export type CodebaseCreateWithoutCodegraphConfigInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutCodebasesInput
    files?: FileCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseUncheckedCreateWithoutCodegraphConfigInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    files?: FileUncheckedCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobUncheckedCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutCodebaseInput
    vectorEmbeddings?: VectorEmbeddingUncheckedCreateNestedManyWithoutCodebaseInput
  }

  export type CodebaseCreateOrConnectWithoutCodegraphConfigInput = {
    where: CodebaseWhereUniqueInput
    create: XOR<CodebaseCreateWithoutCodegraphConfigInput, CodebaseUncheckedCreateWithoutCodegraphConfigInput>
  }

  export type CodebaseUpsertWithoutCodegraphConfigInput = {
    update: XOR<CodebaseUpdateWithoutCodegraphConfigInput, CodebaseUncheckedUpdateWithoutCodegraphConfigInput>
    create: XOR<CodebaseCreateWithoutCodegraphConfigInput, CodebaseUncheckedCreateWithoutCodegraphConfigInput>
    where?: CodebaseWhereInput
  }

  export type CodebaseUpdateToOneWithWhereWithoutCodegraphConfigInput = {
    where?: CodebaseWhereInput
    data: XOR<CodebaseUpdateWithoutCodegraphConfigInput, CodebaseUncheckedUpdateWithoutCodegraphConfigInput>
  }

  export type CodebaseUpdateWithoutCodegraphConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutCodebasesNestedInput
    files?: FileUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseUncheckedUpdateWithoutCodegraphConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    files?: FileUncheckedUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUncheckedUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUncheckedUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseCreateWithoutVectorEmbeddingsInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutCodebasesInput
    files?: FileCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigCreateNestedOneWithoutCodebaseInput
  }

  export type CodebaseUncheckedCreateWithoutVectorEmbeddingsInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    files?: FileUncheckedCreateNestedManyWithoutCodebaseInput
    syncJobs?: SyncJobUncheckedCreateNestedManyWithoutCodebaseInput
    indexHistory?: IndexHistoryUncheckedCreateNestedManyWithoutCodebaseInput
    codegraphConfig?: CodegraphConfigUncheckedCreateNestedOneWithoutCodebaseInput
  }

  export type CodebaseCreateOrConnectWithoutVectorEmbeddingsInput = {
    where: CodebaseWhereUniqueInput
    create: XOR<CodebaseCreateWithoutVectorEmbeddingsInput, CodebaseUncheckedCreateWithoutVectorEmbeddingsInput>
  }

  export type CodebaseUpsertWithoutVectorEmbeddingsInput = {
    update: XOR<CodebaseUpdateWithoutVectorEmbeddingsInput, CodebaseUncheckedUpdateWithoutVectorEmbeddingsInput>
    create: XOR<CodebaseCreateWithoutVectorEmbeddingsInput, CodebaseUncheckedCreateWithoutVectorEmbeddingsInput>
    where?: CodebaseWhereInput
  }

  export type CodebaseUpdateToOneWithWhereWithoutVectorEmbeddingsInput = {
    where?: CodebaseWhereInput
    data: XOR<CodebaseUpdateWithoutVectorEmbeddingsInput, CodebaseUncheckedUpdateWithoutVectorEmbeddingsInput>
  }

  export type CodebaseUpdateWithoutVectorEmbeddingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutCodebasesNestedInput
    files?: FileUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUpdateOneWithoutCodebaseNestedInput
  }

  export type CodebaseUncheckedUpdateWithoutVectorEmbeddingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    files?: FileUncheckedUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUncheckedUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUncheckedUpdateOneWithoutCodebaseNestedInput
  }

  export type ProjectMemberCreateManyUserInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    projectId: string
  }

  export type SyncJobCreateManyUserInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId?: string | null
  }

  export type ProjectMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type SyncJobUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneWithoutSyncJobsNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutSyncJobNestedInput
  }

  export type SyncJobUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: NullableStringFieldUpdateOperationsInput | string | null
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutSyncJobNestedInput
  }

  export type SyncJobUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectMemberCreateManyProjectInput = {
    id?: string
    role?: $Enums.ProjectMemberRole
    joinedAt?: Date | string
    userId: string
  }

  export type CodebaseCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    gitlabUrl: string
    gitlabProjectId?: number | null
    branch?: string
    language?: string | null
    status?: $Enums.CodebaseStatus
    lastSyncAt?: Date | string | null
    totalFiles?: number
    totalLines?: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectMemberUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectMemberUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectMemberRoleFieldUpdateOperationsInput | $Enums.ProjectMemberRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CodebaseUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutCodebaseNestedInput
    syncJobs?: SyncJobUncheckedUpdateManyWithoutCodebaseNestedInput
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutCodebaseNestedInput
    codegraphConfig?: CodegraphConfigUncheckedUpdateOneWithoutCodebaseNestedInput
    vectorEmbeddings?: VectorEmbeddingUncheckedUpdateManyWithoutCodebaseNestedInput
  }

  export type CodebaseUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    gitlabUrl?: StringFieldUpdateOperationsInput | string
    gitlabProjectId?: NullableIntFieldUpdateOperationsInput | number | null
    branch?: StringFieldUpdateOperationsInput | string
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCodebaseStatusFieldUpdateOperationsInput | $Enums.CodebaseStatus
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalFiles?: IntFieldUpdateOperationsInput | number
    totalLines?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateManyCodebaseInput = {
    id?: string
    path: string
    hash: string
    size: number
    language?: string | null
    status?: $Enums.FileStatus
    lastModified?: Date | string | null
    lineCount?: number
    storageKey?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SyncJobCreateManyCodebaseInput = {
    id?: string
    type: $Enums.SyncJobType
    status?: $Enums.SyncJobStatus
    priority?: number
    progress?: number
    message?: string | null
    error?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type IndexHistoryCreateManyCodebaseInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    syncJobId?: string | null
    fileId?: string | null
  }

  export type VectorEmbeddingCreateManyCodebaseInput = {
    id?: string
    content: string
    filePath: string
    chunkIndex: number
    startLine: number
    endLine: number
    startColumn?: number | null
    endColumn?: number | null
    tokenCount: number
    embedding: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    indexHistory?: IndexHistoryUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutFileNestedInput
  }

  export type FileUncheckedUpdateManyWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    language?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFileStatusFieldUpdateOperationsInput | $Enums.FileStatus
    lastModified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lineCount?: IntFieldUpdateOperationsInput | number
    storageKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SyncJobUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutSyncJobsNestedInput
    indexHistory?: IndexHistoryUpdateManyWithoutSyncJobNestedInput
  }

  export type SyncJobUncheckedUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    indexHistory?: IndexHistoryUncheckedUpdateManyWithoutSyncJobNestedInput
  }

  export type SyncJobUncheckedUpdateManyWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumSyncJobTypeFieldUpdateOperationsInput | $Enums.SyncJobType
    status?: EnumSyncJobStatusFieldUpdateOperationsInput | $Enums.SyncJobStatus
    priority?: IntFieldUpdateOperationsInput | number
    progress?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IndexHistoryUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncJob?: SyncJobUpdateOneWithoutIndexHistoryNestedInput
    file?: FileUpdateOneWithoutIndexHistoryNestedInput
  }

  export type IndexHistoryUncheckedUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IndexHistoryUncheckedUpdateManyWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VectorEmbeddingUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    startLine?: IntFieldUpdateOperationsInput | number
    endLine?: IntFieldUpdateOperationsInput | number
    startColumn?: NullableIntFieldUpdateOperationsInput | number | null
    endColumn?: NullableIntFieldUpdateOperationsInput | number | null
    tokenCount?: IntFieldUpdateOperationsInput | number
    embedding?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VectorEmbeddingUncheckedUpdateWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    startLine?: IntFieldUpdateOperationsInput | number
    endLine?: IntFieldUpdateOperationsInput | number
    startColumn?: NullableIntFieldUpdateOperationsInput | number | null
    endColumn?: NullableIntFieldUpdateOperationsInput | number | null
    tokenCount?: IntFieldUpdateOperationsInput | number
    embedding?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VectorEmbeddingUncheckedUpdateManyWithoutCodebaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    chunkIndex?: IntFieldUpdateOperationsInput | number
    startLine?: IntFieldUpdateOperationsInput | number
    endLine?: IntFieldUpdateOperationsInput | number
    startColumn?: NullableIntFieldUpdateOperationsInput | number | null
    endColumn?: NullableIntFieldUpdateOperationsInput | number | null
    tokenCount?: IntFieldUpdateOperationsInput | number
    embedding?: JsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndexHistoryCreateManyFileInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
    syncJobId?: string | null
  }

  export type IndexHistoryUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneRequiredWithoutIndexHistoryNestedInput
    syncJob?: SyncJobUpdateOneWithoutIndexHistoryNestedInput
  }

  export type IndexHistoryUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IndexHistoryUncheckedUpdateManyWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
    syncJobId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IndexHistoryCreateManySyncJobInput = {
    id?: string
    taskType: $Enums.IndexTaskType
    status?: $Enums.IndexTaskStatus
    totalFiles?: number
    processedFiles?: number
    failedFiles?: number
    ignoredFiles?: number
    startTime?: Date | string | null
    endTime?: Date | string | null
    durationMs?: number | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    codebaseId: string
    fileId?: string | null
  }

  export type IndexHistoryUpdateWithoutSyncJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebase?: CodebaseUpdateOneRequiredWithoutIndexHistoryNestedInput
    file?: FileUpdateOneWithoutIndexHistoryNestedInput
  }

  export type IndexHistoryUncheckedUpdateWithoutSyncJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IndexHistoryUncheckedUpdateManyWithoutSyncJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskType?: EnumIndexTaskTypeFieldUpdateOperationsInput | $Enums.IndexTaskType
    status?: EnumIndexTaskStatusFieldUpdateOperationsInput | $Enums.IndexTaskStatus
    totalFiles?: IntFieldUpdateOperationsInput | number
    processedFiles?: IntFieldUpdateOperationsInput | number
    failedFiles?: IntFieldUpdateOperationsInput | number
    ignoredFiles?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    codebaseId?: StringFieldUpdateOperationsInput | string
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CodebaseCountOutputTypeDefaultArgs instead
     */
    export type CodebaseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CodebaseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileCountOutputTypeDefaultArgs instead
     */
    export type FileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SyncJobCountOutputTypeDefaultArgs instead
     */
    export type SyncJobCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SyncJobCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectMemberDefaultArgs instead
     */
    export type ProjectMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CodebaseDefaultArgs instead
     */
    export type CodebaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CodebaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileDefaultArgs instead
     */
    export type FileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SyncJobDefaultArgs instead
     */
    export type SyncJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SyncJobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IndexHistoryDefaultArgs instead
     */
    export type IndexHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IndexHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CodegraphConfigDefaultArgs instead
     */
    export type CodegraphConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CodegraphConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VectorEmbeddingDefaultArgs instead
     */
    export type VectorEmbeddingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VectorEmbeddingDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}