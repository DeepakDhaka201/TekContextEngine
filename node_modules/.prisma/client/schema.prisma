// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String? // Optional for OAuth users
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects ProjectMember[]
  syncJobs SyncJob[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  slug        String        @unique
  status      ProjectStatus @default(ACTIVE)
  settings    Json? // Project-specific settings
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  members   ProjectMember[]
  codebases Codebase[]

  @@map("projects")
}

model ProjectMember {
  id       String            @id @default(cuid())
  role     ProjectMemberRole @default(MEMBER)
  joinedAt DateTime          @default(now())

  // Foreign Keys
  userId    String
  projectId String

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Codebase {
  id              String         @id @default(cuid())
  name            String
  description     String?
  gitlabUrl       String // GitLab repository URL
  gitlabProjectId Int? // GitLab project ID
  branch          String         @default("main")
  language        String? // Primary programming language
  status          CodebaseStatus @default(PENDING)
  lastSyncAt      DateTime?
  totalFiles      Int            @default(0)
  totalLines      Int            @default(0)
  settings        Json? // Codebase-specific settings
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Foreign Keys
  projectId String

  // Relations
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  files            File[]
  syncJobs         SyncJob[]
  indexHistory     IndexHistory[]
  codegraphConfig  CodegraphConfig?
  vectorEmbeddings VectorEmbedding[]

  @@unique([projectId, gitlabUrl])
  @@map("codebases")
}

model File {
  id           String     @id @default(cuid())
  path         String // Relative path within codebase
  hash         String // SHA256 hash of file content
  size         Int // File size in bytes
  language     String? // File language (detected)
  status       FileStatus @default(ACTIVE)
  lastModified DateTime? // Last modification time from Git
  lineCount    Int        @default(0) // Number of lines in file
  storageKey   String? // Storage key for file content in storage service
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Foreign Keys
  codebaseId String

  // Relations
  codebase     Codebase       @relation(fields: [codebaseId], references: [id], onDelete: Cascade)
  indexHistory IndexHistory[]

  @@unique([codebaseId, path])
  @@index([codebaseId, status])
  @@index([hash])
  @@index([language])
  @@map("files")
}

model SyncJob {
  id          String        @id @default(cuid())
  type        SyncJobType
  status      SyncJobStatus @default(PENDING)
  priority    Int           @default(0)
  progress    Int           @default(0) // 0-100
  message     String? // Status message
  error       String? // Error message if failed
  metadata    Json? // Job-specific metadata
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Foreign Keys
  codebaseId String?
  userId     String?

  // Relations
  codebase     Codebase?      @relation(fields: [codebaseId], references: [id], onDelete: Cascade)
  user         User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  indexHistory IndexHistory[]

  @@index([codebaseId, status])
  @@index([status, createdAt])
  @@index([type, status])
  @@map("sync_jobs")
}

model IndexHistory {
  id             String          @id @default(cuid())
  taskType       IndexTaskType // 'embedding', 'codegraph', 'scip', 'tree_sitter'
  status         IndexTaskStatus @default(PENDING)
  totalFiles     Int             @default(0)
  processedFiles Int             @default(0)
  failedFiles    Int             @default(0)
  ignoredFiles   Int             @default(0)
  startTime      DateTime?
  endTime        DateTime?
  durationMs     Int? // Duration in milliseconds
  errorMessage   String? // Error details if failed
  metadata       Json? // Task-specific metadata
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Foreign Keys
  codebaseId String
  syncJobId  String?
  fileId     String?

  // Relations
  codebase Codebase @relation(fields: [codebaseId], references: [id], onDelete: Cascade)
  syncJob  SyncJob? @relation(fields: [syncJobId], references: [id], onDelete: SetNull)
  file     File?    @relation(fields: [fileId], references: [id], onDelete: SetNull)

  @@index([codebaseId, taskType])
  @@index([syncJobId])
  @@index([status, createdAt])
  @@map("index_history")
}

model CodegraphConfig {
  id                String   @id @default(cuid())
  scipEnabled       Boolean  @default(true)
  treeSitterEnabled Boolean  @default(true)
  embeddingEnabled  Boolean  @default(true)
  maxConcurrency    Int      @default(10)
  scipTimeout       Int      @default(1800) // 30 minutes in seconds
  parseTimeout      Int      @default(300) // 5 minutes in seconds
  chunkSize         Int      @default(1000) // Tokens per chunk
  chunkOverlap      Int      @default(200) // Overlap tokens
  maxTokens         Int      @default(8192) // Max tokens per chunk
  badgerDbPath      String? // Custom BadgerDB path
  scipToolsPath     Json? // Paths to SCIP tools
  languageConfig    Json? // Language-specific configurations
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Foreign Keys
  codebaseId String @unique

  // Relations
  codebase Codebase @relation(fields: [codebaseId], references: [id], onDelete: Cascade)

  @@map("codegraph_configs")
}

model VectorEmbedding {
  id          String   @id @default(cuid())
  content     String // The text content that was embedded
  filePath    String // File path within codebase
  chunkIndex  Int // Index of chunk within file
  startLine   Int // Starting line number
  endLine     Int // Ending line number
  startColumn Int? // Starting column (optional)
  endColumn   Int? // Ending column (optional)
  tokenCount  Int // Number of tokens in content
  embedding   Json // Vector embedding as JSON array (TODO: Use proper vector type in production)
  metadata    Json? // Additional metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  codebaseId String

  // Relations
  codebase Codebase @relation(fields: [codebaseId], references: [id], onDelete: Cascade)

  @@unique([codebaseId, filePath, chunkIndex])
  @@index([codebaseId])
  @@index([filePath])
  @@index([codebaseId, filePath])
  @@map("vector_embeddings")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum ProjectMemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum CodebaseStatus {
  PENDING
  SYNCING
  ACTIVE
  ERROR
  ARCHIVED
}

enum FileStatus {
  ACTIVE
  DELETED
  IGNORED
}

enum SyncJobType {
  INITIAL_SYNC
  INCREMENTAL_SYNC
  FULL_RESYNC
  CLEANUP
  INDEX_ONLY // For triggering only indexing without sync
}

enum SyncJobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum IndexTaskType {
  EMBEDDING // Vector embedding generation
  CODEGRAPH // Combined SCIP + Tree-sitter processing
  SCIP // SCIP-only processing
  TREE_SITTER // Tree-sitter-only processing
}

enum IndexTaskStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
  PARTIAL_SUCCESS // Some files processed successfully
}
