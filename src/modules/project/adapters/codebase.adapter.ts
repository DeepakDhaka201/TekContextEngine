import { Codebase, IndexMode, TekProject } from '@/entities';
import { CreateCodebaseDto } from '../dto';
import { GitConfig } from '@/config/git.config';
import * as crypto from 'crypto';

export class CodebaseAdapter {
  /**
   * Map CreateCodebaseDto to Codebase entity
   */
  static fromCreateDto(
    dto: CreateCodebaseDto, 
    tekProject: TekProject, 
    gitlabRepo: any
  ): Codebase {
    const codebase = new Codebase();
    codebase.project = tekProject;
    codebase.name = dto.name;
    codebase.gitlabUrl = dto.gitlabUrl;
    codebase.gitlabProjectId = gitlabRepo.id;
    codebase.branch = dto.branch || gitlabRepo.default_branch || 'main';
    codebase.language = dto.language || 'unknown';
    
    // Storage path will be generated by git sync task
    codebase.storagePath = '';
    
    codebase.syncMode = this.mapIndexMode(dto.indexMode) || IndexMode.MANUAL;
    codebase.metadata = {
      gitConfig: {} as GitConfig,
      indexConfig: {
        includePaths: [],
        excludePaths: ['node_modules', '.git', 'dist', 'build'],
        maxFileSize: 1024 * 1024, // 1MB
      },
      statistics: {
        totalFiles: 0,
        totalLines: 0,
        languages: {},
      },
      gitlabRepo: {
        id: gitlabRepo.id,
        name: gitlabRepo.name,
        defaultBranch: gitlabRepo.default_branch,
        visibility: gitlabRepo.visibility,
        lastActivity: gitlabRepo.last_activity_at,
      },
    };
    return codebase;
  }

  /**
   * Map string index mode to enum
   */
  private static mapIndexMode(indexMode?: string): IndexMode | undefined {
    switch (indexMode) {
      case 'manual':
        return IndexMode.MANUAL;
      case 'auto':
        return IndexMode.AUTO;
      case 'webhook':
        return IndexMode.WEBHOOK;
      default:
        return undefined;
    }
  }
}